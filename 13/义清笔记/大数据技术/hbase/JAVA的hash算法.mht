From: WizMime<support@wiz.cn>
Subject: =?gb2312?B?SkFWQbXEaGFzaMvjt6g=?=
Date: Date: Fri, 23 Jul 2021 05:51:05 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="multipart/alternative";
	boundary="----=_Next_Part_0000637920.113"

This is a multi-part message in MIME format.

------=_Next_Part_0000637920.113
Content-Type: multipart/alternative;
	boundary="----=_Next_Part_0000212640.008"


------=_Next_Part_0000212640.008
Content-Type: text/plain;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable

This is a multi-part message in MIME format.

------=_Next_Part_0000212640.008
Content-Type: text/html;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable

<!doctype html>=0A<html><head>=0D=0A<meta http-equiv=3D"Content-T=
ype" content=3D"text/html; charset=3Dgb2312">=0A=0A=0A=0A=0A=0A=0A=
=0A=0A=0A=0A=0A=0A=0A<meta http-equiv=3D"X-UA-Compatible" content=
=3D"IE=3D8"/>=0A=0A=0A<title>JAVA=B5=C4hash=CB=E3=B7=A8</title>=0A=
=0A=0A=0A=0A=0A<style type=3D"text/css" id=3D"wiz_custom_css">=0A=
body=0A{=0A    font-family: Arial;=0A    font-size: 10.5pt;=0A  =20=
 line-height: 1.5;=0A}=0Ahtml, body=0A{=0A    color: ;=0A    back=
ground-color: ;=0A}=0Ah1 {=0A    font-size:1.5em;=0A    font-weig=
ht:bold;=0A}=0Ah2 {=0A    font-size:1.4em;=0A    font-weight:bold=
;=0A}=0Ah3 {=0A    font-size:1.3em;=0A    font-weight:bold;=0A}=0A=
h4 {=0A    font-size:1.2em;=0A    font-weight:bold;=0A}=0Ah5 {=0A=
    font-size:1.1em;=0A    font-weight:bold;=0A}=0Ah6 {=0A    fon=
t-size:1.0em;=0A    font-weight:bold;=0A}=0Aimg {=0A    border:0;=
=0A    max-width: 100%;=0A    height: auto !important;=0A}=0Abloc=
kquote {=0A    margin-top:0px;=0A    margin-bottom:0px;=0A}=0Atab=
le {=0A    border-collapse:collapse;=0A    border:1px solid #bbbb=
bb;=0A}=0Atd {=0A    border-collapse:collapse;=0A    border:1px s=
olid #bbbbbb;=0A}=0A</style>=0A</head>=0A=0A<body><p>/**<br>* Has=
h=CB=E3=B7=A8=B4=F3=C8=AB&lt;br&gt;<br>* =CD=C6=BC=F6=CA=B9=D3=C3=
FNV1=CB=E3=B7=A8<br>* @algorithm None<br>* @author Goodzzp 2006-1=
1-20<br>* @lastEdit Goodzzp 2006-11-20<br>* @editDetail Create<br=
>*/<br>public class HashAlgorithms<br>{<br>&nbsp;&nbsp;&nbsp; /**=
//**<br>&nbsp;&nbsp;&nbsp; * =BC=D3=B7=A8hash<br>&nbsp;&nbsp;&nbs=
p; * @param key =D7=D6=B7=FB=B4=AE<br>&nbsp;&nbsp;&nbsp; * @param=
 prime =D2=BB=B8=F6=D6=CA=CA=FD<br>&nbsp;&nbsp;&nbsp; * @return h=
ash=BD=E1=B9=FB<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; pu=
blic static int additiveHash(String key, int prime)<br>&nbsp;&nbs=
p;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash=
, i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (hash =3D=20=
key.length(), i =3D 0; i &lt; key.length(); i++)<br>&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash +=3D k=
ey.charAt(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retur=
n (hash % prime);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; <=
br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * =D0=FD=D7=AA=
hash<br>&nbsp;&nbsp;&nbsp; * @param key =CA=E4=C8=EB=D7=D6=B7=FB=B4=
=AE<br>&nbsp;&nbsp;&nbsp; * @param prime =D6=CA=CA=FD<br>&nbsp;&n=
bsp;&nbsp; * @return hash=D6=B5<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp=
;&nbsp;&nbsp; public static int rotatingHash(String key, int prim=
e)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; int hash, i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
; for (hash=3Dkey.length(), i=3D0; i&lt;key.length(); ++i)<br>&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h=
ash =3D (hash&lt;&lt;4)^(hash&gt;&gt;28)^key.charAt(i);<br>&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (hash % prime);<br>&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; return (h=
ash ^ (hash&gt;&gt;10) ^ (hash&gt;&gt;20));<br>&nbsp;&nbsp;&nbsp;=
 }<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; // =CC=E6=B4=FA=A3=
=BA<br>&nbsp;&nbsp;&nbsp; // =CA=B9=D3=C3=A3=BAhash =3D (hash ^ (=
hash&gt;&gt;10) ^ (hash&gt;&gt;20)) &amp; mask;<br>&nbsp;&nbsp;&n=
bsp; // =CC=E6=B4=FA=A3=BAhash %=3D prime;</p>=0A<p>&nbsp;&nbsp;&=
nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * MASK=D6=B5=A3=AC=CB=E6=B1=E3=
=D5=D2=D2=BB=B8=F6=D6=B5=A3=AC=D7=EE=BA=C3=CA=C7=D6=CA=CA=FD<br>&=
nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; static int M_MASK =3D=20=
0x8765fed1;<br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; *=
 =D2=BB=B4=CE=D2=BB=B8=F6hash<br>&nbsp;&nbsp;&nbsp; * @param key=20=
=CA=E4=C8=EB=D7=D6=B7=FB=B4=AE<br>&nbsp;&nbsp;&nbsp; * @return =CA=
=E4=B3=F6hash=D6=B5<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp=
; public static int oneByOneHash(String key)<br>&nbsp;&nbsp;&nbsp=
; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;=
 hash, i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (hash=
=3D0, i=3D0; i&lt;key.length(); ++i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; hash +=3D key.charAt(i);<br>&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash +=3D=20=
(hash &lt;&lt; 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; hash ^=3D (hash &gt;&gt; 6);<br>&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp; hash +=3D (hash &lt;&lt; 3);<br>&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp; hash ^=3D (hash &gt;&gt; 11);<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash +=3D (hash &lt;&lt; 1=
5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;=20=
return (hash &amp; M_MASK);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp; return hash;<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbs=
p; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * Bernste=
in's hash<br>&nbsp;&nbsp;&nbsp; * @param key =CA=E4=C8=EB=D7=D6=BD=
=DA=CA=FD=D7=E9<br>&nbsp;&nbsp;&nbsp; * @param level =B3=F5=CA=BC=
hash=B3=A3=C1=BF<br>&nbsp;&nbsp;&nbsp; * @return =BD=E1=B9=FBhash=
<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; public static int=
 bernstein(String key)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D 0;<br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; int i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp; for (i=3D0; i&lt;key.length(); ++i) hash =3D 33*hash=
 + key.charAt(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r=
eturn hash;<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; <br>&nb=
sp;&nbsp;&nbsp; //<br>&nbsp;&nbsp;&nbsp; /**///// Pearson's Hash<=
br>&nbsp;&nbsp;&nbsp; // char pearson(char[]key, ub4 len, char ta=
b[256])<br>&nbsp;&nbsp;&nbsp; // {<br>&nbsp;&nbsp;&nbsp; //&nbsp;=
&nbsp; char hash;<br>&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; ub4 i;<br>=
&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; for (hash=3Dlen, i=3D0; i&lt;le=
n; ++i)<br>&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp;&nbsp; hash=3Dt=
ab[hash^key[i]];<br>&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; return (has=
h);<br>&nbsp;&nbsp;&nbsp; // }<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&n=
bsp;&nbsp; /**///// CRC Hashing=A3=AC=BC=C6=CB=E3crc,=BE=DF=CC=E5=
=B4=FA=C2=EB=BC=FB=C6=E4=CB=FB<br>&nbsp;&nbsp;&nbsp; // ub4 crc(c=
har *key, ub4 len, ub4 mask, ub4 tab[256])<br>&nbsp;&nbsp;&nbsp;=20=
// {<br>&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; ub4 hash, i;<br>&nbsp;&=
nbsp;&nbsp; //&nbsp;&nbsp; for (hash=3Dlen, i=3D0; i&lt;len; ++i)=
<br>&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp;&nbsp; hash =3D (hash=20=
&gt;&gt; 8) ^ tab[(hash &amp; 0xff) ^ key[i]];<br>&nbsp;&nbsp;&nb=
sp; //&nbsp;&nbsp; return (hash &amp; mask);<br>&nbsp;&nbsp;&nbsp=
; // }<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&n=
bsp;&nbsp;&nbsp; * Universal Hashing<br>&nbsp;&nbsp;&nbsp; */<br>=
&nbsp;&nbsp;&nbsp; public static int universal(char[]key, int mas=
k, int[] tab)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp; int hash =3D key.length, i, len =3D key.length=
;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=3D0; i&lt;=
(len&lt;&lt;3); i+=3D8)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp; char k =3D key[i&gt;&gt;3];<br>&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((k&amp;0x01) =3D=
=3D 0) hash ^=3D tab[i+0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((k&amp;0x02) =3D=3D 0) hash ^=
=3D tab[i+1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp; if ((k&amp;0x04) =3D=3D 0) hash ^=3D tab[i+2];=
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp; if ((k&amp;0x08) =3D=3D 0) hash ^=3D tab[i+3];<br>&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((k&=
amp;0x10) =3D=3D 0) hash ^=3D tab[i+4];<br>&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((k&amp;0x20) =3D=
=3D 0) hash ^=3D tab[i+5];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((k&amp;0x40) =3D=3D 0) hash ^=
=3D tab[i+6];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp; if ((k&amp;0x80) =3D=3D 0) hash ^=3D tab[i+7];=
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (hash &amp; mask);<br>&nbsp;=
&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//=
**<br>&nbsp;&nbsp;&nbsp; * Zobrist Hashing<br>&nbsp;&nbsp;&nbsp;=20=
*/<br>&nbsp;&nbsp;&nbsp; public static int zobrist( char[] key,in=
t mask, int[][] tab)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp; int hash, i;<br>&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp; for (hash=3Dkey.length, i=3D0; i&lt;key.lengt=
h; ++i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp; hash ^=3D tab[i][key[i]];<br>&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp; return (hash &amp; mask);<br>&nbsp;&nbsp;&nbs=
p; }<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; // LOOKUP3<br>&=
nbsp;&nbsp;&nbsp; // =BC=FBBob Jenkins(3).c=CE=C4=BC=FE<br>&nbsp;=
&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; // 32=CE=BBFNV=CB=E3=B7=A8<br=
>&nbsp;&nbsp;&nbsp; static int M_SHIFT =3D 0;<br>&nbsp;&nbsp;&nbs=
p; /**//**<br>&nbsp;&nbsp;&nbsp; * 32=CE=BB=B5=C4FNV=CB=E3=B7=A8<=
br>&nbsp;&nbsp;&nbsp; * @param data =CA=FD=D7=E9<br>&nbsp;&nbsp;&=
nbsp; * @return int=D6=B5<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp=
;&nbsp; public static int FNVHash(byte[] data)<br>&nbsp;&nbsp;&nb=
sp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D=20=
(int)2166136261L;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f=
or(byte b : data)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp; hash =3D (hash * 16777619) ^ b;<br>&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (M_SHIFT =3D=3D 0)<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; re=
turn hash;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (=
hash ^ (hash &gt;&gt; M_SHIFT)) &amp; M_MASK;<br>&nbsp;&nbsp;&nbs=
p; }<br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * =B8=C4=
=BD=F8=B5=C432=CE=BBFNV=CB=E3=B7=A81<br>&nbsp;&nbsp;&nbsp; * @par=
am data =CA=FD=D7=E9<br>&nbsp;&nbsp;&nbsp; * @return int=D6=B5<br=
>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; public static int FN=
VHash1(byte[] data)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; final int p =3D 16777619;<br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D (int)2166136261L;<br=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(byte b:data)<br>&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
 hash =3D (hash ^ b) * p;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp; hash +=3D hash &lt;&lt; 13;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; hash ^=3D hash &gt;&gt; 7;<br>&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp; hash +=3D hash &lt;&lt; 3;<br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash ^=3D hash &gt;&gt; 17;<br>&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash +=3D hash &lt;&lt;=20=
5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hash;<br>=
&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp=
;&nbsp; * =B8=C4=BD=F8=B5=C432=CE=BBFNV=CB=E3=B7=A81<br>&nbsp;&nb=
sp;&nbsp; * @param data =D7=D6=B7=FB=B4=AE<br>&nbsp;&nbsp;&nbsp;=20=
* @return int=D6=B5<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp=
; public static int FNVHash1(String data)<br>&nbsp;&nbsp;&nbsp; {=
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final int p =3D 16=
777619;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D=
 (int)2166136261L;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20=
for(int i=3D0;i&lt;data.length();i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash =3D (hash ^ data.=
charAt(i)) * p;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has=
h +=3D hash &lt;&lt; 13;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp; hash ^=3D hash &gt;&gt; 7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp; hash +=3D hash &lt;&lt; 3;<br>&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp; hash ^=3D hash &gt;&gt; 17;<br>&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash +=3D hash &lt;&lt; 5;<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hash;<br>&nbsp;&nbs=
p;&nbsp; }<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<b=
r>&nbsp;&nbsp;&nbsp; * Thomas Wang=B5=C4=CB=E3=B7=A8=A3=AC=D5=FB=CA=
=FDhash<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; public sta=
tic int intHash(int key)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key +=3D ~(key &lt;&lt; 15);<br>&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key ^=3D (key &gt;&gt;&gt=
; 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key +=3D (ke=
y &lt;&lt; 3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key=20=
^=3D (key &gt;&gt;&gt; 6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; key +=3D ~(key &lt;&lt; 11);<br>&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp; key ^=3D (key &gt;&gt;&gt; 16);<br>&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return key;<br>&nbsp;&nbsp;&nbsp;=20=
}<br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * RS=CB=E3=B7=
=A8hash<br>&nbsp;&nbsp;&nbsp; * @param str =D7=D6=B7=FB=B4=AE<br>=
&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; public static int RSH=
ash(String str)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp; int b&nbsp;&nbsp;&nbsp; =3D 378551;<br>&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a&nbsp;&nbsp;&nbsp; =3D=
 63689;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D=
 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int i =3D 0; i &lt; str.lengt=
h(); i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ha=
sh =3D hash * a + str.charAt(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a&nbsp;&nbsp;&nbsp; =3D a *=
 b;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp; return (hash &amp; 0x7FFFFFFF);<br>&nbsp;&nbsp;&nb=
sp; }<br>&nbsp;&nbsp;&nbsp; /**//* End Of RS Hash Function */<br>=
&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;=
&nbsp; * JS=CB=E3=B7=A8<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&=
nbsp; public static int JSHash(String str)<br>&nbsp;&nbsp;&nbsp;=20=
{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D 1315=
423911;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int i =3D 0; i &lt; str.l=
ength(); i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
; hash ^=3D ((hash &lt;&lt; 5) + str.charAt(i) + (hash &gt;&gt; 2=
));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp; return (hash &amp; 0x7FFFFFFF);<br>&nbsp;&nbsp;&nb=
sp; }<br>&nbsp;&nbsp;&nbsp; /**//* End Of JS Hash Function */<br>=
&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;=
&nbsp; * PJW=CB=E3=B7=A8<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;=
&nbsp; public static int PJWHash(String str)<br>&nbsp;&nbsp;&nbsp=
; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int BitsInUnsig=
nedInt =3D 32;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int=20=
ThreeQuarters&nbsp;&nbsp;&nbsp;&nbsp; =3D (BitsInUnsignedInt * 3)=
 / 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int OneEighth=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =3D BitsInUnsign=
edInt / 8;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int High=
Bits&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =3D 0x=
FFFFFFFF &lt;&lt; (BitsInUnsignedInt - OneEighth);<br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =3D 0;<br>&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int test&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =3D=
 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int i =3D 0; i &lt; str.lengt=
h();i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; has=
h =3D (hash &lt;&lt; OneEighth) + str.charAt(i);<br>&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((t=
est =3D hash &amp; HighBits) !=3D 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; hash =3D (( hash ^ (test &gt;&gt; ThreeQuarters)) &amp; (=
~HighBits));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
 }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (hash &amp; 0x7FFFFFFF);<br=
>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; /**//* End Of P. J. W=
einberger Hash Function */<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;=
&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * ELF=CB=E3=B7=A8<br>&nbsp;&=
nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; public static int ELFHash(St=
ring str)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp; int hash =3D 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp; int x&nbsp;&nbsp;&nbsp; =3D 0;<br>&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp; for(int i =3D 0; i &lt; str.length(); i++)<br>&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash =3D (hash &lt;&lt; 4) +=
 str.charAt(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp; if((x =3D (int)(hash &amp; 0xF0000000L)) !=3D=
 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash ^=3D (x &gt;&gt; 24)=
;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash &amp;=3D ~x;<br>&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
; return (hash &amp; 0x7FFFFFFF);<br>&nbsp;&nbsp;&nbsp; }<br>&nbs=
p;&nbsp;&nbsp; /**//* End Of ELF Hash Function */<br>&nbsp;&nbsp;=
&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * BKD=
R=CB=E3=B7=A8<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; publ=
ic static int BKDRHash(String str)<br>&nbsp;&nbsp;&nbsp; {<br>&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int seed =3D 131; // 31 1=
31 1313 13131 131313 etc..<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; int hash =3D 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int i =3D=
 0; i &lt; str.length(); i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp; hash =3D (hash * seed) + str.charAt(i);<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp; return (hash &amp; 0x7FFFFFFF);<br>&nbsp;&nbsp;&nbsp; }<br>&n=
bsp;&nbsp;&nbsp; /**//* End Of BKDR Hash Function */<br>&nbsp;&nb=
sp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; *=20=
SDBM=CB=E3=B7=A8<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; p=
ublic static int SDBMHash(String str)<br>&nbsp;&nbsp;&nbsp; {<br>=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D 0;<br>&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp; for(int i =3D 0; i &lt; str.length(); i++)<=
br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash =3D str=
.charAt(i) + (hash &lt;&lt; 6) + (hash &lt;&lt; 16) - hash;<br>&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp; return (hash &amp; 0x7FFFFFFF);<br>&nbsp;&nbsp;&nbsp; }<br>=
&nbsp;&nbsp;&nbsp; /**//* End Of SDBM Hash Function */<br>&nbsp;&=
nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp;=20=
* DJB=CB=E3=B7=A8<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp;=20=
public static int DJBHash(String str)<br>&nbsp;&nbsp;&nbsp; {<br>=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D 5381;<br>=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; for(int i =3D 0; i &lt; str.length(); i+=
+)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash =3D=20=
((hash &lt;&lt; 5) + hash) + str.charAt(i);<br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (ha=
sh &amp; 0x7FFFFFFF);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbs=
p; /**//* End Of DJB Hash Function */<br>&nbsp;&nbsp;&nbsp; <br>&=
nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * DEK=CB=E3=B7=A8=
<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; public static int=
 DEKHash(String str)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D str.length();<br>&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; for(int i =3D 0; i &lt; str.length(); i++)<br>&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash =3D ((hash &l=
t;&lt; 5) ^ (hash &gt;&gt; 27)) ^ str.charAt(i);<br>&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retur=
n (hash &amp; 0x7FFFFFFF);<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp=
;&nbsp; /**//* End Of DEK Hash Function */<br>&nbsp;&nbsp;&nbsp;=20=
<br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nbsp;&nbsp; * AP=CB=E3=B7=
=A8<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; public static=20=
int APHash(String str)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp; int hash =3D 0;<br>&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp; for(int i =3D 0; i &lt; str.length(); i++)<br>&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash ^=3D ((i &amp; 1) =3D=3D=
 0) ? ( (hash &lt;&lt; 7) ^ str.charAt(i) ^ (hash &gt;&gt; 3)) :<=
br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (~((hash &lt;&lt; 1=
1) ^ str.charAt(i) ^ (hash &gt;&gt; 5)));<br>&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp; return (hash &amp; 0x7FFFFFFF);<br>&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hash;<br>&nbsp;&nb=
sp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; /**//* End Of AP Hash Function=20=
*/<br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;=
&nbsp;&nbsp; * JAVA=D7=D4=BC=BA=B4=F8=B5=C4=CB=E3=B7=A8<br>&nbsp;=
&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; public static int java(Stri=
ng str)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp; int h =3D 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp; int off =3D 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p; int len =3D str.length();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp; for (int i =3D 0; i &lt; len; i++)<br>&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h =3D 31 * h + str.charAt(off++)=
;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return h;<br>&nbsp;&nbsp;&nbsp; }<=
br>&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; /**//**<br>&nbsp;&nb=
sp;&nbsp; * =BB=EC=BA=CFhash=CB=E3=B7=A8=A3=AC=CA=E4=B3=F664=CE=BB=
=B5=C4=D6=B5<br>&nbsp;&nbsp;&nbsp; */<br>&nbsp;&nbsp;&nbsp; publi=
c static long mixHash(String str)<br>&nbsp;&nbsp;&nbsp; {<br>&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long hash =3D str.hashCode=
();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash &lt;&lt;=3D=
 32;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hash |=3D FNVH=
ash1(str);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return h=
ash;<br>&nbsp;&nbsp;&nbsp; }<br>}</p><br><div style=3D"color:gray=
"><small>=C0=B4=D4=B4=A3=BA&nbsp;&lt;<a href=3D"http://blog.csdn.=
net/zeng622peng/article/details/6036766">http://blog.csdn.net/zen=
g622peng/article/details/6036766</a><small>&gt;</small></small></=
div><small><small>&nbsp;</small></small>=0A=0A=0A=0A</body></html=
>=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=
=0A=0A=0A=0A=0A=0A

------=_Next_Part_0000212640.008--

------=_Next_Part_0000637920.113--

