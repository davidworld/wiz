From: WizMime<support@wiz.cn>
Subject: =?gb2312?B?RmxpbmsgV2luZG93IMXF0PI=?=
Date: Date: Fri, 23 Jul 2021 05:54:34 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="multipart/alternative";
	boundary="----=_Next_Part_0001264359.072"

This is a multi-part message in MIME format.

------=_Next_Part_0001264359.072
Content-Type: multipart/alternative;
	boundary="----=_Next_Part_0000421453.591"


------=_Next_Part_0000421453.591
Content-Type: text/plain;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable

This is a multi-part message in MIME format.

------=_Next_Part_0000421453.591
Content-Type: text/html;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML><html><head>=0D=0A<meta http-equiv=3D"Content-Type=
" content=3D"text/html; charset=3Dgb2312">=0A=0A=0A=0A=0A=0A=0A<t=
itle>Flink Window =C5=C5=D0=F2</title>=0A    =0A<style id=3D"wiz_=
custom_css">html, .wiz-editor-body {font-size: 12pt;}.wiz-editor-=
body {font-family: Helvetica, 'Hiragino Sans GB', '=E5=BE=AE=E8=BD=
=AF=E9=9B=85=E9=BB=91', 'Microsoft YaHei UI', SimSun, SimHei, ari=
al, sans-serif;line-height: 1.7;margin: 0 auto;padding: 20px 16px=
;padding: 1.25rem 1rem;}.wiz-editor-body h1,.wiz-editor-body h2,.=
wiz-editor-body h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-e=
ditor-body h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;paddi=
ng: 0;font-weight: bold;}.wiz-editor-body h1 {font-size:20pt;font=
-size:1.67rem;}.wiz-editor-body h2 {font-size:18pt;font-size:1.5r=
em;}.wiz-editor-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-e=
ditor-body h4 {font-size:14pt;font-size:1.17rem;}.wiz-editor-body=
 h5 {font-size:12pt;font-size:1rem;}.wiz-editor-body h6 {font-siz=
e:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-=
body div,.wiz-editor-body p,.wiz-editor-body ul,.wiz-editor-body=20=
ol,.wiz-editor-body dl,.wiz-editor-body li {margin:8px 0;}.wiz-ed=
itor-body blockquote,.wiz-editor-body table,.wiz-editor-body pre,=
.wiz-editor-body code {margin:8px 0;}.wiz-editor-body .CodeMirror=
 pre {margin:0;}.wiz-editor-body ul,.wiz-editor-body ol {padding-=
left:32px;padding-left:2rem;}.wiz-editor-body ol.wiz-list-level1=20=
> li {list-style-type:decimal;}.wiz-editor-body ol.wiz-list-level=
2 > li {list-style-type:lower-latin;}.wiz-editor-body ol.wiz-list=
-level3 > li {list-style-type:lower-roman;}.wiz-editor-body block=
quote {padding: 0 12px;}.wiz-editor-body blockquote > :first-chil=
d {margin-top:0;}.wiz-editor-body blockquote > :last-child {margi=
n-bottom:0;}.wiz-editor-body img {border:0;max-width:100%;height:=
auto !important;margin:2px 0;}.wiz-editor-body table {border-coll=
apse:collapse;border:1px solid #bbbbbb;}.wiz-editor-body td,.wiz-=
editor-body th {padding:4px 8px;border-collapse:collapse;border:1=
px solid #bbbbbb;min-height:28px;word-break:break-word;box-sizing=
: border-box;}.wiz-hide {display:none !important;}</style></head>=
=0A=0A<body class=3D"wiz-editor-body"  spellcheck=3D"false"><div>=
</div><h1 style=3D"font-size: 2rem; color: rgb(36, 41, 46);">Flin=
k Window =C5=C5=D0=F2</h1><h2 style=3D"font-size: 1.5rem; color:=20=
rgb(36, 41, 46);">=B8=C5=CA=F6</h2><ul style=3D"color: rgb(36, 41=
, 46);"><li>=B6=D4=D4=F6=C1=BFWindow=BD=F8=D0=D0=CA=E4=B3=F6=C5=C5=
=D0=F2</li><li>WordCount=D4=F6=C1=BF(=B0=B4=B5=A5=B4=CA=C3=FB=B3=C6=
=C5=C5=D0=F2)</li><li>WordCount=D4=F6=C1=BF(=B0=B4=B5=A5=B4=CA=B8=
=F6=CA=FD=A3=AC=D4=D9=B5=A5=B4=CA=C3=FB=B3=C6=C5=C5=D0=F2)</li></=
ul><h2 style=3D"font-size: 1.5rem; color: rgb(36, 41, 46);">=D4=B4=
=C2=EB</h2><ul style=3D"color: rgb(36, 41, 46);"><li><a href=3D"h=
ttps://github.com/opensourceteams/flink-maven-scala" style=3D"col=
or:rgb(3, 102, 214);text-decoration:none;">https://github.com/ope=
nsourceteams/flink-maven-scala</a></li></ul><h2 style=3D"font-siz=
e: 1.5rem; color: rgb(36, 41, 46);">=D4=B4=C2=EB=B7=D6=CE=F6</h2>=
<h3 style=3D"font-size: 1.25rem; color: rgb(36, 41, 46);">WordCou=
nt =B3=CC=D0=F2(=D4=F6=C1=BF=B0=B4=B5=A5=B4=CA=C9=FD=D0=F2=C5=C5=D0=
=F2)</h3><ul style=3D"color: rgb(36, 41, 46);"><li>DataStream.win=
dowAll =CB=B5=C3=F7=CA=C7window=D6=D0=B5=C4=CB=F9=D3=D0Key=B7=B5=BB=
=D8AllWindowedStream</li><li>AllWindowedStream.process(ProcessAll=
WindowFunction),ProcessAllWindowFunction=CA=FD=B6=A8=D2=E5=D5=FB=B8=
=F6Window=B5=C4=CB=F9=D3=D0=CA=FD=BE=DD=B4=AB=B9=FD=C0=B4=A3=AC=BD=
=F8=D0=D0=B4=A6=C0=ED =BF=C9=D2=D4=BD=F8=D0=D0=B0=B4key=BA=CF=B2=A2=
=A3=AC=B0=B4=B5=A5=B4=CA=C5=C5=D0=F2=A3=AC=B0=B4=B5=A5=B4=CA=B8=F6=
=CA=FD=C5=C5=D0=F2</li><li>BucketingSink=D6=B8=B6=A8=CE=C4=BC=FE=CA=
=E4=B3=F6=C4=BF=C2=BC</li></ul><pre style=3D"font-size: 0.85rem;=20=
color: rgb(36, 41, 46); background-color: rgb(246, 248, 250);"><c=
ode>=0Apackage com.opensourceteams.module.bigdata.flink.example.s=
tream.worldcount.nc=0A=0Aimport java.time.ZoneId=0A=0Aimport org.=
apache.flink.configuration.Configuration=0Aimport org.apache.flin=
k.streaming.api.scala.StreamExecutionEnvironment=0Aimport org.apa=
che.flink.streaming.api.scala.function.ProcessAllWindowFunction=0A=
import org.apache.flink.streaming.api.windowing.assigners.Tumblin=
gProcessingTimeWindows=0Aimport org.apache.flink.streaming.api.wi=
ndowing.time.Time=0Aimport org.apache.flink.streaming.api.windowi=
ng.windows.TimeWindow=0Aimport org.apache.flink.streaming.connect=
ors.fs.bucketing.{BucketingSink, DateTimeBucketer}=0Aimport org.a=
pache.flink.util.Collector=0A=0Aimport scala.collection.mutable=0A=
=0A/**=0A  * nc -lk 1234  =CA=E4=C8=EB=CA=FD=BE=DD=0A  */=0Aobjec=
t SocketWindowWordCountLocalSinkHDFSAndWindowAllAndSorted {=0A=0A=
=0A  def getConfiguration(isDebug:Boolean =3D false):Configuratio=
n=3D{=0A=0A    val configuration : Configuration =3D new Configur=
ation()=0A=0A    if(isDebug){=0A      val timeout =3D "100000 s"=0A=
      val timeoutHeartbeatPause =3D "1000000 s"=0A      configura=
tion.setString("akka.ask.timeout",timeout)=0A      configuration.=
setString("akka.lookup.timeout",timeout)=0A      configuration.se=
tString("akka.tcp.timeout",timeout)=0A      configuration.setStri=
ng("akka.transport.heartbeat.interval",timeout)=0A      configura=
tion.setString("akka.transport.heartbeat.pause",timeoutHeartbeatP=
ause)=0A      configuration.setString("akka.watch.heartbeat.pause=
",timeout)=0A      configuration.setInteger("heartbeat.interval",=
10000000)=0A      configuration.setInteger("heartbeat.timeout",50=
000000)=0A    }=0A=0A=0A    configuration=0A  }=0A=0A  def main(a=
rgs: Array[String]): Unit =3D {=0A=0A=0A    val port =3D 1234=0A=20=
   // get the execution environment=0A   // val env: StreamExecut=
ionEnvironment =3D StreamExecutionEnvironment.getExecutionEnviron=
ment=0A=0A=0A    val configuration : Configuration =3D getConfigu=
ration(true)=0A=0A    val env:StreamExecutionEnvironment =3D Stre=
amExecutionEnvironment.createLocalEnvironment(1,configuration)=0A=
=0A=0A=0A=0A=0A=0A    // get input data by connecting to the sock=
et=0A    val dataStream =3D env.socketTextStream("localhost", por=
t, '\n')=0A=0A=0A=0A    import org.apache.flink.streaming.api.sca=
la._=0A    val dataStreamDeal =3D dataStream.flatMap( w =3D&gt; w=
.split("\\s") ).map( w =3D&gt; WordWithCount(w,1))=0A      .keyBy=
("word")=0A      //=BD=AB=B5=B1=C7=B0window=D6=D0=CB=F9=D3=D0=B5=C4=
=D0=D0=BC=C7=C2=BC=A3=AC=B7=A2=CB=CD=B9=FD=C0=B4ProcessAllWindowF=
unction=BA=AF=CA=FD=D6=D0=C8=A5=B4=A6=C0=ED(=BF=C9=D2=D4=C5=C5=D0=
=F2=A3=AC=BF=C9=D2=D4=B6=D4=CF=E0=CD=ACkey=BD=F8=D0=D0=B4=A6=C0=ED=
)=0A      //=C8=B1=B5=E3=A3=ACwindow=D6=D0=CA=FD=BE=DD=C1=BF=B4=F3=
=CA=B1=A3=AC=BE=CD=C8=DD=D2=D7=C4=DA=B4=E6=D2=E7=B3=F6=0A      .w=
indowAll(TumblingProcessingTimeWindows.of(Time.seconds(5)))=0A=0A=
      .process(new ProcessAllWindowFunction[WordWithCount,WordWit=
hCount,TimeWindow] {=0A        override def process(context: Cont=
ext, elements: Iterable[WordWithCount], out: Collector[WordWithCo=
unt]): Unit =3D {=0A          val set =3D new mutable.HashSet[Wor=
dWithCount]{}=0A=0A=0A          for(wordCount &lt;- elements){=0A=
            if(set.contains(wordCount)){=0A              set.remo=
ve(wordCount)=0A              set.add(new WordWithCount(wordCount=
.word,wordCount.count + 1))=0A            }else{=0A             =20=
set.add(wordCount)=0A            }=0A          }=0A=0A          v=
al sortSet =3D set.toList.sortWith( (a,b) =3D&gt; a.word.compareT=
o(b.word)  &lt; 0 )=0A=0A          for(wordCount &lt;- sortSet) =20=
out.collect(wordCount)=0A        }=0A=0A      })=0A=0A=0A=0A=0A =20=
    //.countWindow(3)=0A      //.countWindow(3,1)=0A      //.coun=
tWindowAll(3)=0A=0A=0A=0A=0A    //textResult.print().setParalleli=
sm(1)=0A=0A    val bucketingSink =3D new BucketingSink[WordWithCo=
unt]("file:/opt/n_001_workspaces/bigdata/flink/flink-maven-scala-=
2/sink-data")=0A=0A=0A    bucketingSink.setBucketer(new DateTimeB=
ucketer[WordWithCount]("yyyy-MM-dd--HHmm", ZoneId.of("Asia/Shangh=
ai")))=0A    //bucketingSink.setWriter(new SequenceFileWriter[Int=
Writable, Text]())=0A    //bucketingSink.setWriter(new SequenceFi=
leWriter[WordWithCount]())=0A    //bucketingSink.setBatchSize(102=
4 * 1024 * 400) // this is 400 MB,=0A    //bucketingSink.setBatch=
Size(100 ) // this is 400 MB,=0A    bucketingSink.setBatchSize(10=
24 * 1024 * 400 ) // this is 400 MB,=0A    //bucketingSink.setBat=
chRolloverInterval(20 * 60 * 1000); // this is 20 mins=0A    buck=
etingSink.setBatchRolloverInterval( 2 * 1000); // this is 20 mins=
=0A    //setInactiveBucketCheckInterval=0A    //setInactiveBucket=
Threshold=0A    //=C3=BF=BC=E4=B8=F4=B6=E0=BE=C3=CA=B1=BC=E4=A3=AC=
=CD=F9Sink=D6=D0=D0=B4=CA=FD=BE=DD=A3=AC=B2=BB=CA=C7=C3=BF=CC=EC=CC=
=F5=CA=FD=BE=DD=BE=CD=D0=B4=A3=AC=C0=CB=B7=D1=D7=CA=D4=B4=0A    b=
ucketingSink.setInactiveBucketCheckInterval(2 * 1000)=0A    bucke=
tingSink.setInactiveBucketThreshold(2 * 1000)=0A    bucketingSink=
.setAsyncTimeout(1 * 1000)=0A=0A=0A    dataStreamDeal.setParallel=
ism(1)=0A      .addSink(bucketingSink)=0A=0A=0A=0A=0A    if(args=20=
=3D=3D null || args.size =3D=3D0){=0A      env.execute("=C4=AC=C8=
=CF=D7=F7=D2=B5")=0A=0A      //=D6=B4=D0=D0=BC=C6=BB=AE=0A      /=
/println(env.getExecutionPlan)=0A      //StreamGraph=0A     //pri=
ntln(env.getStreamGraph.getStreamingPlanAsJSON)=0A=0A=0A=0A     =20=
//JsonPlanGenerator.generatePlan(jobGraph)=0A=0A    }else{=0A   =20=
  env.execute(args(0))=0A    }=0A=0A    println("=BD=E1=CA=F8")=0A=
=0A  }=0A=0A=0A  // Data type for words with count=0A  case class=
 WordWithCount(word: String, count: Long)=0A=0A/*  abstract priva=
te   class OrderWindowFunction extends ProcessWindowFunction&lt;W=
ordWithCount,WordWithCount,WordWithCount,TimeWindow&gt; {=0A=0A =20=
}*/=0A}=0A=0A=0A=0A</code></pre><h3 style=3D"font-size: 1.25rem;=20=
color: rgb(36, 41, 46);">=CA=E4=C8=EB=CA=FD=BE=DD</h3><pre style=3D=
"font-size: 0.85rem; color: rgb(36, 41, 46); background-color: rg=
b(246, 248, 250);"><code>1 2 1 5 3=0A=0A</code></pre><h3 style=3D=
"font-size: 1.25rem; color: rgb(36, 41, 46);">=CA=E4=B3=F6=CA=FD=BE=
=DD</h3><pre style=3D"font-size: 0.85rem; color: rgb(36, 41, 46);=
 background-color: rgb(246, 248, 250);"><code>WordWithCount(1,2)=0A=
WordWithCount(2,1)=0AWordWithCount(3,1)=0AWordWithCount(5,1)=0A=0A=
=0A</code></pre><h3 style=3D"font-size: 1.25rem; color: rgb(36, 4=
1, 46);">WordCount =B3=CC=D0=F2(=D4=F6=C1=BF,=B0=B4=B5=A5=B4=CA=B8=
=F6=CA=FD=C5=C5=D0=F2=A3=AC=B8=F6=CA=FD=CF=E0=CD=AC=A3=AC=D4=D9=B0=
=B4=B5=A5=B4=CA=C5=C5=D0=F2)</h3><ul style=3D"color: rgb(36, 41,=20=
46);"><li>DataStream.windowAll =CB=B5=C3=F7=CA=C7window=D6=D0=B5=C4=
=CB=F9=D3=D0Key=B7=B5=BB=D8AllWindowedStream</li><li>AllWindowedS=
tream.process(ProcessAllWindowFunction),ProcessAllWindowFunction=CA=
=FD=B6=A8=D2=E5=D5=FB=B8=F6Window=B5=C4=CB=F9=D3=D0=CA=FD=BE=DD=B4=
=AB=B9=FD=C0=B4=A3=AC=BD=F8=D0=D0=B4=A6=C0=ED =BF=C9=D2=D4=BD=F8=D0=
=D0=B0=B4key=BA=CF=B2=A2=A3=AC=B0=B4=B5=A5=B4=CA=C5=C5=D0=F2=A3=AC=
=B0=B4=B5=A5=B4=CA=B8=F6=CA=FD=C5=C5=D0=F2</li><li>BucketingSink=D6=
=B8=B6=A8=CE=C4=BC=FE=CA=E4=B3=F6=C4=BF=C2=BC</li></ul><pre style=
=3D"font-size: 0.85rem; color: rgb(36, 41, 46); background-color:=
 rgb(246, 248, 250);"><code>package com.opensourceteams.module.bi=
gdata.flink.example.stream.worldcount.nc.sort=0A=0Aimport java.ti=
me.ZoneId=0A=0Aimport org.apache.flink.configuration.Configuratio=
n=0Aimport org.apache.flink.streaming.api.scala.StreamExecutionEn=
vironment=0Aimport org.apache.flink.streaming.api.scala.function.=
ProcessAllWindowFunction=0Aimport org.apache.flink.streaming.api.=
windowing.assigners.TumblingProcessingTimeWindows=0Aimport org.ap=
ache.flink.streaming.api.windowing.time.Time=0Aimport org.apache.=
flink.streaming.api.windowing.windows.TimeWindow=0Aimport org.apa=
che.flink.streaming.connectors.fs.bucketing.{BucketingSink, DateT=
imeBucketer}=0Aimport org.apache.flink.util.Collector=0A=0Aimport=
 scala.collection.mutable=0A=0A/**=0A  * nc -lk 1234  =CA=E4=C8=EB=
=CA=FD=BE=DD=0A  */=0Aobject SocketWindowWordCountLocalSinkHDFSAn=
dWindowAllAndSortedByCount {=0A=0A=0A  def getConfiguration(isDeb=
ug:Boolean =3D false):Configuration=3D{=0A=0A    val configuratio=
n : Configuration =3D new Configuration()=0A=0A    if(isDebug){=0A=
      val timeout =3D "100000 s"=0A      val timeoutHeartbeatPaus=
e =3D "1000000 s"=0A      configuration.setString("akka.ask.timeo=
ut",timeout)=0A      configuration.setString("akka.lookup.timeout=
",timeout)=0A      configuration.setString("akka.tcp.timeout",tim=
eout)=0A      configuration.setString("akka.transport.heartbeat.i=
nterval",timeout)=0A      configuration.setString("akka.transport=
.heartbeat.pause",timeoutHeartbeatPause)=0A      configuration.se=
tString("akka.watch.heartbeat.pause",timeout)=0A      configurati=
on.setInteger("heartbeat.interval",10000000)=0A      configuratio=
n.setInteger("heartbeat.timeout",50000000)=0A    }=0A=0A=0A    co=
nfiguration=0A  }=0A=0A  def main(args: Array[String]): Unit =3D=20=
{=0A=0A=0A    val port =3D 1234=0A    // get the execution enviro=
nment=0A   // val env: StreamExecutionEnvironment =3D StreamExecu=
tionEnvironment.getExecutionEnvironment=0A=0A=0A    val configura=
tion : Configuration =3D getConfiguration(true)=0A=0A    val env:=
StreamExecutionEnvironment =3D StreamExecutionEnvironment.createL=
ocalEnvironment(1,configuration)=0A=0A=0A=0A=0A=0A=0A    // get i=
nput data by connecting to the socket=0A    val dataStream =3D en=
v.socketTextStream("localhost", port, '\n')=0A=0A=0A=0A    import=
 org.apache.flink.streaming.api.scala._=0A    val dataStreamDeal=20=
=3D dataStream.flatMap( w =3D&gt; w.split("\\s") ).map( w =3D&gt;=
 WordWithCount(w,1))=0A      .keyBy("word")=0A      //=BD=AB=B5=B1=
=C7=B0window=D6=D0=CB=F9=D3=D0=B5=C4=D0=D0=BC=C7=C2=BC=A3=AC=B7=A2=
=CB=CD=B9=FD=C0=B4ProcessAllWindowFunction=BA=AF=CA=FD=D6=D0=C8=A5=
=B4=A6=C0=ED(=BF=C9=D2=D4=C5=C5=D0=F2=A3=AC=BF=C9=D2=D4=B6=D4=CF=E0=
=CD=ACkey=BD=F8=D0=D0=B4=A6=C0=ED)=0A      //=C8=B1=B5=E3=A3=ACwi=
ndow=D6=D0=CA=FD=BE=DD=C1=BF=B4=F3=CA=B1=A3=AC=BE=CD=C8=DD=D2=D7=C4=
=DA=B4=E6=D2=E7=B3=F6=0A      .windowAll(TumblingProcessingTimeWi=
ndows.of(Time.seconds(5)))=0A=0A      .process(new ProcessAllWind=
owFunction[WordWithCount,WordWithCount,TimeWindow] {=0A        ov=
erride def process(context: Context, elements: Iterable[WordWithC=
ount], out: Collector[WordWithCount]): Unit =3D {=0A          val=
 set =3D new mutable.HashSet[WordWithCount]{}=0A=0A=0A          f=
or(wordCount &lt;- elements){=0A            if(set.contains(wordC=
ount)){=0A              set.remove(wordCount)=0A              set=
.add(new WordWithCount(wordCount.word,wordCount.count + 1))=0A  =20=
         }else{=0A              set.add(wordCount)=0A           =20=
}=0A          }=0A=0A          val sortSet =3D set.toList.sortWit=
h( (a,b) =3D&gt; {=0A=0A=0A            if(a.count =3D=3D b.count)=
{=0A              a.word.compareTo(b.word) &lt; 0=0A            }=
else{=0A              a.count &lt; b.count=0A            }=0A=0A=20=
         } )=0A=0A          for(wordCount &lt;- sortSet)  out.col=
lect(wordCount)=0A        }=0A=0A      })=0A=0A=0A=0A=0A      //.=
countWindow(3)=0A      //.countWindow(3,1)=0A      //.countWindow=
All(3)=0A=0A=0A=0A=0A    //textResult.print().setParallelism(1)=0A=
=0A    val bucketingSink =3D new BucketingSink[WordWithCount]("fi=
le:/opt/n_001_workspaces/bigdata/flink/flink-maven-scala-2/sink-d=
ata")=0A=0A=0A    bucketingSink.setBucketer(new DateTimeBucketer[=
WordWithCount]("yyyy-MM-dd--HHmm", ZoneId.of("Asia/Shanghai")))=0A=
    //bucketingSink.setWriter(new SequenceFileWriter[IntWritable,=
 Text]())=0A    //bucketingSink.setWriter(new SequenceFileWriter[=
WordWithCount]())=0A    //bucketingSink.setBatchSize(1024 * 1024=20=
* 400) // this is 400 MB,=0A    //bucketingSink.setBatchSize(100=20=
) // this is 400 MB,=0A    bucketingSink.setBatchSize(1024 * 1024=
 * 400 ) // this is 400 MB,=0A    //bucketingSink.setBatchRollove=
rInterval(20 * 60 * 1000); // this is 20 mins=0A    //bucketingSi=
nk.setBatchRolloverInterval( 2 * 1000); // this is 20 mins=0A   =20=
//setInactiveBucketCheckInterval=0A    //setInactiveBucketThresho=
ld=0A    //=C3=BF=BC=E4=B8=F4=B6=E0=BE=C3=CA=B1=BC=E4=A3=AC=CD=F9=
Sink=D6=D0=D0=B4=CA=FD=BE=DD=A3=AC=B2=BB=CA=C7=C3=BF=CC=EC=CC=F5=CA=
=FD=BE=DD=BE=CD=D0=B4=A3=AC=C0=CB=B7=D1=D7=CA=D4=B4=0A    bucketi=
ngSink.setBatchRolloverInterval(2 * 1000)=0A    bucketingSink.set=
InactiveBucketThreshold(2 * 1000)=0A    //bucketingSink.setAsyncT=
imeout(1 * 1000)=0A=0A=0A    dataStreamDeal.setParallelism(1)=0A=20=
     .addSink(bucketingSink)=0A=0A=0A=0A=0A    if(args =3D=3D nul=
l || args.size =3D=3D0){=0A      env.execute("=C4=AC=C8=CF=D7=F7=D2=
=B5")=0A=0A      //=D6=B4=D0=D0=BC=C6=BB=AE=0A      //println(env=
.getExecutionPlan)=0A      //StreamGraph=0A     //println(env.get=
StreamGraph.getStreamingPlanAsJSON)=0A=0A=0A=0A      //JsonPlanGe=
nerator.generatePlan(jobGraph)=0A=0A    }else{=0A      env.execut=
e(args(0))=0A    }=0A=0A    println("=BD=E1=CA=F8")=0A=0A  }=0A=0A=
=0A  // Data type for words with count=0A  case class WordWithCou=
nt(word: String, count: Long)=0A=0A/*  abstract private   class O=
rderWindowFunction extends ProcessWindowFunction&lt;WordWithCount=
,WordWithCount,WordWithCount,TimeWindow&gt; {=0A=0A  }*/=0A}=0A=0A=
=0A=0A</code></pre><h3 style=3D"font-size: 1.25rem; color: rgb(36=
, 41, 46);">=CA=E4=C8=EB=CA=FD=BE=DD</h3><pre style=3D"font-size:=
 0.85rem; color: rgb(36, 41, 46); background-color: rgb(246, 248,=
 250);"><code>1 1 2 4 4 3 2 1=0A=0A</code></pre><h3 style=3D"font=
-size: 1.25rem; color: rgb(36, 41, 46);">=CA=E4=B3=F6=CA=FD=BE=DD=
</h3><pre style=3D"font-size: 0.85rem; color: rgb(36, 41, 46); ba=
ckground-color: rgb(246, 248, 250);"><code>=0AWordWithCount(3,1)=0A=
WordWithCount(2,2)=0AWordWithCount(4,2)=0AWordWithCount(1,3)=0A</=
code></pre><br class=3D"Apple-interchange-newline"><br><div style=
=3D"color:gray;"><small>=C0=B4=D4=B4=A3=BA&nbsp;<a href=3D"https:=
//github.com/opensourceteams/flink-maven-scala/blob/master/md/min=
iCluster/flink-window-order.md">https://github.com/opensourceteam=
s/flink-maven-scala/blob/master/md/miniCluster/flink-window-order=
.md</a></small></div></body></html>=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=


------=_Next_Part_0000421453.591--

------=_Next_Part_0001264359.072--

