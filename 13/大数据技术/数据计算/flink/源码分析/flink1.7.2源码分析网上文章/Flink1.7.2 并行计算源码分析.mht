From: WizMime<support@wiz.cn>
Subject: =?gb2312?B?RmxpbmsxLjcuMiCyotDQvMbL49S0wuu31s72?=
Date: Date: Fri, 23 Jul 2021 05:54:34 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="multipart/alternative";
	boundary="----=_Next_Part_0001264452.787"

This is a multi-part message in MIME format.

------=_Next_Part_0001264452.787
Content-Type: multipart/alternative;
	boundary="----=_Next_Part_0000421484.490"


------=_Next_Part_0000421484.490
Content-Type: text/plain;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable

This is a multi-part message in MIME format.

------=_Next_Part_0000421484.490
Content-Type: text/html;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML><html><head>=0D=0A<meta http-equiv=3D"Content-Type=
" content=3D"text/html; charset=3Dgb2312">=0A=0A=0A=0A=0A=0A=0A<t=
itle>Flink1.7.2 =B2=A2=D0=D0=BC=C6=CB=E3=D4=B4=C2=EB=B7=D6=CE=F6<=
/title>=0A    =0A<style id=3D"wiz_custom_css">html, .wiz-editor-b=
ody {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, '=
Hiragino Sans GB', '=E5=BE=AE=E8=BD=AF=E9=9B=85=E9=BB=91', 'Micro=
soft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.=
7;margin: 0 auto;padding: 20px 16px;padding: 1.25rem 1rem;}.wiz-e=
ditor-body h1,.wiz-editor-body h2,.wiz-editor-body h3,.wiz-editor=
-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {margin:20px 0 1=
0px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}.wiz-=
editor-body h1 {font-size:20pt;font-size:1.67rem;}.wiz-editor-bod=
y h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor-body h3 {font-=
size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {font-size:14pt;=
font-size:1.17rem;}.wiz-editor-body h5 {font-size:12pt;font-size:=
1rem;}.wiz-editor-body h6 {font-size:12pt;font-size:1rem;color: #=
777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-editor-body p,.w=
iz-editor-body ul,.wiz-editor-body ol,.wiz-editor-body dl,.wiz-ed=
itor-body li {margin:8px 0;}.wiz-editor-body blockquote,.wiz-edit=
or-body table,.wiz-editor-body pre,.wiz-editor-body code {margin:=
8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;}.wiz-editor-bo=
dy ul,.wiz-editor-body ol {padding-left:32px;padding-left:2rem;}.=
wiz-editor-body ol.wiz-list-level1 > li {list-style-type:decimal;=
}.wiz-editor-body ol.wiz-list-level2 > li {list-style-type:lower-=
latin;}.wiz-editor-body ol.wiz-list-level3 > li {list-style-type:=
lower-roman;}.wiz-editor-body blockquote {padding: 0 12px;}.wiz-e=
ditor-body blockquote > :first-child {margin-top:0;}.wiz-editor-b=
ody blockquote > :last-child {margin-bottom:0;}.wiz-editor-body i=
mg {border:0;max-width:100%;height:auto !important;margin:2px 0;}=
.wiz-editor-body table {border-collapse:collapse;border:1px solid=
 #bbbbbb;}.wiz-editor-body td,.wiz-editor-body th {padding:4px 8p=
x;border-collapse:collapse;border:1px solid #bbbbbb;min-height:28=
px;word-break:break-word;box-sizing: border-box;}.wiz-hide {displ=
ay:none !important;}</style></head>=0A=0A<body class=3D"wiz-edito=
r-body"  spellcheck=3D"false"><div></div><h1 style=3D"font-size:=20=
2rem; color: rgb(36, 41, 46);">Flink1.7.2 =B2=A2=D0=D0=BC=C6=CB=E3=
=D4=B4=C2=EB=B7=D6=CE=F6</h1><h2 style=3D"font-size: 1.5rem; colo=
r: rgb(36, 41, 46);">=D4=B4=C2=EB</h2><ul style=3D"color: rgb(36,=
 41, 46);"><li>=D4=B4=C2=EB:<a href=3D"https://github.com/opensou=
rceteams/flink-maven-scala" style=3D"color:rgb(3, 102, 214);text-=
decoration:none;">https://github.com/opensourceteams/flink-maven-=
scala</a></li><li>Flink1.7.2 Source=A1=A2Window=CA=FD=BE=DD=BD=BB=
=BB=A5=D4=B4=C2=EB=B7=D6=CE=F6:<span>&nbsp;</span><a href=3D"http=
s://github.com/opensourceteams/fink-maven-scala-2/blob/master/md/=
miniCluster/flink-source-window-data-exchange.md" style=3D"color:=
rgb(3, 102, 214);text-decoration:none;">https://github.com/openso=
urceteams/fink-maven-scala-2/blob/master/md/miniCluster/flink-sou=
rce-window-data-exchange.md</a></li></ul><h2 style=3D"font-size:=20=
1.5rem; color: rgb(36, 41, 46);">=B8=C5=CA=F6</h2><ul style=3D"co=
lor: rgb(36, 41, 46);"><li>Flink Window=C8=E7=BA=CE=BD=F8=D0=D0=B2=
=A2=D0=D0=BC=C6=CB=E3</li><li>Flink source=C8=E7=BA=CE=B0=B4key,h=
ash=B7=D6=C7=F8=A3=AC=B2=A2=B7=A2=C9=E4=B5=BD=B6=D4=D3=A6=B7=D6=C7=
=F8=B5=C4=CF=C2=D3=CEWindow</li></ul><h2 style=3D"font-size: 1.5r=
em; color: rgb(36, 41, 46);">WordCount =B3=CC=D0=F2</h2><pre styl=
e=3D"font-size: 0.85rem; color: rgb(36, 41, 46); background-color=
: rgb(246, 248, 250);"><code>package com.opensourceteams.module.b=
igdata.flink.example.stream.worldcount.nc.parallelism=0A=0Aimport=
 org.apache.flink.configuration.Configuration=0Aimport org.apache=
.flink.streaming.api.scala.StreamExecutionEnvironment=0Aimport or=
g.apache.flink.streaming.api.windowing.time.Time=0A=0A/**=0A  * n=
c -lk 1234  =CA=E4=C8=EB=CA=FD=BE=DD=0A  */=0Aobject SocketWindow=
WordCountLocal {=0A=0A=0A=0A  def main(args: Array[String]): Unit=
 =3D {=0A=0A=0A    val port =3D 1234=0A    // get the execution e=
nvironment=0A   // val env: StreamExecutionEnvironment =3D Stream=
ExecutionEnvironment.getExecutionEnvironment=0A=0A=0A    val conf=
iguration : Configuration =3D getConfiguration(true)=0A=0A    val=
 env:StreamExecutionEnvironment =3D StreamExecutionEnvironment.cr=
eateLocalEnvironment(1,configuration)=0A=0A=0A=0A=0A=0A    // get=
 input data by connecting to the socket=0A    val dataStream =3D=20=
env.socketTextStream("localhost", port, '\n')=0A=0A=0A=0A    impo=
rt org.apache.flink.streaming.api.scala._=0A    val textResult =3D=
 dataStream.flatMap( w =3D&gt; w.split("\\s") ).map( w =3D&gt; Wo=
rdWithCount(w,1))=0A      .keyBy("word")=0A      /**=0A        *=20=
=C3=BF20=C3=EB=CB=A2=D0=C2=D2=BB=B4=CE=A3=AC=CF=E0=B5=B1=D3=DA=D6=
=D8=D0=C2=BF=AA=CA=BC=BC=C6=CA=FD=A3=AC=0A        * =BA=C3=B4=A6=A3=
=AC=B2=BB=D0=E8=D2=AA=D2=BB=D6=B1=C4=C3=CB=F9=D3=D0=B5=C4=CA=FD=BE=
=DD=CD=B3=BC=C6=0A        * =D6=BB=D0=E8=D2=AA=D4=DA=D6=B8=B6=A8=CA=
=B1=BC=E4=BC=E4=B8=F4=C4=DA=B5=C4=D4=F6=C1=BF=CA=FD=BE=DD=A3=AC=BC=
=F5=C9=D9=C1=CB=CA=FD=BE=DD=B9=E6=C4=A3=0A        */=0A      .tim=
eWindow(Time.seconds(5))=0A      //.countWindow(3)=0A      //.cou=
ntWindow(3,1)=0A      //.countWindowAll(3)=0A=0A=0A      .sum("co=
unt" )=0A=0A    textResult=0A      .setParallelism(3)=0A      .pr=
int()=0A=0A=0A=0A=0A    if(args =3D=3D null || args.size =3D=3D0)=
{=0A=0A=0A      println("=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=D2=D4=
=CF=C2=CE=AA=D6=B4=D0=D0=BC=C6=BB=AE=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D")=0A      println("=D6=B4=D0=D0=B5=D8=D6=B7(firefox=D0=A7=B9=
=FB=B8=FC=BA=C3):https://flink.apache.org/visualizer")=0A      //=
=D6=B4=D0=D0=BC=C6=BB=AE=0A      //println(env.getExecutionPlan)=0A=
     // println("=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=D2=D4=C9=CF=
=CE=AA=D6=B4=D0=D0=BC=C6=BB=AE JSON=B4=AE=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D\n")=0A      //StreamGraph=0A     println(env.getStre=
amGraph.getStreamingPlanAsJSON)=0A=0A=0A=0A      //JsonPlanGenera=
tor.generatePlan(jobGraph)=0A=0A      env.execute("=C4=AC=C8=CF=D7=
=F7=D2=B5")=0A=0A    }else{=0A      env.execute(args(0))=0A    }=0A=
=0A    println("=BD=E1=CA=F8")=0A=0A  }=0A=0A=0A  // Data type fo=
r words with count=0A  case class WordWithCount(word: String, cou=
nt: Long){=0A    //override def toString: String =3D Thread.curre=
ntThread().getName + word + " : " + count=0A  }=0A=0A=0A  def get=
Configuration(isDebug:Boolean =3D false):Configuration =3D {=0A=0A=
    val configuration : Configuration =3D new Configuration()=0A=0A=
    if(isDebug){=0A      val timeout =3D "100000 s"=0A      val t=
imeoutHeartbeatPause =3D "1000000 s"=0A      configuration.setStr=
ing("akka.ask.timeout",timeout)=0A      configuration.setString("=
akka.lookup.timeout",timeout)=0A      configuration.setString("ak=
ka.tcp.timeout",timeout)=0A      configuration.setString("akka.tr=
ansport.heartbeat.interval",timeout)=0A      configuration.setStr=
ing("akka.transport.heartbeat.pause",timeoutHeartbeatPause)=0A  =20=
   configuration.setString("akka.watch.heartbeat.pause",timeout)=0A=
      configuration.setInteger("heartbeat.interval",10000000)=0A=20=
     configuration.setInteger("heartbeat.timeout",50000000)=0A  =20=
 }=0A=0A=0A    configuration=0A  }=0A=0A=0A}=0A=0A=0A</code></pre=
><h2 style=3D"font-size: 1.5rem; color: rgb(36, 41, 46);">=CA=E4=C8=
=EB=CA=FD=BE=DD</h2><pre style=3D"font-size: 0.85rem; color: rgb(=
36, 41, 46); background-color: rgb(246, 248, 250);"><code>1 2 3 4=
 5 6 7 8 9 10=0A</code></pre><h2 style=3D"font-size: 1.5rem; colo=
r: rgb(36, 41, 46);">=D4=B4=C2=EB=B7=D6=CE=F6</h2><h3 style=3D"fo=
nt-size: 1.25rem; color: rgb(36, 41, 46);">ExecutionGraph.schedul=
eEager</h3><ul style=3D"color: rgb(36, 41, 46);"><li><p>Execution=
Graph =B5=F7=B6=C8</p></li><li><p>executionsToDeploy=B0=FC=C0=A8=CB=
=F9=D3=D0=B5=C4(Source,Window,Sink),=D4=DA=D5=E2=C0=EF=C9=E8=D6=C3=
=B5=C4setParallelism()=B2=A2=D0=D0=B6=C8=CE=AA=B6=E0=C9=D9=A3=AC=BE=
=CD=D3=D0=B6=E0=C9=D9=B8=F6Window,=B1=BE=B0=B8=C0=FD=C9=E8=D6=C3=B5=
=C4=CE=AA3=A3=AC=CB=F9=D2=D4executionsToDeploy=B6=D4=CF=F3=B5=C4=CA=
=FD=BE=DD=C8=E7=CF=C2</p><ul><li><p>(Source: Socket Stream -&gt;=20=
Flat Map -&gt; Map (1/1))</p></li><li><p>(Window(TumblingProcessi=
ngTimeWindows(5000), ProcessingTimeTrigger, SumAggregator, PassTh=
roughWindowFunction) (3/3))</p></li><li><p>(Window(TumblingProces=
singTimeWindows(5000), ProcessingTimeTrigger, SumAggregator, Pass=
ThroughWindowFunction) (2/3))</p></li><li><p>(Window(TumblingProc=
essingTimeWindows(5000), ProcessingTimeTrigger, SumAggregator, Pa=
ssThroughWindowFunction) (1/3))</p></li><li><p>(Sink: Print to St=
d. Out (1/1))</p></li><li><p>=CF=EA=CF=B8executionsToDeploy=B6=D4=
=CF=F3</p></li></ul><pre style=3D"font-size: 0.85rem; background-=
color: rgb(246, 248, 250);"><code>executionsToDeploy =3D {Arrays$=
ArrayList@5323}  size =3D 5=0A</code></pre></li></ul><p style=3D"=
color: rgb(36, 41, 46);">0 =3D {Execution@5324} "Attempt #0 (Sour=
ce: Socket Stream -&gt; Flat Map -&gt; Map (1/1)) @ org.apache.fl=
ink.runtime.jobmaster.slotpool.SingleLogicalSlot@22dc33b2 - [SCHE=
DULED]" 1 =3D {Execution@5506} "Attempt #0 (Window(TumblingProces=
singTimeWindows(5000), ProcessingTimeTrigger, SumAggregator, Pass=
ThroughWindowFunction) (3/3)) @ org.apache.flink.runtime.jobmaste=
r.slotpool.SingleLogicalSlot@8f216e4 - [SCHEDULED]" 2 =3D {Execut=
ion@5507} "Attempt #0 (Window(TumblingProcessingTimeWindows(5000)=
, ProcessingTimeTrigger, SumAggregator, PassThroughWindowFunction=
) (2/3)) @ org.apache.flink.runtime.jobmaster.slotpool.SingleLogi=
calSlot@50ccca83 - [SCHEDULED]" 3 =3D {Execution@5508} "Attempt #=
0 (Window(TumblingProcessingTimeWindows(5000), ProcessingTimeTrig=
ger, SumAggregator, PassThroughWindowFunction) (1/3)) @ org.apach=
e.flink.runtime.jobmaster.slotpool.SingleLogicalSlot@243b4f41 - [=
SCHEDULED]" 4 =3D {Execution@5509} "Attempt #0 (Sink: Print to St=
d. Out (1/1)) @ org.apache.flink.runtime.jobmaster.slotpool.Singl=
eLogicalSlot@67b9a9d7 - [SCHEDULED]" ```</p><ul style=3D"color: r=
gb(36, 41, 46);"><li>=D4=B4=C2=EB</li><li>=B5=F7=D3=C3Execution.d=
eploy()=BD=F8=D0=D0=B2=BF=CA=F0</li></ul><pre style=3D"font-size:=
 0.85rem; color: rgb(36, 41, 46); background-color: rgb(246, 248,=
 250);"><code>/**=0A    *=0A    *=0A    * @param slotProvider  Th=
e resource provider from which the slots are allocated=0A    * @p=
aram timeout       The maximum time that the deployment may take,=
 before a=0A    *                      TimeoutException is thrown=
.=0A    * @returns Future which is completed once the {@link Exec=
utionGraph} has been scheduled.=0A    * The future can also be co=
mpleted exceptionally if an error happened.=0A    */=0A   private=
 CompletableFuture&lt;Void&gt; scheduleEager(SlotProvider slotPro=
vider, final Time timeout) {=0A   	checkState(state =3D=3D JobSta=
tus.RUNNING, "job is not running currently");=0A=0A   	// Importa=
nt: reserve all the space we need up front.=0A   	// that way we=20=
do not have any operation that can fail between allocating the sl=
ots=0A   	// and adding them to the list. If we had a failure in=20=
between there, that would=0A   	// cause the slots to get lost=0A=
   	final boolean queued =3D allowQueuedScheduling;=0A=0A   	// c=
ollecting all the slots may resize and fail in that operation wit=
hout slots getting lost=0A   	final ArrayList&lt;CompletableFutur=
e&lt;Execution&gt;&gt; allAllocationFutures =3D new ArrayList&lt;=
&gt;(getNumberOfExecutionJobVertices());=0A=0A   	final Set&lt;Al=
locationID&gt; allPreviousAllocationIds =3D=0A   		Collections.un=
modifiableSet(computeAllPriorAllocationIdsIfRequiredByScheduling(=
));=0A=0A   	// allocate the slots (obtain all their futures=0A =20=
 	for (ExecutionJobVertex ejv : getVerticesTopologically()) {=0A=20=
  		// these calls are not blocking, they only return futures=0A=20=
  		Collection&lt;CompletableFuture&lt;Execution&gt;&gt; allocati=
onFutures =3D ejv.allocateResourcesForAll(=0A   			slotProvider,=0A=
   			queued,=0A   			LocationPreferenceConstraint.ALL,=0A   			a=
llPreviousAllocationIds,=0A   			timeout);=0A=0A   		allAllocatio=
nFutures.addAll(allocationFutures);=0A   	}=0A=0A   	// this futu=
re is complete once all slot futures are complete.=0A   	// the f=
uture fails once one slot future fails.=0A   	final ConjunctFutur=
e&lt;Collection&lt;Execution&gt;&gt; allAllocationsFuture =3D Fut=
ureUtils.combineAll(allAllocationFutures);=0A=0A   	final Complet=
ableFuture&lt;Void&gt; currentSchedulingFuture =3D allAllocations=
Future=0A   		.thenAccept(=0A   			(Collection&lt;Execution&gt; e=
xecutionsToDeploy) -&gt; {=0A   				for (Execution execution : ex=
ecutionsToDeploy) {=0A   					try {=0A   						execution.deploy()=
;=0A   					} catch (Throwable t) {=0A   						throw new Completi=
onException(=0A   							new FlinkException(=0A   								String.=
format("Could not deploy execution %s.", execution),=0A   						=09=
	t));=0A   					}=0A   				}=0A   			})=0A   		// Generate a more=
 specific failure message for the eager scheduling=0A   		.except=
ionally(=0A   			(Throwable throwable) -&gt; {=0A   				final Thr=
owable strippedThrowable =3D ExceptionUtils.stripCompletionExcept=
ion(throwable);=0A   				final Throwable resultThrowable;=0A=0A =20=
 				if (strippedThrowable instanceof TimeoutException) {=0A   	=09=
			int numTotal =3D allAllocationsFuture.getNumFuturesTotal();=0A=
   					int numComplete =3D allAllocationsFuture.getNumFuturesCom=
pleted();=0A   					String message =3D "Could not allocate all re=
quires slots within timeout of " +=0A   						timeout + ". Slots=20=
required: " + numTotal + ", slots allocated: " + numComplete;=0A=0A=
   					resultThrowable =3D new NoResourceAvailableException(mess=
age);=0A   				} else {=0A   					resultThrowable =3D strippedThr=
owable;=0A   				}=0A=0A   				throw new CompletionException(resu=
ltThrowable);=0A   			});=0A=0A   	return currentSchedulingFuture=
;=0A   }=0A=0A</code></pre><h3 style=3D"font-size: 1.25rem; color=
: rgb(36, 41, 46);">ExecutionState</h3><ul style=3D"color: rgb(36=
, 41, 46);"><li>=D3=C9=D3=DA(Source=A1=A2Window=A1=A2Sink)=B6=BC=CA=
=C7=D7=F6=CE=AAExecution=B6=D4=CF=F3=C0=B4=D4=CB=D0=D0=A3=AC=CF=C8=
=C0=B4=C1=CB=BD=E2=D2=BB=CF=C2Execution=D3=D0=C4=C4=D0=A9=D7=B4=CC=
=AC=A3=AC=BC=B4=D7=B4=CC=AC=B5=C4=C1=F7=D7=AA=A3=AC=B7=BD=B1=E3=C0=
=ED=BD=E2=C1=F7=B3=CC</li><li>Execution=D7=B4=CC=AC=B5=C4=C1=F7=D7=
=AA=CE=AA: CREATED(=D2=D1=B4=B4=BD=A8) -&gt; SCHEDULED(=D2=D1=B5=F7=
=B6=C8) -&gt; DEPLOYING(=B2=BF=CA=F0=D6=D0) -&gt; RUNNING(=D4=CB=D0=
=D0=D6=D0) -&gt; FINISHED(=D2=D1=CD=EA=B3=C9) =B5=C8=A3=AC=D2=D4=CF=
=C2ExecutionState=D6=D0=D3=D0=CF=EA=CF=B8=CB=B5=C3=F7</li></ul><p=
re style=3D"font-size: 0.85rem; color: rgb(36, 41, 46); backgroun=
d-color: rgb(246, 248, 250);"><code>package org.apache.flink.runt=
ime.execution;=0A=0A/**=0A * An enumeration of all states that a=20=
task can be in during its execution.=0A * Tasks usually start in=20=
the state {@code CREATED} and switch states according to=0A * thi=
s diagram:=0A * &lt;pre&gt;{@code=0A *=0A *     CREATED  -&gt; SC=
HEDULED -&gt; DEPLOYING -&gt; RUNNING -&gt; FINISHED=0A *       =20=
|            |            |          |=0A *        |            |=
            |   +------+=0A *        |            |            V=20=
  V=0A *        |            |         CANCELLING -----+----&gt;=20=
CANCELED=0A *        |            |                         |=0A=20=
*        |            +-------------------------+=0A *        |=0A=
 *        |                                   ... -&gt; FAILED=0A=
 *        V=0A *    RECONCILING  -&gt; RUNNING | FINISHED | CANCE=
LED | FAILED=0A *=0A * }&lt;/pre&gt;=0A *=0A * &lt;p&gt;It is pos=
sible to enter the {@code RECONCILING} state from {@code CREATED}=
=0A * state if job manager fail over, and the {@code RECONCILING}=
 state can switch into=0A * any existing task state.=0A *=0A * &l=
t;p&gt;It is possible to enter the {@code FAILED} state from any=20=
other state.=0A *=0A * &lt;p&gt;The states {@code FINISHED}, {@co=
de CANCELED}, and {@code FAILED} are=0A * considered terminal sta=
tes.=0A */=0Apublic enum ExecutionState {=0A=0A	CREATED,=0A	=0A	S=
CHEDULED,=0A	=0A	DEPLOYING,=0A	=0A	RUNNING,=0A=0A	/**=0A	 * This=20=
state marks "successfully completed". It can only be reached when=
 a=0A	 * program reaches the "end of its input". The "end of inpu=
t" can be reached=0A	 * when consuming a bounded input (fix set o=
f files, bounded query, etc) or=0A	 * when stopping a program (no=
t cancelling!) which make the input look like=0A	 * it reached it=
s end at a specific point.=0A	 */=0A	FINISHED,=0A	=0A	CANCELING,=0A=
	=0A	CANCELED,=0A	=0A	FAILED,=0A=0A	RECONCILING;=0A=0A	public boo=
lean isTerminal() {=0A		return this =3D=3D FINISHED || this =3D=3D=
 CANCELED || this =3D=3D FAILED;=0A	}=0A}=0A=0A</code></pre><h3 s=
tyle=3D"font-size: 1.25rem; color: rgb(36, 41, 46);">Execution.de=
ploy()</h3><ul style=3D"color: rgb(36, 41, 46);"><li><p>=B6=D4Exe=
cution=BD=F8=D0=D0=B2=BF=CA=F0</p></li><li><p>=B8=FC=D0=C2Executi=
on=D7=B4=CC=AC,=BD=AB=B5=B1=C7=B0Execution=B5=C4=D7=B4=CC=AC=D3=C9=
SCHEDULED=B8=FC=D0=C2=CE=AADEPLOYING=A3=AC=BC=B4=D3=C9=D2=D1=B5=F7=
=B6=C8=D7=B4=CC=AC=B8=FC=D0=C2=CE=AA=B2=BF=CA=F0=D6=D0</p><pre st=
yle=3D"font-size: 0.85rem; background-color: rgb(246, 248, 250);"=
><code>transitionState(previous, DEPLOYING)=0A</code></pre></li><=
li><p>INFO=C8=D5=D6=BE=CA=E4=B3=F6=A3=BA=B2=BF=CA=F0=C4=C4=D2=BB=B8=
=F6Execution=B5=BD=C4=C4=D2=BB=CC=A8=BB=FA=C6=F7=C9=CF</p><pre st=
yle=3D"font-size: 0.85rem; background-color: rgb(246, 248, 250);"=
><code>LOG.info(String.format("Deploying %s (attempt #%d) to %s",=
 =0A</code></pre><pre style=3D"font-size: 0.85rem; background-col=
or: rgb(246, 248, 250);"><code>13:11:55,910 INFO  [flink-akka.act=
or.default-dispatcher-3] org.apache.flink.runtime.executiongraph.=
Execution.deploy(Execution.java:599)      - Deploying Source: Soc=
ket Stream -&gt; Flat Map -&gt; Map (1/1) (attempt #0) to localho=
st=0A</code></pre></li><li><p>=B9=B9=BD=A8TaskDeploymentDescripto=
r=B6=D4=CF=F3=A3=AC=B8=C3=B6=D4=CF=F3=D2=FD=D3=C3Task=CA=B5=C0=FD=
Execution=B5=C4id,slot(=B2=DB=CE=BB),=BE=CD=BF=C9=D2=D4=C8=B7=B6=A8=
Execution=D4=DA=C4=C4=B8=F6slot=C9=CF=D4=CB=D0=D0</p><pre style=3D=
"font-size: 0.85rem; background-color: rgb(246, 248, 250);"><code=
>final TaskDeploymentDescriptor deployment =3D vertex.createDeplo=
ymentDescriptor(=0A			attemptId,=0A			slot,=0A			taskRestore,=0A=09=
		attemptNumber);=0A</code></pre></li><li><p>slot=B5=C3=B5=BDTask=
Manager</p><pre style=3D"font-size: 0.85rem; background-color: rg=
b(246, 248, 250);"><code>final TaskManagerGateway taskManagerGate=
way =3D slot.getTaskManagerGateway();=0A</code></pre></li><li><p>=
TaskManager.submitTask =CC=E1=BD=BB=C8=CE=CE=F1=A3=AC=B2=CE=CA=FD=
=CE=AATaskDeploymentDescriptor</p><pre style=3D"font-size: 0.85re=
m; background-color: rgb(246, 248, 250);"><code>final Completable=
Future&lt;Acknowledge&gt; submitResultFuture =3D taskManagerGatew=
ay.submitTask(deployment, rpcTimeout);=0A</code></pre></li><li><p=
>=BD=D3=CF=C2=C0=B4=BE=CD=BD=BB=B8=F8TaskManager=C8=A5=B4=A6=C0=ED=
=C1=CB</p></li><li><p>=D4=B4=C2=EB</p></li></ul><pre style=3D"fon=
t-size: 0.85rem; color: rgb(36, 41, 46); background-color: rgb(24=
6, 248, 250);"><code>/**=0A	 * Deploys the execution to the previ=
ously assigned resource.=0A	 *=0A	 * @throws JobException if the=20=
execution cannot be deployed to the assigned resource=0A	 */=0A	p=
ublic void deploy() throws JobException {=0A		final LogicalSlot s=
lot  =3D assignedResource;=0A=0A		checkNotNull(slot, "In order to=
 deploy the execution we first have to assign a resource via tryA=
ssignResource.");=0A=0A		// Check if the TaskManager died in the=20=
meantime=0A		// This only speeds up the response to TaskManagers=20=
failing concurrently to deployments.=0A		// The more general chec=
k is the rpcTimeout of the deployment call=0A		if (!slot.isAlive(=
)) {=0A			throw new JobException("Target slot (TaskManager) for d=
eployment is no longer alive.");=0A		}=0A=0A		// make sure exactl=
y one deployment call happens from the correct state=0A		// note:=
 the transition from CREATED to DEPLOYING is for testing purposes=
 only=0A		ExecutionState previous =3D this.state;=0A		if (previou=
s =3D=3D SCHEDULED || previous =3D=3D CREATED) {=0A			if (!transi=
tionState(previous, DEPLOYING)) {=0A				// race condition, someon=
e else beat us to the deploying call.=0A				// this should actual=
ly not happen and indicates a race somewhere else=0A				throw new=
 IllegalStateException("Cannot deploy task: Concurrent deployment=
 call race.");=0A			}=0A		}=0A		else {=0A			// vertex may have be=
en cancelled, or it was already scheduled=0A			throw new IllegalS=
tateException("The vertex must be in CREATED or SCHEDULED state t=
o be deployed. Found state " + previous);=0A		}=0A=0A		if (this !=
=3D slot.getPayload()) {=0A			throw new IllegalStateException(=0A=
				String.format("The execution %s has not been assigned to the=20=
assigned slot.", this));=0A		}=0A=0A		try {=0A=0A			// race doubl=
e check, did we fail/cancel and do we need to release the slot?=0A=
			if (this.state !=3D DEPLOYING) {=0A				slot.releaseSlot(new Fl=
inkException("Actual state of execution " + this + " (" + state +=
 ") does not match expected state DEPLOYING."));=0A				return;=0A=
			}=0A=0A			if (LOG.isInfoEnabled()) {=0A				LOG.info(String.for=
mat("Deploying %s (attempt #%d) to %s", vertex.getTaskNameWithSub=
taskIndex(),=0A						attemptNumber, getAssignedResourceLocation()=
.getHostname()));=0A			}=0A=0A			final TaskDeploymentDescriptor d=
eployment =3D vertex.createDeploymentDescriptor(=0A				attemptId,=
=0A				slot,=0A				taskRestore,=0A				attemptNumber);=0A=0A			//=20=
null taskRestore to let it be GC'ed=0A			taskRestore =3D null;=0A=
=0A			final TaskManagerGateway taskManagerGateway =3D slot.getTas=
kManagerGateway();=0A=0A			final CompletableFuture&lt;Acknowledge=
&gt; submitResultFuture =3D taskManagerGateway.submitTask(deploym=
ent, rpcTimeout);=0A=0A			submitResultFuture.whenCompleteAsync(=0A=
				(ack, failure) -&gt; {=0A					// only respond to the failure=20=
case=0A					if (failure !=3D null) {=0A						if (failure instance=
of TimeoutException) {=0A							String taskname =3D vertex.getTas=
kNameWithSubtaskIndex() + " (" + attemptId + ')';=0A=0A							mar=
kFailed(new Exception(=0A								"Cannot deploy task " + taskname=
 + " - TaskManager (" + getAssignedResourceLocation()=0A								=09=
+ ") not responding after a rpcTimeout of " + rpcTimeout, failure=
));=0A						} else {=0A							markFailed(failure);=0A						}=0A	=09=
			}=0A				},=0A				executor);=0A		}=0A		catch (Throwable t) {=0A=
			markFailed(t);=0A			ExceptionUtils.rethrow(t);=0A		}=0A	}=0A</=
code></pre><h3 style=3D"font-size: 1.25rem; color: rgb(36, 41, 46=
);">TaskExecutor.submitTask</h3><ul style=3D"color: rgb(36, 41, 4=
6);"><li><p>TaskManager=D6=D0=CA=C7=D3=C9TaskExecutor=C0=B4=CC=E1=
=BD=BB=C8=CE=CE=F1</p></li><li><p>=BD=AB=CD=E2=B2=BF=BB=AF=CA=FD=BE=
=DD=B4=D3BLOB=B4=E6=B4=A2=BC=D3=D4=D8=BB=D8=B6=D4=CF=F3</p><pre s=
tyle=3D"font-size: 0.85rem; background-color: rgb(246, 248, 250);=
"><code>// re-integrate offloaded data:=0A		try {=0A			tdd.loadBi=
gData(blobCacheService.getPermanentBlobService());=0A		} catch (I=
OException | ClassNotFoundException e) {=0A			throw new TaskSubmi=
ssionException("Could not re-integrate offloaded TaskDeploymentDe=
scriptor data.", e);=0A		}=0A</code></pre></li><li><p>=B4=D3=D0=F2=
=C1=D0=BB=AF=B5=C4=B6=D4=CF=F3=D6=D0=B7=B4=D0=F2=C1=D0=BB=AF(=CD=A8=
=B9=FD=C0=E0=BC=D3=D4=D8)=A3=ACJobInformation=A3=ACTaskInformatio=
n=A3=AC=D3=C3=C0=B4=B9=B9=BD=A8TaskInformation,Task</p><pre style=
=3D"font-size: 0.85rem; background-color: rgb(246, 248, 250);"><c=
ode>	// deserialize the pre-serialized information=0A		final JobI=
nformation jobInformation;=0A		final TaskInformation taskInformat=
ion;=0A		try {=0A			jobInformation =3D tdd.getSerializedJobInform=
ation().deserializeValue(getClass().getClassLoader());=0A			taskI=
nformation =3D tdd.getSerializedTaskInformation().deserializeValu=
e(getClass().getClassLoader());=0A		} catch (IOException | ClassN=
otFoundException e) {=0A			throw new TaskSubmissionException("Cou=
ld not deserialize the job or task information.", e);=0A		}=0A</c=
ode></pre></li><li><p>=D6=B8=B6=A8Source=D6=D0=B5=C4=B2=F0=B7=D6=C6=
=F7=A3=AC=BE=CD=CA=C7=BD=AB=B2=BB=B6=CF=B2=FA=C9=FA=CA=FD=BE=DD=B5=
=C4Source=B2=F0=B7=D6=B8=F8=B2=BB=CD=AC=B5=C4Window=D7=F6=B2=A2=D0=
=D0=C8=CE=CE=F1(RpcInputSplitProvider=CA=C7=C6=E4=D6=D0=B5=C4=D2=BB=
=D6=D6=B7=D6=C5=E4=B7=BD=CA=BD)</p><pre style=3D"font-size: 0.85r=
em; background-color: rgb(246, 248, 250);"><code>InputSplitProvid=
er inputSplitProvider =3D new RpcInputSplitProvider(=0A			jobMana=
gerConnection.getJobManagerGateway(),=0A			taskInformation.getJob=
VertexId(),=0A			tdd.getExecutionAttemptId(),=0A			taskManagerCon=
figuration.getTimeout());=0A</code></pre></li><li><p>=B9=B9=BD=A8=
=C8=CE=CE=F1=D7=B4=CC=AC=B9=DC=C0=ED=C6=F7TaskStateManager</p><pr=
e style=3D"font-size: 0.85rem; background-color: rgb(246, 248, 25=
0);"><code>final TaskStateManager taskStateManager =3D new TaskSt=
ateManagerImpl(=0A			jobId,=0A			tdd.getExecutionAttemptId(),=0A=09=
		localStateStore,=0A			taskRestore,=0A			checkpointResponder);=0A=
</code></pre></li><li><p>=B9=B9=BD=A8=C8=CE=CE=F1Task</p><pre sty=
le=3D"font-size: 0.85rem; background-color: rgb(246, 248, 250);">=
<code>Task task =3D new Task(=0A			jobInformation,=0A			taskInfor=
mation,=0A			tdd.getExecutionAttemptId(),=0A			tdd.getAllocationI=
d(),=0A			tdd.getSubtaskIndex(),=0A			tdd.getAttemptNumber(),=0A=09=
		tdd.getProducedPartitions(),=0A			tdd.getInputGates(),=0A			tdd=
.getTargetSlotNumber(),=0A			taskExecutorServices.getMemoryManage=
r(),=0A			taskExecutorServices.getIOManager(),=0A			taskExecutorS=
ervices.getNetworkEnvironment(),=0A			taskExecutorServices.getBro=
adcastVariableManager(),=0A			taskStateManager,=0A			taskManagerA=
ctions,=0A			inputSplitProvider,=0A			checkpointResponder,=0A			b=
lobCacheService,=0A			libraryCache,=0A			fileCache,=0A			taskMana=
gerConfiguration,=0A			taskMetricGroup,=0A			resultPartitionConsu=
mableNotifier,=0A			partitionStateChecker,=0A			getRpcService().g=
etExecutor());=0A</code></pre></li><li><p>=BD=AB=C8=CE=CE=F1=D4=F6=
=BC=D3=B5=BD=C8=CE=CE=F1=B2=DB=CE=BB=D6=D0</p><pre style=3D"font-=
size: 0.85rem; background-color: rgb(246, 248, 250);"><code>			tr=
y {=0A			taskAdded =3D taskSlotTable.addTask(task);=0A		} catch (=
SlotNotFoundException | SlotNotActiveException e) {=0A			throw ne=
w TaskSubmissionException("Could not submit task.", e);=0A		}=0A<=
/code></pre></li><li><p>=B5=F7=D3=C3=C8=CE=CE=F1=B5=C4=C6=F4=B6=AF=
=CF=DF=B3=CC=A3=AC=B8=C3=B7=BD=B7=A8=BB=E1=B4=A5=B7=A2=B5=F7=D3=C3=
Task.run()=BA=AF=CA=FD=A3=AC</p><pre style=3D"font-size: 0.85rem;=
 background-color: rgb(246, 248, 250);"><code>		if (taskAdded) {=0A=
			task.startTaskThread();=0A=0A			return CompletableFuture.compl=
etedFuture(Acknowledge.get());=0A		} else {=0A			final String mes=
sage =3D "TaskManager already contains a task for id " +=0A				ta=
sk.getExecutionId() + '.';=0A=0A			log.debug(message);=0A			throw=
 new TaskSubmissionException(message);=0A		}=0A</code></pre></li>=
<li><p>=D4=B4=C2=EB</p></li></ul><pre style=3D"font-size: 0.85rem=
; color: rgb(36, 41, 46); background-color: rgb(246, 248, 250);">=
<code>@Override=0A	public CompletableFuture&lt;Acknowledge&gt; su=
bmitTask(=0A			TaskDeploymentDescriptor tdd,=0A			JobMasterId job=
MasterId,=0A			Time timeout) {=0A=0A		try {=0A			final JobID jobI=
d =3D tdd.getJobId();=0A			final JobManagerConnection jobManagerC=
onnection =3D jobManagerTable.get(jobId);=0A=0A			if (jobManagerC=
onnection =3D=3D null) {=0A				final String message =3D "Could no=
t submit task because there is no JobManager " +=0A					"associat=
ed for the job " + jobId + '.';=0A=0A				log.debug(message);=0A	=09=
		throw new TaskSubmissionException(message);=0A			}=0A=0A			if (=
!Objects.equals(jobManagerConnection.getJobMasterId(), jobMasterI=
d)) {=0A				final String message =3D "Rejecting the task submissi=
on because the job manager leader id " +=0A					jobMasterId + " d=
oes not match the expected job manager leader id " +=0A					jobMa=
nagerConnection.getJobMasterId() + '.';=0A=0A				log.debug(messag=
e);=0A				throw new TaskSubmissionException(message);=0A			}=0A=0A=
			if (!taskSlotTable.tryMarkSlotActive(jobId, tdd.getAllocationI=
d())) {=0A				final String message =3D "No task slot allocated fo=
r job ID " + jobId +=0A					" and allocation ID " + tdd.getAlloca=
tionId() + '.';=0A				log.debug(message);=0A				throw new TaskSub=
missionException(message);=0A			}=0A=0A			// re-integrate offload=
ed data:=0A			try {=0A				tdd.loadBigData(blobCacheService.getPer=
manentBlobService());=0A			} catch (IOException | ClassNotFoundEx=
ception e) {=0A				throw new TaskSubmissionException("Could not r=
e-integrate offloaded TaskDeploymentDescriptor data.", e);=0A			}=
=0A=0A			// deserialize the pre-serialized information=0A			final=
 JobInformation jobInformation;=0A			final TaskInformation taskIn=
formation;=0A			try {=0A				jobInformation =3D tdd.getSerializedJ=
obInformation().deserializeValue(getClass().getClassLoader());=0A=
				taskInformation =3D tdd.getSerializedTaskInformation().deseri=
alizeValue(getClass().getClassLoader());=0A			} catch (IOExceptio=
n | ClassNotFoundException e) {=0A				throw new TaskSubmissionExc=
eption("Could not deserialize the job or task information.", e);=0A=
			}=0A=0A			if (!jobId.equals(jobInformation.getJobId())) {=0A	=09=
		throw new TaskSubmissionException(=0A					"Inconsistent job ID=20=
information inside TaskDeploymentDescriptor (" +=0A						tdd.getJ=
obId() + " vs. " + jobInformation.getJobId() + ")");=0A			}=0A=0A=
			TaskMetricGroup taskMetricGroup =3D taskManagerMetricGroup.add=
TaskForJob(=0A				jobInformation.getJobId(),=0A				jobInformation=
.getJobName(),=0A				taskInformation.getJobVertexId(),=0A				tdd.=
getExecutionAttemptId(),=0A				taskInformation.getTaskName(),=0A=09=
			tdd.getSubtaskIndex(),=0A				tdd.getAttemptNumber());=0A=0A		=09=
InputSplitProvider inputSplitProvider =3D new RpcInputSplitProvid=
er(=0A				jobManagerConnection.getJobManagerGateway(),=0A				task=
Information.getJobVertexId(),=0A				tdd.getExecutionAttemptId(),=0A=
				taskManagerConfiguration.getTimeout());=0A=0A			TaskManagerAc=
tions taskManagerActions =3D jobManagerConnection.getTaskManagerA=
ctions();=0A			CheckpointResponder checkpointResponder =3D jobMan=
agerConnection.getCheckpointResponder();=0A=0A			LibraryCacheMana=
ger libraryCache =3D jobManagerConnection.getLibraryCacheManager(=
);=0A			ResultPartitionConsumableNotifier resultPartitionConsumab=
leNotifier =3D jobManagerConnection.getResultPartitionConsumableN=
otifier();=0A			PartitionProducerStateChecker partitionStateCheck=
er =3D jobManagerConnection.getPartitionStateChecker();=0A=0A			f=
inal TaskLocalStateStore localStateStore =3D localStateStoresMana=
ger.localStateStoreForSubtask(=0A				jobId,=0A				tdd.getAllocati=
onId(),=0A				taskInformation.getJobVertexId(),=0A				tdd.getSubt=
askIndex());=0A=0A			final JobManagerTaskRestore taskRestore =3D=20=
tdd.getTaskRestore();=0A=0A			final TaskStateManager taskStateMan=
ager =3D new TaskStateManagerImpl(=0A				jobId,=0A				tdd.getExec=
utionAttemptId(),=0A				localStateStore,=0A				taskRestore,=0A		=09=
	checkpointResponder);=0A=0A			Task task =3D new Task(=0A				jobI=
nformation,=0A				taskInformation,=0A				tdd.getExecutionAttemptI=
d(),=0A				tdd.getAllocationId(),=0A				tdd.getSubtaskIndex(),=0A=
				tdd.getAttemptNumber(),=0A				tdd.getProducedPartitions(),=0A=
				tdd.getInputGates(),=0A				tdd.getTargetSlotNumber(),=0A				t=
askExecutorServices.getMemoryManager(),=0A				taskExecutorService=
s.getIOManager(),=0A				taskExecutorServices.getNetworkEnvironmen=
t(),=0A				taskExecutorServices.getBroadcastVariableManager(),=0A=
				taskStateManager,=0A				taskManagerActions,=0A				inputSplitP=
rovider,=0A				checkpointResponder,=0A				blobCacheService,=0A		=09=
	libraryCache,=0A				fileCache,=0A				taskManagerConfiguration,=0A=
				taskMetricGroup,=0A				resultPartitionConsumableNotifier,=0A=09=
			partitionStateChecker,=0A				getRpcService().getExecutor());=0A=
=0A			log.info("Received task {}.", task.getTaskInfo().getTaskNam=
eWithSubtasks());=0A=0A			boolean taskAdded;=0A=0A			try {=0A			=09=
taskAdded =3D taskSlotTable.addTask(task);=0A			} catch (SlotNotF=
oundException | SlotNotActiveException e) {=0A				throw new TaskS=
ubmissionException("Could not submit task.", e);=0A			}=0A=0A			i=
f (taskAdded) {=0A				task.startTaskThread();=0A=0A				return Com=
pletableFuture.completedFuture(Acknowledge.get());=0A			} else {=0A=
				final String message =3D "TaskManager already contains a task=
 for id " +=0A					task.getExecutionId() + '.';=0A=0A				log.debu=
g(message);=0A				throw new TaskSubmissionException(message);=0A=09=
		}=0A		} catch (TaskSubmissionException e) {=0A			return FutureU=
tils.completedExceptionally(e);=0A		}=0A	}=0A=0A</code></pre><h3=20=
style=3D"font-size: 1.25rem; color: rgb(36, 41, 46);">Task.run()<=
/h3><ul style=3D"color: rgb(36, 41, 46);"><li><p>=CF=C8=C0=B4=C1=CB=
=BD=E2=D2=BB=CF=C2=C8=CE=CE=F1=B5=C4=B8=C5=C4=EE,Task=B1=ED=CA=BE=
=D4=DATaskManager=C9=CF=D6=B4=D0=D0=B2=A2=D0=D0=D7=D3=C8=CE=CE=F1=
=A1=A3 Task=B0=FC=D7=B0Flink=B2=D9=D7=F7=B7=FB=A3=A8=BF=C9=D2=D4=CA=
=C7=D3=C3=BB=A7=BA=AF=CA=FD=A3=A9=B2=A2=D4=CB=D0=D0=CB=FC=A3=AC=CC=
=E1=B9=A9=CB=F9=D3=D0=B1=D8=D0=E8=B5=C4=B7=FE=CE=F1=A3=AC=C0=FD=C8=
=E7=CA=B9=D3=C3=CA=E4=C8=EB=CA=FD=BE=DD=A3=AC=C9=FA=B3=C9=BD=E1=B9=
=FB=A3=A8=D6=D0=BC=E4=BD=E1=B9=FB=B7=D6=C7=F8=A3=A9=B2=A2=D3=EBJo=
bManager=CD=A8=D0=C5=A1=A3 Flink=D4=CB=CB=E3=B7=FB=A3=A8=D7=F7=CE=
=AAAbstractInvokable=B5=C4=D7=D3=C0=E0=CA=B5=CF=D6=A3=AC=D6=BB=D3=
=D0=CA=FD=BE=DD=B6=C1=C8=A1=C6=F7=A3=AC=D0=B4=C8=EB=B3=CC=D0=F2=BA=
=CD=C4=B3=D0=A9=CA=C2=BC=FE=BB=D8=B5=F7=A1=A3=B8=C3=C8=CE=CE=F1=BD=
=AB=D5=E2=D0=A9=B2=D9=D7=F7=C1=AC=BD=D3=B5=BD=CD=F8=C2=E7=B6=D1=D5=
=BB=BA=CDactor=CF=FB=CF=A2=A3=AC=B2=A2=B8=FA=D7=D9=D6=B4=D0=D0=D7=
=B4=CC=AC=B2=A2=B4=A6=C0=ED=D2=EC=B3=A3=A1=A3 =C8=CE=CE=F1=B2=BB=D6=
=AA=B5=C0=CB=FC=C3=C7=D3=EB=C6=E4=CB=FB=C8=CE=CE=F1=B5=C4=B9=D8=CF=
=B5=A3=AC=BB=F2=D5=DF=CB=FC=C3=C7=CA=C7=B5=DA=D2=BB=B4=CE=D6=B4=D0=
=D0=C8=CE=CE=F1=BB=B9=CA=C7=D6=D8=B8=B4=B3=A2=CA=D4=A1=A3 =CB=F9=D3=
=D0=D5=E2=D0=A9=D6=BB=D3=D0JobManager=D6=AA=B5=C0=A1=A3 =CB=F9=D3=
=D0=C8=CE=CE=F1=B6=BC=D6=AA=B5=C0=CB=FC=D7=D4=BC=BA=B5=C4=BF=C9=D4=
=CB=D0=D0=B4=FA=C2=EB=A3=AC=C8=CE=CE=F1=B5=C4=C5=E4=D6=C3=D2=D4=BC=
=B0=D2=AA=CA=B9=D3=C3=BA=CD=C9=FA=B3=C9=B5=C4=D6=D0=BC=E4=BD=E1=B9=
=FB=B5=C4ID=A3=A8=C8=E7=B9=FB=D3=D0=B5=C4=BB=B0=A3=A9=A1=A3 =C3=BF=
=B8=F6=C8=CE=CE=F1=D3=C9=D2=BB=B8=F6=D7=A8=D3=C3=CF=DF=B3=CC=D4=CB=
=D0=D0=A1=A3</p></li><li><p>run()=CA=C7=D2=FD=B5=BC=C8=CE=CE=F1=B2=
=A2=D6=B4=D0=D0=C6=E4=B4=FA=C2=EB=B5=C4=BA=CB=D0=C4=B9=A4=D7=F7=B7=
=BD=B7=A8</p></li><li><p>=D5=E2=C0=EF=CA=C7Task=B5=C4=D6=B4=D0=D0=
=D7=B4=CC=AC=A3=AC=C7=B0=C3=E6=CA=C7Executition=B5=C4=D6=B4=D0=D0=
=D7=B4=CC=AC=A3=AC=D0=E8=D2=AA=C7=F8=B7=D6=BF=AA=C0=B4,=B8=FC=D0=C2=
=C8=CE=CE=F1=D7=B4=CC=AC=A3=AC=D3=C9CREATED(=D2=D1=B4=B4=BD=A8)=B5=
=BDDEPLOYING(=B2=BF=CA=F0=D6=D0)</p><pre style=3D"font-size: 0.85=
rem; background-color: rgb(246, 248, 250);"><code>// ------------=
----------------=0A	//  Initial State transition=0A	// ----------=
------------------=0A	while (true) {=0A		ExecutionState current =3D=
 this.executionState;=0A		if (current =3D=3D ExecutionState.CREAT=
ED) {=0A			if (transitionState(ExecutionState.CREATED, ExecutionS=
tate.DEPLOYING)) {=0A				// success, we can start our work=0A			=09=
break;=0A			}=0A		}=0A		=0A</code></pre></li><li><p>=B4=B4=BD=A8=CE=
=C4=BC=FE=CF=B5=CD=B3=C1=F7=CE=AA=D5=E2=B8=F6=C8=CE=CE=F1</p><pre=
 style=3D"font-size: 0.85rem; background-color: rgb(246, 248, 250=
);"><code>// activate safety net for task thread=0A		LOG.info("Cr=
eating FileSystem stream leak safety net for task {}", this);=0A=09=
	FileSystemSafetyNet.initializeSafetyNetForThread();=0A</code></p=
re></li><li><p>=BC=D3=D4=D8=D3=C3=BB=A7=B3=CC=D0=F2jar=CE=C4=BC=FE=
=A3=AC=B8=F8=B5=B1=C7=B0Task=CA=B9=D3=C3</p><pre style=3D"font-si=
ze: 0.85rem; background-color: rgb(246, 248, 250);"><code>// firs=
t of all, get a user-code classloader=0A		// this may involve dow=
nloading the job's JAR files and/or classes=0A		LOG.info("Loading=
 JAR files for task {}.", this);=0A=0A		userCodeClassLoader =3D c=
reateUserCodeClassloader();=0A		final ExecutionConfig executionCo=
nfig =3D serializedExecutionConfig.deserializeValue(userCodeClass=
Loader);=0A</code></pre></li><li><p>=D7=A2=B2=E1=CD=F8=C2=E7=D7=B7=
=D7=D9=B8=F8=D5=E2=B5=B1=C7=B0=C8=CE=CE=F1</p><pre style=3D"font-=
size: 0.85rem; background-color: rgb(246, 248, 250);"><code>// --=
--------------------------------------------------------------=0A=
		// register the task with the network stack=0A		// this operati=
on may fail if the system does not have enough=0A		// memory to r=
un the necessary data exchanges=0A		// the registration must also=
 strictly be undone=0A		// --------------------------------------=
--------------------------=0A=0A		LOG.info("Registering task at n=
etwork: {}.", this);=0A=0A		network.registerTask(this);=0A=0A</co=
de></pre></li><li><p>=B8=F8=B5=B1=C7=B0=C8=CE=CE=F1=B9=B9=BD=A8=D4=
=CB=D0=D0=BB=B7=BE=B3</p><pre style=3D"font-size: 0.85rem; backgr=
ound-color: rgb(246, 248, 250);"><code>Environment env =3D new Ru=
ntimeEnvironment(=0A			jobId,=0A			vertexId,=0A			executionId,=0A=
			executionConfig,=0A			taskInfo,=0A			jobConfiguration,=0A			ta=
skConfiguration,=0A			userCodeClassLoader,=0A			memoryManager,=0A=
			ioManager,=0A			broadcastVariableManager,=0A			taskStateManage=
r,=0A			accumulatorRegistry,=0A			kvStateRegistry,=0A			inputSpli=
tProvider,=0A			distributedCacheEntries,=0A			producedPartitions,=
=0A			inputGates,=0A			network.getTaskEventDispatcher(),=0A			che=
ckpointResponder,=0A			taskManagerConfig,=0A			metrics,=0A			this=
);=0A</code></pre></li><li><p>=BC=D3=D4=D8=B2=A2=CA=B5=C0=FD=BB=AF=
=C8=CE=CE=F1=B5=C4=BF=C9=B5=F7=D3=C3=B4=FA=C2=EB(=D3=C3=BB=A7=B4=FA=
=C2=EB)</p><pre style=3D"font-size: 0.85rem; background-color: rg=
b(246, 248, 250);"><code>// now load and instantiate the task's i=
nvokable code=0A		invokable =3D loadAndInstantiateInvokable(userC=
odeClassLoader, nameOfInvokableClass, env);=0A</code></pre></li><=
li><p>=B8=FC=D0=C2=B5=B1=C7=B0=C8=CE=CE=F1=D7=B4=CC=AC,=B4=D3DEPL=
OYING(=B2=BF=CA=F0=D6=D0)=B8=FC=D0=C2=CE=AARUNNING(=D4=CB=D0=D0=D6=
=D0)</p><pre style=3D"font-size: 0.85rem; background-color: rgb(2=
46, 248, 250);"><code>			// switch to the RUNNING state, if that=20=
fails, we have been canceled/failed in the meantime=0A		if (!tran=
sitionState(ExecutionState.DEPLOYING, ExecutionState.RUNNING)) {=0A=
			throw new CancelTaskException();=0A		}=0A=0A</code></pre></li>=
<li><p>StreamTask.invoke()</p><pre style=3D"font-size: 0.85rem; b=
ackground-color: rgb(246, 248, 250);"><code>	// run the invokable=
=0A		invokable.invoke();=0A</code></pre></li><li><p>=D4=B4=C2=EB<=
/p></li></ul><pre style=3D"font-size: 0.85rem; color: rgb(36, 41,=
 46); background-color: rgb(246, 248, 250);"><code>/**=0A	 * The=20=
core work method that bootstraps the task and executes its code.=0A=
	 */=0A	@Override=0A	public void run() {=0A=0A		// --------------=
--------------=0A		//  Initial State transition=0A		// ----------=
------------------=0A		while (true) {=0A			ExecutionState current=
 =3D this.executionState;=0A			if (current =3D=3D ExecutionState.=
CREATED) {=0A				if (transitionState(ExecutionState.CREATED, Exec=
utionState.DEPLOYING)) {=0A					// success, we can start our work=
=0A					break;=0A				}=0A			}=0A			else if (current =3D=3D Execut=
ionState.FAILED) {=0A				// we were immediately failed. tell the=20=
TaskManager that we reached our final state=0A				notifyFinalStat=
e();=0A				if (metrics !=3D null) {=0A					metrics.close();=0A		=09=
	}=0A				return;=0A			}=0A			else if (current =3D=3D ExecutionSta=
te.CANCELING) {=0A				if (transitionState(ExecutionState.CANCELIN=
G, ExecutionState.CANCELED)) {=0A					// we were immediately canc=
eled. tell the TaskManager that we reached our final state=0A			=09=
	notifyFinalState();=0A					if (metrics !=3D null) {=0A						metr=
ics.close();=0A					}=0A					return;=0A				}=0A			}=0A			else {=0A=
				if (metrics !=3D null) {=0A					metrics.close();=0A				}=0A	=09=
		throw new IllegalStateException("Invalid state for beginning of=
 operation of task " + this + '.');=0A			}=0A		}=0A=0A		// all re=
source acquisitions and registrations from here on=0A		// need to=
 be undone in the end=0A		Map&lt;String, Future&lt;Path&gt;&gt; d=
istributedCacheEntries =3D new HashMap&lt;&gt;();=0A		AbstractInv=
okable invokable =3D null;=0A=0A		try {=0A			// -----------------=
-----------=0A			//  Task Bootstrap - We periodically=0A			//  ch=
eck for canceling as a shortcut=0A			// -------------------------=
---=0A=0A			// activate safety net for task thread=0A			LOG.info(=
"Creating FileSystem stream leak safety net for task {}", this);=0A=
			FileSystemSafetyNet.initializeSafetyNetForThread();=0A=0A			bl=
obService.getPermanentBlobService().registerJob(jobId);=0A=0A			/=
/ first of all, get a user-code classloader=0A			// this may invo=
lve downloading the job's JAR files and/or classes=0A			LOG.info(=
"Loading JAR files for task {}.", this);=0A=0A			userCodeClassLoa=
der =3D createUserCodeClassloader();=0A			final ExecutionConfig e=
xecutionConfig =3D serializedExecutionConfig.deserializeValue(use=
rCodeClassLoader);=0A=0A			if (executionConfig.getTaskCancellatio=
nInterval() &gt;=3D 0) {=0A				// override task cancellation inte=
rval from Flink config if set in ExecutionConfig=0A				taskCancel=
lationInterval =3D executionConfig.getTaskCancellationInterval();=
=0A			}=0A=0A			if (executionConfig.getTaskCancellationTimeout()=20=
&gt;=3D 0) {=0A				// override task cancellation timeout from Fli=
nk config if set in ExecutionConfig=0A				taskCancellationTimeout=
 =3D executionConfig.getTaskCancellationTimeout();=0A			}=0A=0A	=09=
	if (isCanceledOrFailed()) {=0A				throw new CancelTaskException(=
);=0A			}=0A=0A			// --------------------------------------------=
--------------------=0A			// register the task with the network s=
tack=0A			// this operation may fail if the system does not have=20=
enough=0A			// memory to run the necessary data exchanges=0A			//=
 the registration must also strictly be undone=0A			// ----------=
------------------------------------------------------=0A=0A			LO=
G.info("Registering task at network: {}.", this);=0A=0A			network=
.registerTask(this);=0A=0A			// add metrics for buffers=0A			this=
.metrics.getIOMetricGroup().initializeBufferMetrics(this);=0A=0A=09=
		// register detailed network metrics, if configured=0A			if (ta=
skManagerConfig.getConfiguration().getBoolean(TaskManagerOptions.=
NETWORK_DETAILED_METRICS)) {=0A				// similar to MetricUtils.inst=
antiateNetworkMetrics() but inside this IOMetricGroup=0A				Metri=
cGroup networkGroup =3D this.metrics.getIOMetricGroup().addGroup(=
"Network");=0A				MetricGroup outputGroup =3D networkGroup.addGro=
up("Output");=0A				MetricGroup inputGroup =3D networkGroup.addGr=
oup("Input");=0A=0A				// output metrics=0A				for (int i =3D 0;=20=
i &lt; producedPartitions.length; i++) {=0A					ResultPartitionMe=
trics.registerQueueLengthMetrics(=0A						outputGroup.addGroup(i)=
, producedPartitions[i]);=0A				}=0A=0A				for (int i =3D 0; i &l=
t; inputGates.length; i++) {=0A					InputGateMetrics.registerQueu=
eLengthMetrics(=0A						inputGroup.addGroup(i), inputGates[i]);=0A=
				}=0A			}=0A=0A			// next, kick off the background copying of=20=
files for the distributed cache=0A			try {=0A				for (Map.Entry&l=
t;String, DistributedCache.DistributedCacheEntry&gt; entry :=0A	=09=
				DistributedCache.readFileInfoFromConfig(jobConfiguration)) {=0A=
					LOG.info("Obtaining local cache file for '{}'.", entry.getKe=
y());=0A					Future&lt;Path&gt; cp =3D fileCache.createTmpFile(en=
try.getKey(), entry.getValue(), jobId, executionId);=0A					distr=
ibutedCacheEntries.put(entry.getKey(), cp);=0A				}=0A			}=0A			c=
atch (Exception e) {=0A				throw new Exception(=0A					String.for=
mat("Exception while adding files to distributed cache of task %s=
 (%s).", taskNameWithSubtask, executionId), e);=0A			}=0A=0A			if=
 (isCanceledOrFailed()) {=0A				throw new CancelTaskException();=0A=
			}=0A=0A			// -------------------------------------------------=
---------------=0A			//  call the user code initialization method=
s=0A			// -------------------------------------------------------=
---------=0A=0A			TaskKvStateRegistry kvStateRegistry =3D network=
.createKvStateTaskRegistry(jobId, getJobVertexId());=0A=0A			Envi=
ronment env =3D new RuntimeEnvironment(=0A				jobId,=0A				vertex=
Id,=0A				executionId,=0A				executionConfig,=0A				taskInfo,=0A=09=
			jobConfiguration,=0A				taskConfiguration,=0A				userCodeClass=
Loader,=0A				memoryManager,=0A				ioManager,=0A				broadcastVari=
ableManager,=0A				taskStateManager,=0A				accumulatorRegistry,=0A=
				kvStateRegistry,=0A				inputSplitProvider,=0A				distributedC=
acheEntries,=0A				producedPartitions,=0A				inputGates,=0A				ne=
twork.getTaskEventDispatcher(),=0A				checkpointResponder,=0A			=09=
taskManagerConfig,=0A				metrics,=0A				this);=0A=0A			// now loa=
d and instantiate the task's invokable code=0A			invokable =3D lo=
adAndInstantiateInvokable(userCodeClassLoader, nameOfInvokableCla=
ss, env);=0A=0A			// --------------------------------------------=
--------------------=0A			//  actual task core work=0A			// -----=
-----------------------------------------------------------=0A=0A=
			// we must make strictly sure that the invokable is accessible=
 to the cancel() call=0A			// by the time we switched to running.=
=0A			this.invokable =3D invokable;=0A=0A			// switch to the RUNN=
ING state, if that fails, we have been canceled/failed in the mea=
ntime=0A			if (!transitionState(ExecutionState.DEPLOYING, Executi=
onState.RUNNING)) {=0A				throw new CancelTaskException();=0A			}=
=0A=0A			// notify everyone that we switched to running=0A			task=
ManagerActions.updateTaskExecutionState(new TaskExecutionState(jo=
bId, executionId, ExecutionState.RUNNING));=0A=0A			// make sure=20=
the user code classloader is accessible thread-locally=0A			execu=
tingThread.setContextClassLoader(userCodeClassLoader);=0A=0A			//=
 run the invokable=0A			invokable.invoke();=0A=0A			// make sure,=
 we enter the catch block if the task leaves the invoke() method=20=
due=0A			// to the fact that it has been canceled=0A			if (isCanc=
eledOrFailed()) {=0A				throw new CancelTaskException();=0A			}=0A=
=0A			// --------------------------------------------------------=
--------=0A			//  finalization of a successful execution=0A			//=20=
----------------------------------------------------------------=0A=
=0A			// finish the produced partitions. if this fails, we consid=
er the execution failed.=0A			for (ResultPartition partition : pr=
oducedPartitions) {=0A				if (partition !=3D null) {=0A					parti=
tion.finish();=0A				}=0A			}=0A=0A			// try to mark the task as=20=
finished=0A			// if that fails, the task was canceled/failed in t=
he meantime=0A			if (!transitionState(ExecutionState.RUNNING, Exe=
cutionState.FINISHED)) {=0A				throw new CancelTaskException();=0A=
			}=0A		}=0A		catch (Throwable t) {=0A=0A			// unwrap wrapped ex=
ceptions to make stack traces more compact=0A			if (t instanceof=20=
WrappingRuntimeException) {=0A				t =3D ((WrappingRuntimeExceptio=
n) t).unwrap();=0A			}=0A=0A			// -------------------------------=
---------------------------------=0A			// the execution failed. e=
ither the invokable code properly failed, or=0A			// an exception=
 was thrown as a side effect of cancelling=0A			// --------------=
--------------------------------------------------=0A=0A			try {=0A=
				// check if the exception is unrecoverable=0A				if (Exceptio=
nUtils.isJvmFatalError(t) ||=0A						(t instanceof OutOfMemoryErr=
or &amp;&amp; taskManagerConfig.shouldExitJvmOnOutOfMemoryError()=
)) {=0A=0A					// terminate the JVM immediately=0A					// don't a=
ttempt a clean shutdown, because we cannot expect the clean shutd=
own to complete=0A					try {=0A						LOG.error("Encountered fatal=
 error {} - terminating the JVM", t.getClass().getName(), t);=0A=09=
				} finally {=0A						Runtime.getRuntime().halt(-1);=0A					}=0A=
				}=0A=0A				// transition into our final state. we should be e=
ither in DEPLOYING, RUNNING, CANCELING, or FAILED=0A				// loop f=
or multiple retries during concurrent state changes via calls to=20=
cancel() or=0A				// to failExternally()=0A				while (true) {=0A=09=
				ExecutionState current =3D this.executionState;=0A=0A					if=20=
(current =3D=3D ExecutionState.RUNNING || current =3D=3D Executio=
nState.DEPLOYING) {=0A						if (t instanceof CancelTaskException)=
 {=0A							if (transitionState(current, ExecutionState.CANCELED)=
) {=0A								cancelInvokable(invokable);=0A								break;=0A			=09=
			}=0A						}=0A						else {=0A							if (transitionState(curren=
t, ExecutionState.FAILED, t)) {=0A								// proper failure of th=
e task. record the exception as the root cause=0A								failureC=
ause =3D t;=0A								cancelInvokable(invokable);=0A=0A								br=
eak;=0A							}=0A						}=0A					}=0A					else if (current =3D=3D=
 ExecutionState.CANCELING) {=0A						if (transitionState(current,=
 ExecutionState.CANCELED)) {=0A							break;=0A						}=0A					}=0A=
					else if (current =3D=3D ExecutionState.FAILED) {=0A						//=20=
in state failed already, no transition necessary any more=0A				=09=
	break;=0A					}=0A					// unexpected state, go to failed=0A				=09=
else if (transitionState(current, ExecutionState.FAILED, t)) {=0A=
						LOG.error("Unexpected state in task {} ({}) during an excep=
tion: {}.", taskNameWithSubtask, executionId, current);=0A						b=
reak;=0A					}=0A					// else fall through the loop and=0A				}=0A=
			}=0A			catch (Throwable tt) {=0A				String message =3D String.=
format("FATAL - exception in exception handler of task %s (%s).",=
 taskNameWithSubtask, executionId);=0A				LOG.error(message, tt);=
=0A				notifyFatalError(message, tt);=0A			}=0A		}=0A		finally {=0A=
			try {=0A				LOG.info("Freeing task resources for {} ({}).", ta=
skNameWithSubtask, executionId);=0A=0A				// clear the reference=20=
to the invokable. this helps guard against holding references=0A=09=
			// to the invokable and its structures in cases where this Tas=
k object is still referenced=0A				this.invokable =3D null;=0A=0A=
				// stop the async dispatcher.=0A				// copy dispatcher refere=
nce to stack, against concurrent release=0A				ExecutorService di=
spatcher =3D this.asyncCallDispatcher;=0A				if (dispatcher !=3D=20=
null &amp;&amp; !dispatcher.isShutdown()) {=0A					dispatcher.shu=
tdownNow();=0A				}=0A=0A				// free the network resources=0A			=09=
network.unregisterTask(this);=0A=0A				// free memory resources=0A=
				if (invokable !=3D null) {=0A					memoryManager.releaseAll(in=
vokable);=0A				}=0A=0A				// remove all of the tasks library res=
ources=0A				libraryCache.unregisterTask(jobId, executionId);=0A=09=
			fileCache.releaseJob(jobId, executionId);=0A				blobService.ge=
tPermanentBlobService().releaseJob(jobId);=0A=0A				// close and=20=
de-activate safety net for task thread=0A				LOG.info("Ensuring a=
ll FileSystem streams are closed for task {}", this);=0A				FileS=
ystemSafetyNet.closeSafetyNetAndGuardedResourcesForThread();=0A=0A=
				notifyFinalState();=0A			}=0A			catch (Throwable t) {=0A				/=
/ an error in the resource cleanup is fatal=0A				String message=20=
=3D String.format("FATAL - exception in resource cleanup of task=20=
%s (%s).", taskNameWithSubtask, executionId);=0A				LOG.error(mes=
sage, t);=0A				notifyFatalError(message, t);=0A			}=0A=0A			// u=
n-register the metrics at the end so that the task may already be=
=0A			// counted as finished when this happens=0A			// errors her=
e will only be logged=0A			try {=0A				metrics.close();=0A			}=0A=
			catch (Throwable t) {=0A				LOG.error("Error during metrics de=
-registration of task {} ({}).", taskNameWithSubtask, executionId=
, t);=0A			}=0A		}=0A	}=0A</code></pre><h3 style=3D"font-size: 1.=
25rem; color: rgb(36, 41, 46);">StreamTask.invoke()</h3><ul style=
=3D"color: rgb(36, 41, 46);"><li><p>=B4=B4=BD=A8=D2=BB=B8=F6=BA=F3=
=B6=CB=D7=B4=CC=AC=A3=ACstateBackend,=B4=CB=CA=B1=CE=AAMemoryStat=
eBackend</p><pre style=3D"font-size: 0.85rem; background-color: r=
gb(246, 248, 250);"><code>stateBackend =3D createStateBackend();=0A=
</code></pre></li><li><p>=C8=E7=B9=FB=C3=BB=D3=D0=B5=F7=D6=C3=CA=B1=
=BC=E4=B7=FE=CE=F1=A3=AC=BE=CD=B4=B4=BD=A8SystemProcessingTimeSer=
vice,=CB=FC=BD=AB=B5=B1=C7=B0=B4=A6=C0=ED=CA=B1=BC=E4=D6=B8=B6=A8=
=CE=AA=B5=F7=D3=C3=B5=C4=BD=E1=B9=FB(=CA=B1=BC=E4)</p><pre style=3D=
"font-size: 0.85rem; background-color: rgb(246, 248, 250);"><code=
>			// if the clock is not already set, then assign a default Tim=
eServiceProvider=0A		if (timerService =3D=3D null) {=0A			ThreadF=
actory timerThreadFactory =3D new DispatcherThreadFactory(TRIGGER=
_THREAD_GROUP,=0A				"Time Trigger for " + getName(), getUserCode=
ClassLoader());=0A=0A			timerService =3D new SystemProcessingTime=
Service(this, getCheckpointLock(), timerThreadFactory);=0A		}=0A<=
/code></pre></li><li><p>=B5=B1=C7=B0=C1=F7=C8=CE=CE=F1=B6=D4=D3=A6=
=B5=C4=B2=D9=D7=F7=C1=B4=CC=F5=A3=AC=B4=CB=B4=A6=B2=BB=CD=AC=B5=C4=
=C1=F7=C8=CE=CE=F1=B6=D4=D3=A6=B5=C4=B2=D9=D7=F7=C1=B4=CC=F5=B2=BB=
=D2=BB=D1=F9=A3=AC=CF=F1source=C1=F7=D6=D0=A3=AC=D3=C3=BB=A7=D7=D4=
=B6=A8=D2=E5=B5=C4=BA=AF=CA=FD=C1=B4=B2=BB=D2=BB=D1=F9=A3=AC=D5=E2=
=B8=F6operatorChain=D2=B2=B2=BB=D2=BB=D1=F9=A3=AC=D5=E2=C0=EF=D2=D4=
WordCount=CE=AA=C0=FD=CB=B5=C3=F7</p><pre style=3D"font-size: 0.8=
5rem; background-color: rgb(246, 248, 250);"><code>operatorChain=20=
=3D new OperatorChain&lt;&gt;(this, streamRecordWriters);=0A</cod=
e></pre></li><li><p>Source=C1=F7=D6=D0=B5=C4=B2=D9=D7=F7=C1=B4=CC=
=F5 operatorChain.allOperators</p></li><li><p>headOperator =3D op=
eratorChain.getHeadOperator()=CE=AAStreamSource</p><pre style=3D"=
font-size: 0.85rem; background-color: rgb(246, 248, 250);"><code>=
allOperators =3D {StreamOperator[3]@5784} =0A</code></pre></li></=
ul><p style=3D"color: rgb(36, 41, 46);">0 =3D {StreamMap@5793} 1=20=
=3D {StreamFlatMap@5794} 2 =3D {StreamSource@5789} ```</p><ul sty=
le=3D"color: rgb(36, 41, 46);"><li><p>=C8=CE=CE=F1=B3=F5=CA=B9=BB=
=AF</p><pre style=3D"font-size: 0.85rem; background-color: rgb(24=
6, 248, 250);"><code>// task specific initialization=0A		init();=0A=
</code></pre></li><li><p>=D4=DA=CB=F9=D3=D0=B5=C4operators=CA=C7o=
pened=D6=AE=C7=B0=CB=F9=D3=D0=B5=C4=B4=A5=B7=A2=C6=F7=B5=F7=B6=C8=
=B2=BB=C4=DC=B1=BB=D6=B4=D0=D0=A3=AC=BE=CD=CA=C7=D0=E8=D2=AA=CF=C8=
=B0=D1operator.open</p><pre style=3D"font-size: 0.85rem; backgrou=
nd-color: rgb(246, 248, 250);"><code>			// we need to make sure t=
hat any triggers scheduled in open() cannot be=0A		// executed be=
fore all operators are opened=0A		synchronized (lock) {=0A=0A			/=
/ both the following operations are protected by the lock=0A			//=
 so that we avoid race conditions in the case that initializeStat=
e()=0A			// registers a timer, that fires before the open() is ca=
lled.=0A=0A			initializeState();=0A			openAllOperators();=0A		}=0A=
</code></pre></li><li><p>=B5=F7=D3=C3=BE=DF=CC=E5=C8=CE=CE=F1=B5=C4=
run()=BA=AF=CA=FD=C8=A5=B4=A6=C0=ED=A3=AC=D5=E2=C0=EF=B7=D6=B2=BB=
=CD=AC=B5=C4=C0=E0=D0=CD</p><ul><li>Source =B5=F7=B5=C4=CA=C7Sour=
ceStreamTask.run()=BA=AF=CA=FD</li><li>Window =B5=F7=B5=C4=CA=C7O=
neInputStreamTask.run()=BA=AF=CA=FD</li></ul><pre style=3D"font-s=
ize: 0.85rem; background-color: rgb(246, 248, 250);"><code>	// le=
t the task do its work=0A		isRunning =3D true;=0A		run();=0A</cod=
e></pre></li><li><p>=D4=B4=C2=EB</p></li></ul><pre style=3D"font-=
size: 0.85rem; color: rgb(36, 41, 46); background-color: rgb(246,=
 248, 250);"><code>public final void invoke() throws Exception {=0A=
=0A		boolean disposed =3D false;=0A		try {=0A			// -------- Initi=
alize ---------=0A			LOG.debug("Initializing {}.", getName());=0A=
=0A			asyncOperationsThreadPool =3D Executors.newCachedThreadPool=
();=0A=0A			CheckpointExceptionHandlerFactory cpExceptionHandlerF=
actory =3D createCheckpointExceptionHandlerFactory();=0A=0A			syn=
chronousCheckpointExceptionHandler =3D cpExceptionHandlerFactory.=
createCheckpointExceptionHandler(=0A				getExecutionConfig().isFa=
ilTaskOnCheckpointError(),=0A				getEnvironment());=0A=0A			async=
hronousCheckpointExceptionHandler =3D new AsyncCheckpointExceptio=
nHandler(this);=0A=0A			stateBackend =3D createStateBackend();=0A=
			checkpointStorage =3D stateBackend.createCheckpointStorage(get=
Environment().getJobID());=0A=0A			// if the clock is not already=
 set, then assign a default TimeServiceProvider=0A			if (timerSer=
vice =3D=3D null) {=0A				ThreadFactory timerThreadFactory =3D ne=
w DispatcherThreadFactory(TRIGGER_THREAD_GROUP,=0A					"Time Trig=
ger for " + getName(), getUserCodeClassLoader());=0A=0A				timerS=
ervice =3D new SystemProcessingTimeService(this, getCheckpointLoc=
k(), timerThreadFactory);=0A			}=0A=0A			operatorChain =3D new Op=
eratorChain&lt;&gt;(this, streamRecordWriters);=0A			headOperator=
 =3D operatorChain.getHeadOperator();=0A=0A			// task specific in=
itialization=0A			init();=0A=0A			// save the work of reloading s=
tate, etc, if the task is already canceled=0A			if (canceled) {=0A=
				throw new CancelTaskException();=0A			}=0A=0A			// -------- I=
nvoke --------=0A			LOG.debug("Invoking {}", getName());=0A=0A		=09=
// we need to make sure that any triggers scheduled in open() can=
not be=0A			// executed before all operators are opened=0A			sync=
hronized (lock) {=0A=0A				// both the following operations are p=
rotected by the lock=0A				// so that we avoid race conditions in=
 the case that initializeState()=0A				// registers a timer, that=
 fires before the open() is called.=0A=0A				initializeState();=0A=
				openAllOperators();=0A			}=0A=0A			// final check to exit ear=
ly before starting to run=0A			if (canceled) {=0A				throw new Ca=
ncelTaskException();=0A			}=0A=0A			// let the task do its work=0A=
			isRunning =3D true;=0A			run();=0A=0A			// if this left the ru=
n() method cleanly despite the fact that this was canceled,=0A		=09=
// make sure the "clean shutdown" is not attempted=0A			if (cance=
led) {=0A				throw new CancelTaskException();=0A			}=0A=0A			LOG.=
debug("Finished task {}", getName());=0A=0A			// make sure no fur=
ther checkpoint and notification actions happen.=0A			// we make=20=
sure that no other thread is currently in the locked scope before=
=0A			// we close the operators by trying to acquire the checkpoi=
nt scope lock=0A			// we also need to make sure that no triggers=20=
fire concurrently with the close logic=0A			// at the same time,=20=
this makes sure that during any "regular" exit where still=0A			s=
ynchronized (lock) {=0A				// this is part of the main logic, so=20=
if this fails, the task is considered failed=0A				closeAllOperat=
ors();=0A=0A				// make sure no new timers can come=0A				timerSe=
rvice.quiesce();=0A=0A				// only set the StreamTask to not runni=
ng after all operators have been closed!=0A				// See FLINK-7430=0A=
				isRunning =3D false;=0A			}=0A=0A			// make sure all timers f=
inish=0A			timerService.awaitPendingAfterQuiesce();=0A=0A			LOG.d=
ebug("Closed operators for task {}", getName());=0A=0A			// make=20=
sure all buffered data is flushed=0A			operatorChain.flushOutputs=
();=0A=0A			// make an attempt to dispose the operators such that=
 failures in the dispose call=0A			// still let the computation f=
ail=0A			tryDisposeAllOperators();=0A			disposed =3D true;=0A		}=0A=
		finally {=0A			// clean up everything we initialized=0A			isRun=
ning =3D false;=0A=0A			// Now that we are outside the user code,=
 we do not want to be interrupted further=0A			// upon cancellati=
on. The shutdown logic below needs to make sure it does not issue=
 calls=0A			// that block and stall shutdown.=0A			// Additionall=
y, the cancellation watch dog will issue a hard-cancel (kill the=20=
TaskManager=0A			// process) as a backup in case some shutdown pr=
ocedure blocks outside our control.=0A			setShouldInterruptOnCanc=
el(false);=0A=0A			// clear any previously issued interrupt for a=
 more graceful shutdown=0A			Thread.interrupted();=0A=0A			// sto=
p all timers and threads=0A			tryShutdownTimerService();=0A=0A		=09=
// stop all asynchronous checkpoint threads=0A			try {=0A				canc=
elables.close();=0A				shutdownAsyncThreads();=0A			}=0A			catch=20=
(Throwable t) {=0A				// catch and log the exception to not repla=
ce the original exception=0A				LOG.error("Could not shut down as=
ync checkpoint threads", t);=0A			}=0A=0A			// we must! perform t=
his cleanup=0A			try {=0A				cleanup();=0A			}=0A			catch (Throwa=
ble t) {=0A				// catch and log the exception to not replace the=20=
original exception=0A				LOG.error("Error during cleanup of strea=
m task", t);=0A			}=0A=0A			// if the operators were not disposed=
 before, do a hard dispose=0A			if (!disposed) {=0A				disposeAll=
Operators();=0A			}=0A=0A			// release the output resources. this=
 method should never fail.=0A			if (operatorChain !=3D null) {=0A=
				// beware: without synchronization, #performCheckpoint() may=20=
run in=0A				//         parallel and this call is not thread-safe=
=0A				synchronized (lock) {=0A					operatorChain.releaseOutputs(=
);=0A				}=0A			}=0A		}=0A	}=0A</code></pre><h3 style=3D"font-siz=
e: 1.25rem; color: rgb(36, 41, 46);">SourceStreamTask.run()</h3><=
ul style=3D"color: rgb(36, 41, 46);"><li>headOperator,=BB=E1=D2=C0=
=B4=CE=B4=D3StreamSource.operatorChain=D6=D0=B5=F7=D3=C3(StreamSo=
urce,StreamFlatMap,StreamMap),=D5=E2=B8=F6=BE=CD=CA=C7=C1=B4=CA=BD=
=B5=F7=D3=C3=A3=AC=B0=D1=D5=E2=D2=BB=B8=F6=C0=E0=D0=CD=B5=C4=C8=CE=
=CE=F1=A3=AC=BF=C9=D2=D4=D2=C0=B4=CE=B5=F7=D3=C3=D6=B4=D0=D0=B6=D4=
=D3=A6=B5=C4operator=A3=AC=B2=BB=D0=E8=D2=AA=C3=BF=B4=CE=D2=BB=B4=
=CEoperator=CA=E4=B3=F6=D6=D0=BC=E4=BD=E1=B9=FB</li><li>StreamSou=
rce=B2=D9=D7=F7=BB=E1=B5=F7=D3=C3SocketTextStreamFunction.run()=BA=
=AF=CA=FD=C0=B4=B4=A6=C0=ED</li><li>=D4=B4=C2=EB</li></ul><pre st=
yle=3D"font-size: 0.85rem; color: rgb(36, 41, 46); background-col=
or: rgb(246, 248, 250);"><code>	protected void run() throws Excep=
tion {=0A		headOperator.run(getCheckpointLock(), getStreamStatusM=
aintainer());=0A	}=0A=0A</code></pre><h3 style=3D"font-size: 1.25=
rem; color: rgb(36, 41, 46);">SocketTextStreamFunction.run()</h3>=
<ul style=3D"color: rgb(36, 41, 46);"><li>=BD=A8=C1=A2Source=B5=C4=
Sorcket=C1=AC=BD=D3=A3=AC=B6=C1=C8=A1=C1=F7=D6=D0=B5=C4=CA=FD=BE=DD=
=A3=AC=C3=BF=B4=CE=B6=C1=C8=A18K=B5=C4=CA=FD=BE=DD=B7=C5=B5=BD=BB=
=BA=B4=E6=D6=D0=A3=AC=D4=D9=B0=B4=D0=D0=BD=F8=D0=D0=BD=E2=CE=F6</=
li><li>=B0=D1=D2=BB=D0=D0=CA=FD=BE=DD=B7=C5=B5=BDctx.collect(reco=
rd);=BD=F8=D0=D0=BA=F3=D0=F8=B5=C4=B4=A6=C0=ED</li><li>=B4=CB=B4=A6=
=B5=F7=D3=C3=B5=C4=CA=C7NonTimestampContext.collect(record)</li><=
/ul><pre style=3D"font-size: 0.85rem; color: rgb(36, 41, 46); bac=
kground-color: rgb(246, 248, 250);"><code>public void run(SourceC=
ontext&lt;String&gt; ctx) throws Exception {=0A		final StringBuil=
der buffer =3D new StringBuilder();=0A		long attempt =3D 0;=0A=0A=
		while (isRunning) {=0A=0A			try (Socket socket =3D new Socket()=
) {=0A				currentSocket =3D socket;=0A=0A				LOG.info("Connecting=
 to server socket " + hostname + ':' + port);=0A				socket.connec=
t(new InetSocketAddress(hostname, port), CONNECTION_TIMEOUT_TIME)=
;=0A				try (BufferedReader reader =3D new BufferedReader(new Inp=
utStreamReader(socket.getInputStream()))) {=0A=0A					char[] cbuf=
 =3D new char[8192];=0A					int bytesRead;=0A					while (isRunnin=
g &amp;&amp; (bytesRead =3D reader.read(cbuf)) !=3D -1) {=0A				=09=
	buffer.append(cbuf, 0, bytesRead);=0A						int delimPos;=0A				=09=
	while (buffer.length() &gt;=3D delimiter.length() &amp;&amp; (de=
limPos =3D buffer.indexOf(delimiter)) !=3D -1) {=0A							String=20=
record =3D buffer.substring(0, delimPos);=0A							// truncate tr=
ailing carriage return=0A							if (delimiter.equals("\n") &amp;&=
amp; record.endsWith("\r")) {=0A								record =3D record.substri=
ng(0, record.length() - 1);=0A							}=0A							ctx.collect(recor=
d);=0A							buffer.delete(0, delimPos + delimiter.length());=0A=09=
					}=0A					}=0A				}=0A			}=0A=0A			// if we dropped out of th=
is loop due to an EOF, sleep and retry=0A			if (isRunning) {=0A	=09=
		attempt++;=0A				if (maxNumRetries =3D=3D -1 || attempt &lt; ma=
xNumRetries) {=0A					LOG.warn("Lost connection to server socket.=
 Retrying in " + delayBetweenRetries + " msecs...");=0A					Threa=
d.sleep(delayBetweenRetries);=0A				}=0A				else {=0A					// this=
 should probably be here, but some examples expect simple exists=20=
of the stream source=0A					// throw new EOFException("Reached en=
d of stream and reconnects are not enabled.");=0A					break;=0A	=09=
		}=0A			}=0A		}=0A=0A		// collect trailing data=0A		if (buffer.l=
ength() &gt; 0) {=0A			ctx.collect(buffer.toString());=0A		}=0A	}=
=0A</code></pre><h3 style=3D"font-size: 1.25rem; color: rgb(36, 4=
1, 46);">RecordWriter.emit</h3><ul style=3D"color: rgb(36, 41, 46=
);"><li>numChannels =CE=AA=B2=A2=D0=D0=B6=C8=A3=AC=BC=B4=CE=AADat=
aStrea.setParallelism(2) =C9=E8=D6=C3=B5=C4=B2=A2=D0=D0=B6=C8</li=
><li>channelSelector.selectChannels(record, numChannels),=B7=D6=C7=
=F8=CB=E3=B7=A8=A3=AC=B8=F8=B5=B1=C7=B0=CA=FD=BE=DD=B7=D6=C7=F8(=B7=
=D6=C7=F8=CA=C7=CE=AA=C1=CB=B8=F8=CF=C2=D3=CE=B2=A2=D0=D0=BC=C6=CB=
=E3=CA=B9=D3=C3=A3=AC=D4=DA=D5=E2=C0=EF=CA=C7=B7=A2=B8=F8=B2=BB=CD=
=AC=B5=C4Window=A3=AC=B2=A2=D0=D0=BC=C6=CB=E3)</li><li>=B5=F7=D3=C3=
KeyGroupStreamPartitioner.selectChannels=BE=DF=CC=E5=B5=C4=B7=D6=C7=
=F8=CB=E3=B7=A8</li><li>=D4=B4=C2=EB</li></ul><pre style=3D"font-=
size: 0.85rem; color: rgb(36, 41, 46); background-color: rgb(246,=
 248, 250);"><code>	public void emit(T record) throws IOException=
, InterruptedException {=0A		emit(record, channelSelector.selectC=
hannels(record, numChannels));=0A	}=0A</code></pre><h3 style=3D"f=
ont-size: 1.25rem; color: rgb(36, 41, 46);">KeyGroupStreamPartiti=
oner.selectChannels</h3><ul style=3D"color: rgb(36, 41, 46);"><li=
><p>=B7=D6=C7=F8=CA=B5=CF=D6KeyGroupRangeAssignment.assignKeyToPa=
rallelOperator(key, maxParallelism, numberOfOutputChannels);</p><=
pre style=3D"font-size: 0.85rem; background-color: rgb(246, 248,=20=
250);"><code>	=B7=D6=C7=F8=B4=FA=C2=EB=0AnumberOfOutputChannels:=20=
=D2=BB=B9=B2=B7=D6=CE=AA=B6=E0=C9=D9=B8=F6=B7=D6=C7=F8,=BC=B4=B2=A2=
=D0=D0=B6=C8=CE=AA=B6=E0=C9=D9=0AmaxParallelism:=D7=EE=B4=F3=B2=A2=
=D0=D0=B6=C8=A3=AC=C4=AC=C8=CF=CE=AA128=0Akey:=B4=A6=C0=ED=B5=C4=CA=
=FD=BE=DD=A3=AC=B6=D4=D3=A6=B5=C4key=B5=C4=D6=B5=0A=0AKeyGroupRan=
geAssignment.assignKeyToParallelOperator(key, maxParallelism, num=
berOfOutputChannels);=0A=0A</code></pre></li><li><p>=D4=B4=C2=EB<=
/p></li></ul><pre style=3D"font-size: 0.85rem; color: rgb(36, 41,=
 46); background-color: rgb(246, 248, 250);"><code>	@Override=0A=09=
public int[] selectChannels(=0A		SerializationDelegate&lt;StreamR=
ecord&lt;T&gt;&gt; record,=0A		int numberOfOutputChannels) {=0A=0A=
		K key;=0A		try {=0A			key =3D keySelector.getKey(record.getInst=
ance().getValue());=0A		} catch (Exception e) {=0A			throw new Ru=
ntimeException("Could not extract key from " + record.getInstance=
().getValue(), e);=0A		}=0A		returnArray[0] =3D KeyGroupRangeAssi=
gnment.assignKeyToParallelOperator(key, maxParallelism, numberOfO=
utputChannels);=0A		return returnArray;=0A	}=0A=0A</code></pre><h=
3 style=3D"font-size: 1.25rem; color: rgb(36, 41, 46);">OneInputS=
treamTask.run()</h3><ul style=3D"color: rgb(36, 41, 46);"><li>Str=
eamTask.run().run()=BA=AF=CA=FD=B5=F7=D3=C3=A3=AC=B5=B1=CE=AAWind=
ow=CA=B1=B5=F7=D3=C3OneInputStreamTask.run()</li><li>=B5=F7=D3=C3=
StreamInputProcessor.processInput()=BA=AF=CA=FD</li><li>=D4=B4=C2=
=EB</li></ul><pre style=3D"font-size: 0.85rem; color: rgb(36, 41,=
 46); background-color: rgb(246, 248, 250);"><code>    protected=20=
void run() throws Exception {=0A		// cache processor reference on=
 the stack, to make the code more JIT friendly=0A		final StreamIn=
putProcessor&lt;IN&gt; inputProcessor =3D this.inputProcessor;=0A=
=0A		while (running &amp;&amp; inputProcessor.processInput()) {=0A=
			// all the work happens in the "processInput" method=0A		}=0A=09=
}=0A</code></pre><h3 style=3D"font-size: 1.25rem; color: rgb(36,=20=
41, 46);">StreamInputProcessor.processInput()</h3><ul style=3D"co=
lor: rgb(36, 41, 46);"><li>=B5=F7=D3=C3BarrierTracker.getNextNonB=
locked()=B5=C3=B5=BD=D2=BB=B8=F6=D4=AA=CB=D8(key,value)=B5=C3=D6=B5=
=A3=AC=D2=B2=BE=CD=CA=C7source=BD=F8=D0=D0flatMap,map =BA=AF=CA=FD=
=D6=AE=BA=F3=B5=C4=CA=FD=BE=DD=A3=AC=B4=CB=CA=B1=A3=AC=BB=B9=C3=BB=
=D3=D0=BD=F8=D0=D0=BE=DB=BA=CF=B2=D9=D7=F7,=D7=A2=D2=E2=D5=E2=C0=EF=
=BB=E1=B5=C3=B5=BD</li><li>=B4=CB=CA=B1=B5=C4=CA=FD=BE=DD=BB=B9=C3=
=BB=D3=D0=BD=F8=D0=D0=B7=D6=C5=E4=B8=F8=B2=BB=CD=AC=B5=C4Window,=B5=
=B1Source=D3=D0=CA=FD=BE=DD=B7=A2=CB=CD=B9=FD=C0=B4=BA=F3=A3=AC=BE=
=CD=D2=BB=CC=F5=D2=BB=CC=F5=B5=F7=D3=C3streamOperator.processElem=
ent(record),=BC=B4WindowOperator.processElement=BD=F8=D0=D0=B4=A6=
=C0=ED</li></ul><pre style=3D"font-size: 0.85rem; color: rgb(36,=20=
41, 46); background-color: rgb(246, 248, 250);"><code>public bool=
ean processInput() throws Exception {=0A		if (isFinished) {=0A		=09=
return false;=0A		}=0A		if (numRecordsIn =3D=3D null) {=0A			try=20=
{=0A				numRecordsIn =3D ((OperatorMetricGroup) streamOperator.ge=
tMetricGroup()).getIOMetricGroup().getNumRecordsInCounter();=0A	=09=
	} catch (Exception e) {=0A				LOG.warn("An exception occurred du=
ring the metrics setup.", e);=0A				numRecordsIn =3D new SimpleCo=
unter();=0A			}=0A		}=0A=0A		while (true) {=0A			if (currentRecor=
dDeserializer !=3D null) {=0A				DeserializationResult result =3D=
 currentRecordDeserializer.getNextRecord(deserializationDelegate)=
;=0A=0A				if (result.isBufferConsumed()) {=0A					currentRecordD=
eserializer.getCurrentBuffer().recycleBuffer();=0A					currentRec=
ordDeserializer =3D null;=0A				}=0A=0A				if (result.isFullRecor=
d()) {=0A					StreamElement recordOrMark =3D deserializationDeleg=
ate.getInstance();=0A=0A					if (recordOrMark.isWatermark()) {=0A=
						// handle watermark=0A						statusWatermarkValve.inputWater=
mark(recordOrMark.asWatermark(), currentChannel);=0A						continu=
e;=0A					} else if (recordOrMark.isStreamStatus()) {=0A						//=20=
handle stream status=0A						statusWatermarkValve.inputStreamStat=
us(recordOrMark.asStreamStatus(), currentChannel);=0A						contin=
ue;=0A					} else if (recordOrMark.isLatencyMarker()) {=0A						/=
/ handle latency marker=0A						synchronized (lock) {=0A							st=
reamOperator.processLatencyMarker(recordOrMark.asLatencyMarker())=
;=0A						}=0A						continue;=0A					} else {=0A						// now we c=
an do the actual processing=0A						StreamRecord&lt;IN&gt; record=
 =3D recordOrMark.asRecord();=0A						synchronized (lock) {=0A		=09=
				numRecordsIn.inc();=0A							streamOperator.setKeyContextElem=
ent1(record);=0A							streamOperator.processElement(record);=0A=09=
					}=0A						return true;=0A					}=0A				}=0A			}=0A=0A			final=
 BufferOrEvent bufferOrEvent =3D barrierHandler.getNextNonBlocked=
();=0A			if (bufferOrEvent !=3D null) {=0A				if (bufferOrEvent.i=
sBuffer()) {=0A					currentChannel =3D bufferOrEvent.getChannelIn=
dex();=0A					currentRecordDeserializer =3D recordDeserializers[c=
urrentChannel];=0A					currentRecordDeserializer.setNextBuffer(bu=
fferOrEvent.getBuffer());=0A				}=0A				else {=0A					// Event re=
ceived=0A					final AbstractEvent event =3D bufferOrEvent.getEven=
t();=0A					if (event.getClass() !=3D EndOfPartitionEvent.class)=20=
{=0A						throw new IOException("Unexpected event: " + event);=0A=
					}=0A				}=0A			}=0A			else {=0A				isFinished =3D true;=0A	=09=
		if (!barrierHandler.isEmpty()) {=0A					throw new IllegalStateE=
xception("Trailing data in checkpoint barrier handler.");=0A				}=
=0A				return false;=0A			}=0A		}=0A	}=0A</code></pre><h3 style=3D=
"font-size: 1.25rem; color: rgb(36, 41, 46);">WindowOperator.proc=
essElement(StreamRecord element)</h3><ul style=3D"color: rgb(36,=20=
41, 46);"><li><p>WindowOperator.processElement,=B8=F8=C3=BF=D2=BB=
=B8=F6WordWithCount(1,1) =D5=E2=D1=F9=B5=C4=D4=AA=CB=D8=B7=D6=C5=E4=
window,=D2=B2=BE=CD=CA=C7=C8=B7=C8=CF=C3=BF=D2=BB=B8=F6=D4=AA=CB=D8=
=CA=F4=D3=DA=C4=C4=D2=BB=B8=F6=B4=B0=BF=DA=A3=AC=D2=F2=CE=AA=D0=E8=
=D2=AA=B6=D4=CD=AC=D2=BB=B8=F6=B4=B0=BF=DA=B5=C4=CF=E0=CD=ACkey=BD=
=F8=D0=D0=BE=DB=BA=CF=B2=D9=D7=F7</p><pre style=3D"font-size: 0.8=
5rem; background-color: rgb(246, 248, 250);"><code>final Collecti=
on&lt;W&gt; elementWindows =3D windowAssigner.assignWindows(=0A =20=
          element.getValue(), element.getTimestamp(), windowAssig=
nerContext);=0A</code></pre></li><li><p>=B0=D1=B5=B1=C7=B0=D4=AA=CB=
=D8=D4=F6=BC=D3=B5=BDstate=D6=D0=B1=A3=B4=E6,add=BA=AF=CA=FD=D6=D0=
=BB=E1=B6=D4=CF=E0=CD=ACkey=BD=F8=D0=D0=BE=DB=BA=CF=B2=D9=D7=F7(r=
educe),=B6=D4=CD=AC=D2=BB=B8=F6window=D6=D0=CF=E0=CD=ACkey=BD=F8=D0=
=D0=C7=F3=BA=CD=BE=CD=CA=C7=D4=DA=D5=E2=B8=F6=B7=BD=B7=A8=D6=D0=BD=
=F8=D0=D0=B5=C4</p><pre style=3D"font-size: 0.85rem; background-c=
olor: rgb(246, 248, 250);"><code>windowState.add(element.getValue=
());=0A</code></pre></li><li><p>triggerContext.onElement(element)=
,=B6=D4=B5=B1=C7=B0=D4=AA=CB=D8=C9=E8=D6=C3trigger,=D2=B2=BE=CD=CA=
=C7=B5=B1=C7=B0=D4=AA=CB=D8=B5=C4window=D4=DA=C4=C4=B8=F6=CA=B1=BC=
=E4=B5=E3=B4=A5=B7=A2(=BD=E1=CA=F8=B5=C4=CA=B1=BC=E4=B5=E3), =B0=D1=
=B5=B1=C7=B0=D4=AA=CB=D8=B5=C4key,=D4=F6=BC=D3=B5=BDInternalTimer=
ServiceImpl.processingTimeTimersQueue=D6=D0=A3=AC=C3=BF=D2=BB=CC=F5=
=CA=FD=BE=DD=BB=E1=BC=D3=D2=BB=B4=CE=A3=AC=BC=D3=CD=EA=BA=F3=BB=E1=
=C8=A5=D6=D8=A3=AC=CF=E0=B5=B1=D3=DASet,=B6=D4=CF=E0=CD=ACKey=B5=C4=
=B4=A6=C0=ED=A3=AC =BA=F3=C3=E6=B7=A2=CB=CD=B8=F8Sink=B5=C4=CA=FD=
=BE=DD=A3=AC=BE=CD=CA=C7=B1=E9=C0=FA=D5=E2=B8=F6processingTimeTim=
ersQueue=D6=D0=B5=C4=CA=FD=BE=DD=A3=AC=B5=B1=C8=BB=A3=AC=C3=BF=B4=
=CE=B7=A2=CB=CD=B5=DA=D2=BB=B8=F6=D4=AA=CB=D8=A3=AC=B7=A2=CB=CD=BA=
=F3=A3=AC=BB=E1=B0=D1=D7=EE=BA=F3=D2=BB=B8=F6=D4=AA=CB=D8=B7=C5=B5=
=BD=B5=DA=D2=BB=B8=F6=D4=AA=CB=D8</p><pre style=3D"font-size: 0.8=
5rem; background-color: rgb(246, 248, 250);"><code>TriggerResult=20=
triggerResult =3D triggerContext.onElement(element);=0A</code></p=
re></li></ul><pre style=3D"font-size: 0.85rem; color: rgb(36, 41,=
 46); background-color: rgb(246, 248, 250);"><code>=0Apublic void=
 processElement(StreamRecord&lt;IN&gt; element) throws Exception=20=
{=0A		final Collection&lt;W&gt; elementWindows =3D windowAssigner=
.assignWindows(=0A			element.getValue(), element.getTimestamp(),=20=
windowAssignerContext);=0A=0A		//if element is handled by none of=
 assigned elementWindows=0A		boolean isSkippedElement =3D true;=0A=
=0A		final K key =3D this.&lt;K&gt;getKeyedStateBackend().getCurr=
entKey();=0A=0A		if (windowAssigner instanceof MergingWindowAssig=
ner) {=0A			MergingWindowSet&lt;W&gt; mergingWindows =3D getMergi=
ngWindowSet();=0A=0A			for (W window: elementWindows) {=0A=0A			=09=
// adding the new window might result in a merge, in that case th=
e actualWindow=0A				// is the merged window and we work with tha=
t. If we don't merge then=0A				// actualWindow =3D=3D window=0A=09=
			W actualWindow =3D mergingWindows.addWindow(window, new Mergin=
gWindowSet.MergeFunction&lt;W&gt;() {=0A					@Override=0A					pub=
lic void merge(W mergeResult,=0A							Collection&lt;W&gt; merged=
Windows, W stateWindowResult,=0A							Collection&lt;W&gt; merged=
StateWindows) throws Exception {=0A=0A						if ((windowAssigner.i=
sEventTime() &amp;&amp; mergeResult.maxTimestamp() + allowedLaten=
ess &lt;=3D internalTimerService.currentWatermark())) {=0A						=09=
throw new UnsupportedOperationException("The end timestamp of an=20=
" +=0A									"event-time window cannot become earlier than the=20=
current watermark " +=0A									"by merging. Current watermark:=20=
" + internalTimerService.currentWatermark() +=0A									" window=
: " + mergeResult);=0A						} else if (!windowAssigner.isEventTim=
e() &amp;&amp; mergeResult.maxTimestamp() &lt;=3D internalTimerSe=
rvice.currentProcessingTime()) {=0A							throw new UnsupportedOp=
erationException("The end timestamp of a " +=0A									"processi=
ng-time window cannot become earlier than the current processing=20=
time " +=0A									"by merging. Current processing time: " + int=
ernalTimerService.currentProcessingTime() +=0A									" window:=20=
" + mergeResult);=0A						}=0A=0A						triggerContext.key =3D key=
;=0A						triggerContext.window =3D mergeResult;=0A=0A						trigg=
erContext.onMerge(mergedWindows);=0A=0A						for (W m: mergedWind=
ows) {=0A							triggerContext.window =3D m;=0A							triggerCont=
ext.clear();=0A							deleteCleanupTimer(m);=0A						}=0A=0A				=09=
	// merge the merged state windows into the newly resulting state=
 window=0A						windowMergingState.mergeNamespaces(stateWindowRes=
ult, mergedStateWindows);=0A					}=0A				});=0A=0A				// drop if=20=
the window is already late=0A				if (isWindowLate(actualWindow))=20=
{=0A					mergingWindows.retireWindow(actualWindow);=0A					contin=
ue;=0A				}=0A				isSkippedElement =3D false;=0A=0A				W stateWin=
dow =3D mergingWindows.getStateWindow(actualWindow);=0A				if (st=
ateWindow =3D=3D null) {=0A					throw new IllegalStateException("=
Window " + window + " is not in in-flight window set.");=0A				}=0A=
=0A				windowState.setCurrentNamespace(stateWindow);=0A				window=
State.add(element.getValue());=0A=0A				triggerContext.key =3D ke=
y;=0A				triggerContext.window =3D actualWindow;=0A=0A				Trigger=
Result triggerResult =3D triggerContext.onElement(element);=0A=0A=
				if (triggerResult.isFire()) {=0A					ACC contents =3D windowS=
tate.get();=0A					if (contents =3D=3D null) {=0A						continue;=0A=
					}=0A					emitWindowContents(actualWindow, contents);=0A				}=
=0A=0A				if (triggerResult.isPurge()) {=0A					windowState.clear=
();=0A				}=0A				registerCleanupTimer(actualWindow);=0A			}=0A=0A=
			// need to make sure to update the merging state in state=0A	=09=
	mergingWindows.persist();=0A		} else {=0A			for (W window: eleme=
ntWindows) {=0A=0A				// drop if the window is already late=0A		=09=
	if (isWindowLate(window)) {=0A					continue;=0A				}=0A				isSki=
ppedElement =3D false;=0A=0A				windowState.setCurrentNamespace(w=
indow);=0A				windowState.add(element.getValue());=0A=0A				trigg=
erContext.key =3D key;=0A				triggerContext.window =3D window;=0A=
=0A				TriggerResult triggerResult =3D triggerContext.onElement(e=
lement);=0A=0A				if (triggerResult.isFire()) {=0A					ACC conten=
ts =3D windowState.get();=0A					if (contents =3D=3D null) {=0A	=09=
				continue;=0A					}=0A					emitWindowContents(window, contents=
);=0A				}=0A=0A				if (triggerResult.isPurge()) {=0A					windowS=
tate.clear();=0A				}=0A				registerCleanupTimer(window);=0A			}=0A=
		}=0A=0A		// side output input event if=0A		// element not handl=
ed by any window=0A		// late arriving tag has been set=0A		// win=
dowAssigner is event time and current timestamp + allowed latenes=
s no less than element timestamp=0A		if (isSkippedElement &amp;&a=
mp; isElementLate(element)) {=0A			if (lateDataOutputTag !=3D nul=
l){=0A				sideOutput(element);=0A			} else {=0A				this.numLateRe=
cordsDropped.inc();=0A			}=0A		}=0A	}=0A=0A=0A</code></pre><h3 st=
yle=3D"font-size: 1.25rem; color: rgb(36, 41, 46);">InternalTimer=
ServiceImpl.onProcessingTime</h3><ul style=3D"color: rgb(36, 41,=20=
46);"><li><p>processingTimeTimersQueue(HeapPriorityQueueSet) =B8=C3=
=B6=D4=CF=F3=D6=D0=B4=E6=B4=A2=C1=CB=CB=F9=D3=D0=B5=C4key,=D5=E2=D0=
=A9key=CA=C7=C8=A5=D6=D8=BA=F3=A3=AC=B0=B4=B4=A6=C0=ED=CB=B3=D0=F2=
=C5=C5=D0=F2</p></li><li><p>processingTimeTimersQueue.peek() =C8=A1=
=B3=F6=B5=DA=D2=BB=CC=F5=CA=FD=BE=DD=BD=F8=D0=D0=B4=A6=C0=ED</p><=
/li><li><p>processingTimeTimersQueue.poll();=BB=E1=D2=C6=B3=FD=B5=
=DA=D2=BB=CC=F5=CA=FD=BE=DD=A3=AC=B2=A2=C7=D2=A3=AC=C4=C3=D7=EE=BA=
=F3=D2=BB=CC=F5=CA=FD=BE=DD=A3=AC=B7=C5=B5=DA1=D2=BB=B8=F6=D4=AA=CB=
=D8=A3=AC=B5=BC=D6=C2=A3=AC=CB=F9=D3=D0=D4=AA=CB=D8=B5=C4=B4=A6=C0=
=ED=CB=B3=D0=F2=CA=C7=A3=AC=CF=C8=B4=A6=C0=ED=B5=DA=D2=BB=B8=F6=D4=
=AA=CB=D8=A3=AC=C8=BB=BA=F3=A3=AC=B0=D1=D7=EE=BA=F3=D2=BB=B8=F6=D4=
=AA=CB=D8=B7=C5=B5=DA=D2=BB=B8=F6=A3=AC =D7=EE=BA=F3=D2=BB=B8=F6=BE=
=CD=D6=C3=CE=AA=BF=D5=A3=AC=D4=D9=D1=AD=BB=B7=B4=A6=C0=ED=CB=F9=D3=
=D0=CA=FD=BE=DD=A3=AC=CF=E0=B5=B1=D3=DA=B4=A6=C0=ED=CD=EA=B5=DA=D2=
=BB=B8=F6=D4=AA=CB=D8=A3=AC=B4=A6=BA=F3=B4=D3=D7=EE=BA=F3=D2=BB=B8=
=F6=D4=AA=CB=D8=BF=AA=CA=BC=B4=A6=C0=ED=A3=AC=D2=BB=D6=B1=B4=A6=C0=
=ED=B5=BD=CD=EA=B3=C9,=BE=D9=C0=FD</p><pre style=3D"font-size: 0.=
85rem; background-color: rgb(246, 248, 250);"><code>1 2 1 3 2 5 4=
=0A=B4=E6=CE=AA 1 2 3 5 4 =0A=CB=B3=D0=F2=BE=CD=B1=E4=CE=AA=0A 1=0A=
 4=0A 5=0A 3=0A 2=0A</code></pre></li><li><p>keyContext.setCurren=
tKey(timer.getKey());//=C9=E8=D6=C3=B5=B1=C7=B0=B5=C4key,=B5=B1=C7=
=B0=D0=E8=D2=AA=B4=A6=C0=ED=B5=C4</p></li><li><p>triggerTarget.on=
ProcessingTime(timer);// =B5=F7=D3=C3 WindowOperator.onProcessing=
Time(timer)=B4=A6=C0=ED</p></li></ul><pre style=3D"font-size: 0.8=
5rem; color: rgb(36, 41, 46); background-color: rgb(246, 248, 250=
);"><code>queue =3D {HeapPriorityQueueElement[129]@8184} =0A 1 =3D=
 {TimerHeapInternalTimer@12441} "Timer{timestamp=3D1551505439999,=
 key=3D(1), namespace=3DTimeWindow{start=3D1551505380000, end=3D1=
551505440000}}"=0A 2 =3D {TimerHeapInternalTimer@12442} "Timer{ti=
mestamp=3D1551505439999, key=3D(2), namespace=3DTimeWindow{start=3D=
1551505380000, end=3D1551505440000}}"=0A 3 =3D {TimerHeapInternal=
Timer@12443} "Timer{timestamp=3D1551505439999, key=3D(3), namespa=
ce=3DTimeWindow{start=3D1551505380000, end=3D1551505440000}}"=0A=20=
5 =3D {TimerHeapInternalTimer@12443} "Timer{timestamp=3D155150543=
9999, key=3D(3), namespace=3DTimeWindow{start=3D1551505380000, en=
d=3D1551505440000}}"=0A 4 =3D {TimerHeapInternalTimer@12443} "Tim=
er{timestamp=3D1551505439999, key=3D(3), namespace=3DTimeWindow{s=
tart=3D1551505380000, end=3D1551505440000}}"=0A=0A</code></pre><u=
l style=3D"color: rgb(36, 41, 46);"><li>=B5=F7=D3=C3 WindowOperat=
or.onProcessingTime(timer)=B4=A6=C0=ED=B5=B1=C7=B0key;</li></ul><=
pre style=3D"font-size: 0.85rem; color: rgb(36, 41, 46); backgrou=
nd-color: rgb(246, 248, 250);"><code>=0Apublic void onProcessingT=
ime(long time) throws Exception {=0A		// null out the timer in ca=
se the Triggerable calls registerProcessingTimeTimer()=0A		// ins=
ide the callback.=0A		nextTimer =3D null;=0A=0A		InternalTimer&lt=
;K, N&gt; timer;=0A=0A		while ((timer =3D processingTimeTimersQue=
ue.peek()) !=3D null &amp;&amp; timer.getTimestamp() &lt;=3D time=
) {=0A			processingTimeTimersQueue.poll();=0A			keyContext.setCur=
rentKey(timer.getKey());=0A			triggerTarget.onProcessingTime(time=
r);=0A		}=0A=0A		if (timer !=3D null &amp;&amp; nextTimer =3D=3D=20=
null) {=0A			nextTimer =3D processingTimeService.registerTimer(ti=
mer.getTimestamp(), this);=0A		}=0A	}=0A</code></pre><h3 style=3D=
"font-size: 1.25rem; color: rgb(36, 41, 46);">WindowOperator.onPr=
ocessingTime</h3><ul style=3D"color: rgb(36, 41, 46);"><li>trigge=
rResult.isFire()// =B5=B1=C7=B0=D4=AA=CB=D8=B6=D4=D3=A6=B5=C4wind=
ow=D2=D1=BE=AD=BF=C9=D2=D4=B7=A2=C9=E4=C1=CB=A3=AC=BC=B4=B9=FD=C1=
=CB=BD=E1=CA=F8=CA=B1=BC=E4</li><li>windowState.get() //=C8=A1=B3=
=F6=B5=B1=C7=B0key=B6=D4=D3=A6=B5=C4(key,value)=B4=CB=CA=B1=D2=D1=
=BE=AD=CA=C7=CF=E0=CD=ACkey=BE=DB=BA=CF=BA=F3=B5=C4=D6=B5</li><li=
>emitWindowContents(triggerContext.window, contents);//=B7=A2=CB=CD=
=B8=F8Sink=BD=F8=D0=D0=B4=A6=C0=ED</li></ul><pre style=3D"font-si=
ze: 0.85rem; color: rgb(36, 41, 46); background-color: rgb(246, 2=
48, 250);"><code>public void onProcessingTime(InternalTimer&lt;K,=
 W&gt; timer) throws Exception {=0A		triggerContext.key =3D timer=
.getKey();=0A		triggerContext.window =3D timer.getNamespace();=0A=
=0A		MergingWindowSet&lt;W&gt; mergingWindows;=0A=0A		if (windowA=
ssigner instanceof MergingWindowAssigner) {=0A			mergingWindows =3D=
 getMergingWindowSet();=0A			W stateWindow =3D mergingWindows.get=
StateWindow(triggerContext.window);=0A			if (stateWindow =3D=3D n=
ull) {=0A				// Timer firing for non-existent window, this can on=
ly happen if a=0A				// trigger did not clean up timers. We have=20=
already cleared the merging=0A				// window and therefore the Tri=
gger state, however, so nothing to do.=0A				return;=0A			} else=20=
{=0A				windowState.setCurrentNamespace(stateWindow);=0A			}=0A	=09=
} else {=0A			windowState.setCurrentNamespace(triggerContext.wind=
ow);=0A			mergingWindows =3D null;=0A		}=0A=0A		TriggerResult tri=
ggerResult =3D triggerContext.onProcessingTime(timer.getTimestamp=
());=0A=0A		if (triggerResult.isFire()) {=0A			ACC contents =3D w=
indowState.get();=0A			if (contents !=3D null) {=0A				emitWindow=
Contents(triggerContext.window, contents);=0A			}=0A		}=0A=0A		if=
 (triggerResult.isPurge()) {=0A			windowState.clear();=0A		}=0A=0A=
		if (!windowAssigner.isEventTime() &amp;&amp; isCleanupTime(trig=
gerContext.window, timer.getTimestamp())) {=0A			clearAllState(tr=
iggerContext.window, windowState, mergingWindows);=0A		}=0A=0A		i=
f (mergingWindows !=3D null) {=0A			// need to make sure to updat=
e the merging state in state=0A			mergingWindows.persist();=0A		}=
=0A	}=0A</code></pre><h3 style=3D"font-size: 1.25rem; color: rgb(=
36, 41, 46);">SingleInputGate</h3><ul style=3D"color: rgb(36, 41,=
 46);"><li>=D6=D0=BC=E4=CA=FD=BE=DD=B4=A6=C0=ED=C1=F7=B3=CC(=CA=FD=
=BE=DD=BD=BB=BB=A5)</li></ul><pre style=3D"font-size: 0.85rem; co=
lor: rgb(36, 41, 46); background-color: rgb(246, 248, 250);"><cod=
e>/*=0A * Licensed to the Apache Software Foundation (ASF) under=20=
one=0A * or more contributor license agreements.  See the NOTICE=20=
file=0A * distributed with this work for additional information=0A=
 * regarding copyright ownership.  The ASF licenses this file=0A=20=
* to you under the Apache License, Version 2.0 (the=0A * "License=
"); you may not use this file except in compliance=0A * with the=20=
License.  You may obtain a copy of the License at=0A *=0A *     h=
ttp://www.apache.org/licenses/LICENSE-2.0=0A *=0A * Unless requir=
ed by applicable law or agreed to in writing, software=0A * distr=
ibuted under the License is distributed on an "AS IS" BASIS,=0A *=
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or=20=
implied.=0A * See the License for the specific language governing=
 permissions and=0A * limitations under the License.=0A */=0A=0Ap=
ackage org.apache.flink.runtime.io.network.partition.consumer;=0A=
=0Aimport org.apache.flink.api.common.JobID;=0Aimport org.apache.=
flink.core.memory.MemorySegment;=0Aimport org.apache.flink.runtim=
e.deployment.InputChannelDeploymentDescriptor;=0Aimport org.apach=
e.flink.runtime.deployment.InputGateDeploymentDescriptor;=0Aimpor=
t org.apache.flink.runtime.deployment.ResultPartitionLocation;=0A=
import org.apache.flink.runtime.event.AbstractEvent;=0Aimport org=
.apache.flink.runtime.event.TaskEvent;=0Aimport org.apache.flink.=
runtime.executiongraph.ExecutionAttemptID;=0Aimport org.apache.fl=
ink.runtime.io.network.NetworkEnvironment;=0Aimport org.apache.fl=
ink.runtime.io.network.api.EndOfPartitionEvent;=0Aimport org.apac=
he.flink.runtime.io.network.api.serialization.EventSerializer;=0A=
import org.apache.flink.runtime.io.network.buffer.Buffer;=0Aimpor=
t org.apache.flink.runtime.io.network.buffer.BufferPool;=0Aimport=
 org.apache.flink.runtime.io.network.buffer.BufferProvider;=0Aimp=
ort org.apache.flink.runtime.io.network.buffer.NetworkBufferPool;=
=0Aimport org.apache.flink.runtime.io.network.partition.ResultPar=
titionID;=0Aimport org.apache.flink.runtime.io.network.partition.=
ResultPartitionType;=0Aimport org.apache.flink.runtime.io.network=
.partition.consumer.InputChannel.BufferAndAvailability;=0Aimport=20=
org.apache.flink.runtime.jobgraph.DistributionPattern;=0Aimport o=
rg.apache.flink.runtime.jobgraph.IntermediateDataSetID;=0Aimport=20=
org.apache.flink.runtime.jobgraph.IntermediateResultPartitionID;=0A=
import org.apache.flink.runtime.metrics.groups.TaskIOMetricGroup;=
=0Aimport org.apache.flink.runtime.taskmanager.TaskActions;=0A=0A=
import org.slf4j.Logger;=0Aimport org.slf4j.LoggerFactory;=0A=0Ai=
mport java.io.IOException;=0Aimport java.util.ArrayDeque;=0Aimpor=
t java.util.ArrayList;=0Aimport java.util.BitSet;=0Aimport java.u=
til.HashMap;=0Aimport java.util.List;=0Aimport java.util.Map;=0Ai=
mport java.util.Optional;=0Aimport java.util.Timer;=0A=0Aimport s=
tatic org.apache.flink.util.Preconditions.checkArgument;=0Aimport=
 static org.apache.flink.util.Preconditions.checkNotNull;=0Aimpor=
t static org.apache.flink.util.Preconditions.checkState;=0A=0A/**=
=0A * An input gate consumes one or more partitions of a single p=
roduced intermediate result.=0A *=0A * &lt;p&gt;Each intermediate=
 result is partitioned over its producing parallel subtasks; each=
 of these=0A * partitions is furthermore partitioned into one or=20=
more subpartitions.=0A *=0A * &lt;p&gt;As an example, consider a=20=
map-reduce program, where the map operator produces data and the=0A=
 * reduce operator consumes the produced data.=0A *=0A * &lt;pre&=
gt;{@code=0A * +-----+              +---------------------+     =20=
        +--------+=0A * | Map | =3D produce =3D&gt; | Intermediat=
e Result | &lt;=3D consume =3D | Reduce |=0A * +-----+          =20=
   +---------------------+              +--------+=0A * }&lt;/pre=
&gt;=0A *=0A * &lt;p&gt;When deploying such a program in parallel=
, the intermediate result will be partitioned over its=0A * produ=
cing parallel subtasks; each of these partitions is furthermore p=
artitioned into one or more=0A * subpartitions.=0A *=0A * &lt;pre=
&gt;{@code=0A *                            Intermediate result=0A=
 *               +-----------------------------------------+=0A *=
               |                      +----------------+ |      =20=
       +-----------------------+=0A * +-------+     | +----------=
---+  +=3D&gt; | Subpartition 1 | | &lt;=3D=3D=3D=3D=3D=3D=3D+=3D=
=3D=3D | Input Gate | Reduce 1 |=0A * | Map 1 | =3D=3D&gt; | | Pa=
rtition 1 | =3D|   +----------------+ |         |    +-----------=
------------+=0A * +-------+     | +-------------+  +=3D&gt; | Su=
bpartition 2 | | &lt;=3D=3D+    |=0A *               |          =20=
           +----------------+ |    |    | Subpartition request=0A=
 *               |                                         |    |=
    |=0A *               |                      +----------------=
+ |    |    |=0A * +-------+     | +-------------+  +=3D&gt; | Su=
bpartition 1 | | &lt;=3D=3D+=3D=3D=3D=3D+=0A * | Map 2 | =3D=3D&g=
t; | | Partition 2 | =3D|   +----------------+ |    |         +--=
---------------------+=0A * +-------+     | +-------------+  +=3D=
&gt; | Subpartition 2 | | &lt;=3D=3D+=3D=3D=3D=3D=3D=3D=3D=3D | I=
nput Gate | Reduce 2 |=0A *               |                     =20=
+----------------+ |              +-----------------------+=0A *=20=
              +-----------------------------------------+=0A * }&=
lt;/pre&gt;=0A *=0A * &lt;p&gt;In the above example, two map subt=
asks produce the intermediate result in parallel, resulting=0A *=20=
in two partitions (Partition 1 and 2). Each of these partitions i=
s further partitioned into two=0A * subpartitions -- one for each=
 parallel reduce subtask.=0A */=0Apublic class SingleInputGate im=
plements InputGate {=0A</code></pre><p style=3D"color: rgb(36, 41=
, 46);">end<br></p><div style=3D"color:gray"><small>=C0=B4=D4=B4=A3=
=BA&nbsp;<a href=3D"https://github.com/opensourceteams/flink-mave=
n-scala/blob/master/md/miniCluster/Flink-Parallelism-Calculation.=
md">https://github.com/opensourceteams/flink-maven-scala/blob/mas=
ter/md/miniCluster/Flink-Parallelism-Calculation.md</a></small></=
div></body></html>=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A

------=_Next_Part_0000421484.490--

------=_Next_Part_0001264452.787--

