From: WizMime<support@wiz.cn>
Subject: =?gb2312?B?TGVldGNvZGXM4r3iKLOs1N4hISEp?=
Date: Date: Fri, 23 Jul 2021 05:55:36 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="multipart/alternative";
	boundary="----=_Next_Part_0001448811.402"

This is a multi-part message in MIME format.

------=_Next_Part_0001448811.402
Content-Type: multipart/alternative;
	boundary="----=_Next_Part_0000482937.676"


------=_Next_Part_0000482937.676
Content-Type: text/plain;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable

This is a multi-part message in MIME format.

------=_Next_Part_0000482937.676
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML><html><head>=0D=0A<meta http-equiv=3D"Content-Type=
" content=3D"text/html; charset=3Dutf-8">=0A=0A=0A=0A=0A=0A=0A=0A=
=0A=0A<title>Leetcode=E9=A2=98=E8=A7=A3(=E8=B6=85=E8=B5=9E!!!)</t=
itle>=0A    =0A<style id=3D"wiz_custom_css">html, .wiz-editor-bod=
y {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, 'Hi=
ragino Sans GB', '=E5=AF=B0=EE=86=BF=E8=92=8B=E9=97=86=E5=91=B4=E7=
=B2=A6', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;=
line-height: 1.7;margin: 0 auto;padding: 20px 16px;padding: 1.25r=
em 1rem;}.wiz-editor-body h1,.wiz-editor-body h2,.wiz-editor-body=
 h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {=
margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weig=
ht: bold;}.wiz-editor-body h1 {font-size:20pt;font-size:1.67rem;}=
.wiz-editor-body h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor=
-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {=
font-size:14pt;font-size:1.17rem;}.wiz-editor-body h5 {font-size:=
12pt;font-size:1rem;}.wiz-editor-body h6 {font-size:12pt;font-siz=
e:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-e=
ditor-body p,.wiz-editor-body ul,.wiz-editor-body ol,.wiz-editor-=
body dl,.wiz-editor-body li {margin:8px 0;}.wiz-editor-body block=
quote,.wiz-editor-body table,.wiz-editor-body pre,.wiz-editor-bod=
y code {margin:8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;=
}.wiz-editor-body ul,.wiz-editor-body ol {padding-left:32px;paddi=
ng-left:2rem;}.wiz-editor-body ol.wiz-list-level1 > li {list-styl=
e-type:decimal;}.wiz-editor-body ol.wiz-list-level2 > li {list-st=
yle-type:lower-latin;}.wiz-editor-body ol.wiz-list-level3 > li {l=
ist-style-type:lower-roman;}.wiz-editor-body blockquote {padding:=
 0 12px;}.wiz-editor-body blockquote > :first-child {margin-top:0=
;}.wiz-editor-body blockquote > :last-child {margin-bottom:0;}.wi=
z-editor-body img {border:0;max-width:100%;height:auto !important=
;margin:2px 0;}.wiz-editor-body table {border-collapse:collapse;b=
order:1px solid #bbbbbb;}.wiz-editor-body td,.wiz-editor-body th=20=
{padding:4px 8px;border-collapse:collapse;border:1px solid #bbbbb=
b;min-height:28px;word-break:break-word;box-sizing: border-box;}.=
wiz-hide {display:none !important;}</style></head>=0A=0A<body cla=
ss=3D"wiz-editor-body" spellcheck=3D"false" style=3D"opacity: 1;"=
 ><div class=3D"article-title-box"><h1 class=3D"title-article">Le=
etcode=E9=A2=98=E8=A7=A3(=E8=B6=85=E8=B5=9E!!!)</h1></div><div><b=
r class=3D"Apple-interchange-newline"><span>=E6=9D=A5=E6=BA=90=EF=
=BC=9A&nbsp;</span><a href=3D"https://blog.csdn.net/fancefu/artic=
le/details/79357120">https://blog.csdn.net/fancefu/article/detail=
s/79357120</a><br></div><div class=3D"htmledit_views" id=3D"conte=
nt_views"><h1>=E7=AE=97=E6=B3=95=E6=80=9D=E6=83=B3</h1><h2>=E4=BA=
=8C=E5=88=86=E6=9F=A5=E6=89=BE</h2><p>=E4=BA=8C=E5=88=86=E6=9F=A5=
=E6=89=BE=E6=80=9D=E6=83=B3=E7=AE=80=E5=8D=95=EF=BC=8C=E4=BD=86=E6=
=98=AF=E5=9C=A8=E5=AE=9E=E7=8E=B0=E6=97=B6=E6=9C=89=E4=B8=80=E4=BA=
=9B=E9=9C=80=E8=A6=81=E6=B3=A8=E6=84=8F=E7=9A=84=E7=BB=86=E8=8A=82=
=EF=BC=9A</p><ol class=3D"wiz-list-level1"><li><p>=E5=9C=A8<span=20=
data-wiz-span=3D"data-wiz-span" style=3D"color: rgb(255, 0, 0);">=
=E8=AE=A1=E7=AE=97 mid =E6=97=B6=E4=B8=8D=E8=83=BD=E4=BD=BF=E7=94=
=A8 mid =3D (l + h) / 2 =E8=BF=99=E7=A7=8D=E6=96=B9=E5=BC=8F=EF=BC=
=8C=E5=9B=A0=E4=B8=BA l + h =E5=8F=AF=E8=83=BD=E4=BC=9A=E5=AF=BC=E8=
=87=B4=E5=8A=A0=E6=B3=95=E6=BA=A2=E5=87=BA=EF=BC=8C=E5=BA=94=E8=AF=
=A5=E4=BD=BF=E7=94=A8 mid =3D l + (h - l) / 2</span>=E3=80=82</p>=
</li><li><p><span style=3D"line-height: 1.7;">=E5=AF=B9 h =E7=9A=84=
=E8=B5=8B=E5=80=BC=E5=92=8C=E5=BE=AA=E7=8E=AF=E6=9D=A1=E4=BB=B6=E6=
=9C=89=E5=85=B3=EF=BC=8C=E5=BD=93=E5=BE=AA=E7=8E=AF=E6=9D=A1=E4=BB=
=B6=E4=B8=BA l &lt;=3D h =E6=97=B6=EF=BC=8Ch =3D mid - 1=EF=BC=9B=
=E5=BD=93=E5=BE=AA=E7=8E=AF=E6=9D=A1=E4=BB=B6=E4=B8=BA l &lt; h =E6=
=97=B6=EF=BC=8Ch =3D mid=E3=80=82=E8=A7=A3=E9=87=8A=E5=A6=82=E4=B8=
=8B=EF=BC=9A=E5=9C=A8=E5=BE=AA=E7=8E=AF=E6=9D=A1=E4=BB=B6=E4=B8=BA=
 l &lt;=3D h =E6=97=B6=EF=BC=8C=E5=A6=82=E6=9E=9C h =3D mid=EF=BC=
=8C=E4=BC=9A=E5=87=BA=E7=8E=B0=E5=BE=AA=E7=8E=AF=E6=97=A0=E6=B3=95=
=E9=80=80=E5=87=BA=E7=9A=84=E6=83=85=E5=86=B5=EF=BC=8C=E4=BE=8B=E5=
=A6=82 l =3D 1=EF=BC=8Ch =3D 1=EF=BC=8C=E6=AD=A4=E6=97=B6 mid =E4=
=B9=9F=E7=AD=89=E4=BA=8E 1=EF=BC=8C=E5=A6=82=E6=9E=9C=E6=AD=A4=E6=
=97=B6=E7=BB=A7=E7=BB=AD=E6=89=A7=E8=A1=8C h =3D mid=EF=BC=8C=E9=82=
=A3=E4=B9=88=E5=B0=B1=E4=BC=9A=E6=97=A0=E9=99=90=E5=BE=AA=E7=8E=AF=
=EF=BC=9B=E5=9C=A8=E5=BE=AA=E7=8E=AF=E6=9D=A1=E4=BB=B6=E4=B8=BA l=
 &lt; h=EF=BC=8C=E5=A6=82=E6=9E=9C h =3D mid - 1=EF=BC=8C=E4=BC=9A=
=E9=94=99=E8=AF=AF=E8=B7=B3=E8=BF=87=E6=9F=A5=E6=89=BE=E7=9A=84=E6=
=95=B0=EF=BC=8C=E4=BE=8B=E5=A6=82=E5=AF=B9=E4=BA=8E=E6=95=B0=E7=BB=
=84 [1,2,3]=EF=BC=8C=E8=A6=81=E6=9F=A5=E6=89=BE 1=EF=BC=8C=E6=9C=80=
=E5=BC=80=E5=A7=8B l =3D 0=EF=BC=8Ch =3D 2=EF=BC=8Cmid =3D 1=EF=BC=
=8C=E5=88=A4=E6=96=AD key &lt; arr[mid] =E6=89=A7=E8=A1=8C h =3D=20=
mid - 1 =3D 0=EF=BC=8C=E6=AD=A4=E6=97=B6=E5=BE=AA=E7=8E=AF=E9=80=80=
=E5=87=BA=EF=BC=8C=E7=9B=B4=E6=8E=A5=E6=8A=8A=E6=9F=A5=E6=89=BE=E7=
=9A=84=E6=95=B0=E8=B7=B3=E8=BF=87=E4=BA=86=E3=80=82</span><span s=
tyle=3D"line-height: 1.7;"><span style=3D"color: rgb(255, 0, 0);"=
>/*h=E4=B8=BA=E5=BE=AA=E7=8E=AF=E6=9F=A5=E6=89=BE=E6=9C=80=E5=A4=A7=
=E4=B8=8B=E6=A0=87=EF=BC=8Cl=E4=B8=BA=E5=BE=AA=E7=8E=AF=E6=9C=80=E5=
=B0=8F=E4=B8=8B=E6=A0=87=EF=BC=8Cmid=E4=B8=BA=E4=B8=AD=E9=97=B4=E6=
=95=B0=E4=B8=8B=E6=A0=87 =EF=BC=8C=E5=88=87=E5=88=86=E6=97=B6=E5=B7=
=A6=E8=BE=B9=E5=A4=9A &nbsp;*/</span></span><br></p></li><li><p>l=
 =E7=9A=84=E8=B5=8B=E5=80=BC=E4=B8=80=E8=88=AC=E9=83=BD=E4=B8=BA=20=
l =3D mid + 1=E3=80=82</p></li></ol><div class=3D"highlight highl=
ight-source-java"><pre><span class=3D"pl-k">public</span> <span c=
lass=3D"pl-k">int</span> search(<span class=3D"pl-k">int</span> k=
ey, <span class=3D"pl-k">int</span>[] arr) {=0A    <span class=3D=
"pl-k">int</span> l <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">0</span>, h <span class=3D"pl-k">=3D</span> arr<span clas=
s=3D"pl-k">.</span>length <span class=3D"pl-k">-</span> <span cla=
ss=3D"pl-c1">1</span>;=0A    <span class=3D"pl-k">while</span> (l=
 <span class=3D"pl-k">&lt;=3D</span> h) {=0A        <span class=3D=
"pl-k">int</span> mid <span class=3D"pl-k">=3D</span> l <span cla=
ss=3D"pl-k">+</span> (h <span class=3D"pl-k">-</span> l) <span cl=
ass=3D"pl-k">/</span> <span class=3D"pl-c1">2</span>;=0A        <=
span class=3D"pl-k">if</span> (key <span class=3D"pl-k">=3D=3D</s=
pan> arr[mid]) <span class=3D"pl-k">return</span> mid;=0A       =20=
<span class=3D"pl-k">if</span> (key <span class=3D"pl-k">&lt;</sp=
an> arr[mid]) h <span class=3D"pl-k">=3D</span> mid <span class=3D=
"pl-k">-</span> <span class=3D"pl-c1">1</span>;=0A        <span c=
lass=3D"pl-k">else</span> l <span class=3D"pl-k">=3D</span> mid <=
span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>;=0A =20=
  }=0A    <span class=3D"pl-k">return</span> <span class=3D"pl-k"=
>-</span><span class=3D"pl-c1">1</span>;=0A}</pre></div><p>=E6=B1=
=82=E5=BC=80=E6=96=B9</p><p><a href=3D"https://leetcode.com/probl=
ems/sqrtx/description/" target=3D"_blank">Leetcode : 69. Sqrt(x)=20=
(Easy)</a></p><p>=E4=B8=80=E4=B8=AA=E6=95=B0 x =E7=9A=84=E5=BC=80=
=E6=96=B9 sqrt =E4=B8=80=E5=AE=9A=E5=9C=A8 0 ~ x =E4=B9=8B=E9=97=B4=
=EF=BC=8C=E5=B9=B6=E4=B8=94=E6=BB=A1=E8=B6=B3 sqrt =3D=3D x / sqr=
t =E3=80=82=E5=8F=AF=E4=BB=A5=E5=88=A9=E7=94=A8=E4=BA=8C=E5=88=86=
=E6=9F=A5=E6=89=BE=E5=9C=A8 0 ~ x =E4=B9=8B=E9=97=B4=E6=9F=A5=E6=89=
=BE sqrt=E3=80=82</p><div class=3D"highlight highlight-source-jav=
a"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">i=
nt</span> mySqrt(<span class=3D"pl-k">int</span> x) {=0A    <span=
 class=3D"pl-k">if</span>(x <span class=3D"pl-k">&lt;=3D</span> <=
span class=3D"pl-c1">1</span>) <span class=3D"pl-k">return</span>=
 x;=0A    <span class=3D"pl-k">int</span> l <span class=3D"pl-k">=
=3D</span> <span class=3D"pl-c1">1</span>, h <span class=3D"pl-k"=
>=3D</span> x;=0A    <span class=3D"pl-k">while</span>(l <span cl=
ass=3D"pl-k">&lt;=3D</span> h){=0A        <span class=3D"pl-k">in=
t</span> mid <span class=3D"pl-k">=3D</span> l <span class=3D"pl-=
k">+</span> (h <span class=3D"pl-k">-</span> l) <span class=3D"pl=
-k">/</span> <span class=3D"pl-c1">2</span>;=0A        <span clas=
s=3D"pl-k">int</span> sqrt <span class=3D"pl-k">=3D</span> x <spa=
n class=3D"pl-k">/</span> mid;=0A        <span class=3D"pl-k">if<=
/span>(sqrt <span class=3D"pl-k">=3D=3D</span> mid) <span class=3D=
"pl-k">return</span> mid;=0A        <span class=3D"pl-k">else</sp=
an> <span class=3D"pl-k">if</span>(sqrt <span class=3D"pl-k">&lt;=
</span> mid) h <span class=3D"pl-k">=3D</span> mid <span class=3D=
"pl-k">-</span> <span class=3D"pl-c1">1</span>;=0A        <span c=
lass=3D"pl-k">else</span> l <span class=3D"pl-k">=3D</span> mid <=
span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>;=0A =20=
  }=0A    <span class=3D"pl-k">return</span> h;=0A}</pre></div><p=
>=E6=91=86=E7=A1=AC=E5=B8=81</p><p><a href=3D"https://leetcode.co=
m/problems/arranging-coins/description/" target=3D"_blank">Leetco=
de : 441. Arranging Coins (Easy)</a></p><div class=3D"highlight h=
ighlight-text-html-basic"><pre>n =3D 8=0A=0AThe coins can form th=
e following rows:=0A=C2=A4=0A=C2=A4 =C2=A4=0A=C2=A4 =C2=A4 =C2=A4=
=0A=C2=A4 =C2=A4=0A=0ABecause the 4th row is incomplete, we retur=
n 3.</pre></div><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E7=
=AC=AC i =E8=A1=8C=E6=91=86 i =E4=B8=AA=EF=BC=8C=E7=BB=9F=E8=AE=A1=
=E8=83=BD=E5=A4=9F=E6=91=86=E7=9A=84=E8=A1=8C=E6=95=B0=E3=80=82</=
p><p>=E8=BF=94=E5=9B=9E h =E8=80=8C=E4=B8=8D=E6=98=AF l=EF=BC=8C=E5=
=9B=A0=E4=B8=BA=E6=91=86=E7=9A=84=E7=A1=AC=E5=B8=81=E6=9C=80=E5=90=
=8E=E4=B8=80=E8=A1=8C=E4=B8=8D=E8=83=BD=E7=AE=97=E8=BF=9B=E5=8E=BB=
=E3=80=82</p><div class=3D"highlight highlight-source-java"><pre>=
<span class=3D"pl-k">public</span> <span class=3D"pl-k">int</span=
> arrangeCoins(<span class=3D"pl-k">int</span> n) {=0A    <span c=
lass=3D"pl-k">int</span> l <span class=3D"pl-k">=3D</span> <span=20=
class=3D"pl-c1">0</span>, h <span class=3D"pl-k">=3D</span> n;=0A=
    <span class=3D"pl-k">while</span>(l <span class=3D"pl-k">&lt;=
=3D</span> h){=0A        <span class=3D"pl-k">int</span> m <span=20=
class=3D"pl-k">=3D</span> l <span class=3D"pl-k">+</span> (h <spa=
n class=3D"pl-k">-</span> l) <span class=3D"pl-k">/</span> <span=20=
class=3D"pl-c1">2</span>;=0A        <span class=3D"pl-k">long</sp=
an> x <span class=3D"pl-k">=3D</span> m <span class=3D"pl-k">*</s=
pan> (m <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1L</s=
pan>) <span class=3D"pl-k">/</span> <span class=3D"pl-c1">2</span=
>;=0A        <span class=3D"pl-k">if</span>(x <span class=3D"pl-k=
">=3D=3D</span> n) <span class=3D"pl-k">return</span> m;=0A     =20=
  <span class=3D"pl-k">else</span> <span class=3D"pl-k">if</span>=
(x <span class=3D"pl-k">&lt;</span> n) l <span class=3D"pl-k">=3D=
</span> m <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</=
span>;=0A        <span class=3D"pl-k">else</span> h <span class=3D=
"pl-k">=3D</span> m <span class=3D"pl-k">-</span> <span class=3D"=
pl-c1">1</span>;=0A    }=0A    <span class=3D"pl-k">return</span>=
 h;=0A}</pre></div><p>=E5=8F=AF=E4=BB=A5=E4=B8=8D=E7=94=A8=E4=BA=8C=
=E5=88=86=E6=9F=A5=E6=89=BE=EF=BC=8C=E6=9B=B4=E7=9B=B4=E8=A7=82=E7=
=9A=84=E8=A7=A3=E6=B3=95=E5=A6=82=E4=B8=8B=EF=BC=9A</p><div class=
=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">pu=
blic</span> <span class=3D"pl-k">int</span> arrangeCoins(<span cl=
ass=3D"pl-k">int</span> n) {=0A    <span class=3D"pl-k">int</span=
> level <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</=
span>;=0A    <span class=3D"pl-k">while</span> (n <span class=3D"=
pl-k">&gt;</span> <span class=3D"pl-c1">0</span>) {=0A        n <=
span class=3D"pl-k">-=3D</span> level;=0A        level<span class=
=3D"pl-k">++</span>;=0A    }=0A    <span class=3D"pl-k">return</s=
pan> n <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0=
</span> <span class=3D"pl-k">?</span> level <span class=3D"pl-k">=
-</span> <span class=3D"pl-c1">1</span> <span class=3D"pl-k">:</s=
pan> level <span class=3D"pl-k">-</span> <span class=3D"pl-c1">2<=
/span>;=0A}</pre></div><p>=E6=9C=89=E5=BA=8F=E6=95=B0=E7=BB=84=E7=
=9A=84 Single Element</p><p><a href=3D"https://leetcode.com/probl=
ems/single-element-in-a-sorted-array/description/" target=3D"_bla=
nk">Leetcode : 540. Single Element in a Sorted Array (Medium)</a>=
</p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E4=B8=80=E4=B8=
=AA=E6=9C=89=E5=BA=8F=E6=95=B0=E7=BB=84=E5=8F=AA=E6=9C=89=E4=B8=80=
=E4=B8=AA=E6=95=B0=E4=B8=8D=E5=87=BA=E7=8E=B0=E4=B8=A4=E6=AC=A1=EF=
=BC=8C=E6=89=BE=E5=87=BA=E8=BF=99=E4=B8=AA=E6=95=B0=E3=80=82</p><=
div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> singleNonDup=
licate(<span class=3D"pl-k">int</span>[] nums) {=0A    <span clas=
s=3D"pl-k">int</span> l <span class=3D"pl-k">=3D</span> <span cla=
ss=3D"pl-c1">0</span>, h <span class=3D"pl-k">=3D</span> nums<spa=
n class=3D"pl-k">.</span>length <span class=3D"pl-k">-</span> <sp=
an class=3D"pl-c1">1</span>;=0A    <span class=3D"pl-k">while</sp=
an>(l <span class=3D"pl-k">&lt;</span> h) {=0A        <span class=
=3D"pl-k">int</span> m <span class=3D"pl-k">=3D</span> l <span cl=
ass=3D"pl-k">+</span> (h <span class=3D"pl-k">-</span> l) <span c=
lass=3D"pl-k">/</span> <span class=3D"pl-c1">2</span>;=0A       =20=
<span class=3D"pl-k">if</span>(m <span class=3D"pl-k">%</span> <s=
pan class=3D"pl-c1">2</span> <span class=3D"pl-k">=3D=3D</span> <=
span class=3D"pl-c1">1</span>) m<span class=3D"pl-k">--</span>; <=
span class=3D"pl-c"><span class=3D"pl-c">//</span> =E4=BF=9D=E8=AF=
=81 l/h/m =E9=83=BD=E5=9C=A8=E5=81=B6=E6=95=B0=E4=BD=8D=EF=BC=8C=E4=
=BD=BF=E5=BE=97=E6=9F=A5=E6=89=BE=E5=8C=BA=E9=97=B4=E5=A4=A7=E5=B0=
=8F=E4=B8=80=E7=9B=B4=E9=83=BD=E6=98=AF=E5=A5=87=E6=95=B0</span>=0A=
        <span class=3D"pl-k">if</span>(nums[m] <span class=3D"pl-=
k">=3D=3D</span> nums[m <span class=3D"pl-k">+</span> <span class=
=3D"pl-c1">1</span>]) l <span class=3D"pl-k">=3D</span> m <span c=
lass=3D"pl-k">+</span> <span class=3D"pl-c1">2</span>;=0A       =20=
<span class=3D"pl-k">else</span> h <span class=3D"pl-k">=3D</span=
> m;=0A    }=0A    <span class=3D"pl-k">return</span> nums[l];=0A=
}</pre></div><h2>=E8=B4=AA=E5=BF=83=E6=80=9D=E6=83=B3</h2><p>=E8=B4=
=AA=E5=BF=83=E6=80=9D=E6=83=B3=E4=BF=9D=E8=AF=81=E6=AF=8F=E6=AC=A1=
=E6=93=8D=E4=BD=9C=E9=83=BD=E6=98=AF=E5=B1=80=E9=83=A8=E6=9C=80=E4=
=BC=98=E7=9A=84=EF=BC=8C=E5=B9=B6=E4=B8=94=E6=9C=80=E5=90=8E=E5=BE=
=97=E5=88=B0=E7=9A=84=E7=BB=93=E6=9E=9C=E6=98=AF=E5=85=A8=E5=B1=80=
=E6=9C=80=E4=BC=98=E7=9A=84=E3=80=82</p><p>=E5=88=86=E9=85=8D=E9=A5=
=BC=E5=B9=B2</p><p><a href=3D"https://leetcode.com/problems/assig=
n-cookies/description/" target=3D"_blank">Leetcode : 455. Assign=20=
Cookies (Easy)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=
=9A=E6=AF=8F=E4=B8=AA=E5=AD=A9=E5=AD=90=E9=83=BD=E6=9C=89=E4=B8=80=
=E4=B8=AA=E6=BB=A1=E8=B6=B3=E5=BA=A6=EF=BC=8C=E6=AF=8F=E4=B8=AA=E9=
=A5=BC=E5=B9=B2=E9=83=BD=E6=9C=89=E4=B8=80=E4=B8=AA=E5=A4=A7=E5=B0=
=8F=EF=BC=8C=E5=8F=AA=E6=9C=89=E9=A5=BC=E5=B9=B2=E7=9A=84=E5=A4=A7=
=E5=B0=8F=E5=A4=A7=E4=BA=8E=E4=B8=80=E4=B8=AA=E5=AD=A9=E5=AD=90=E7=
=9A=84=E6=BB=A1=E8=B6=B3=E5=BA=A6=EF=BC=8C=E8=AF=A5=E5=AD=A9=E5=AD=
=90=E6=89=8D=E4=BC=9A=E8=8E=B7=E5=BE=97=E6=BB=A1=E8=B6=B3=E3=80=82=
=E6=B1=82=E8=A7=A3=E6=9C=80=E5=A4=9A=E5=8F=AF=E4=BB=A5=E8=8E=B7=E5=
=BE=97=E6=BB=A1=E8=B6=B3=E7=9A=84=E5=AD=A9=E5=AD=90=E6=95=B0=E9=87=
=8F=E3=80=82</p><p>=E5=9B=A0=E4=B8=BA=E6=9C=80=E5=B0=8F=E7=9A=84=E5=
=AD=A9=E5=AD=90=E6=9C=80=E5=AE=B9=E6=98=93=E5=BE=97=E5=88=B0=E6=BB=
=A1=E8=B6=B3=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=85=88=E6=BB=A1=E8=B6=B3=
=E6=9C=80=E5=B0=8F=E5=AD=A9=E5=AD=90=E3=80=82=E7=BB=99=E4=B8=80=E4=
=B8=AA=E5=AD=A9=E5=AD=90=E7=9A=84=E9=A5=BC=E5=B9=B2=E5=BA=94=E5=BD=
=93=E5=B0=BD=E9=87=8F=E5=B0=8F=E5=8F=88=E8=83=BD=E6=BB=A1=E8=B6=B3=
=E8=AF=A5=E5=AD=A9=E5=AD=90=EF=BC=8C=E8=BF=99=E6=A0=B7=E5=A4=A7=E9=
=A5=BC=E5=B9=B2=E5=B0=B1=E8=83=BD=E6=8B=BF=E6=9D=A5=E7=BB=99=E6=BB=
=A1=E8=B6=B3=E5=BA=A6=E6=AF=94=E8=BE=83=E5=A4=A7=E7=9A=84=E5=AD=A9=
=E5=AD=90=E3=80=82</p><p>=E8=AF=81=E6=98=8E=EF=BC=9A=E5=81=87=E8=AE=
=BE=E5=9C=A8=E6=9F=90=E6=AC=A1=E9=80=89=E6=8B=A9=E4=B8=AD=EF=BC=8C=
=E8=B4=AA=E5=BF=83=E7=AD=96=E7=95=A5=E9=80=89=E6=8B=A9=E7=BB=99=E7=
=AC=AC i =E4=B8=AA=E5=AD=A9=E5=AD=90=E5=88=86=E9=85=8D=E7=AC=AC m=
 =E4=B8=AA=E9=A5=BC=E5=B9=B2=EF=BC=8C=E5=B9=B6=E4=B8=94=E7=AC=AC=20=
i =E4=B8=AA=E5=AD=A9=E5=AD=90=E6=BB=A1=E8=B6=B3=E5=BA=A6=E6=9C=80=
=E5=B0=8F=EF=BC=8C=E7=AC=AC m =E4=B8=AA=E9=A5=BC=E5=B9=B2=E4=B8=BA=
=E5=8F=AF=E4=BB=A5=E6=BB=A1=E8=B6=B3=E7=AC=AC i =E4=B8=AA=E5=AD=A9=
=E5=AD=90=E7=9A=84=E6=9C=80<a href=3D"https://www.baidu.com/s?wd=3D=
%E5%B0%8F%E9%A5%BC%E5%B9%B2&amp;tn=3D24004469_oem_dg&amp;rsv_dl=3D=
gh_pl_sl_csd" target=3D"_blank">=E5=B0=8F=E9=A5=BC=E5=B9=B2</a>=EF=
=BC=8C=E5=88=A9=E7=94=A8=E8=B4=AA=E5=BF=83=E7=AD=96=E7=95=A5=E6=9C=
=80=E7=BB=88=E5=8F=AF=E4=BB=A5=E6=BB=A1=E8=B6=B3 k =E4=B8=AA=E5=AD=
=A9=E5=AD=90=E3=80=82=E5=81=87=E8=AE=BE=E6=9C=80=E4=BC=98=E7=AD=96=
=E7=95=A5=E5=9C=A8=E8=BF=99=E6=AC=A1=E9=80=89=E6=8B=A9=E4=B8=AD=E7=
=BB=99 i =E4=B8=AA=E5=AD=A9=E5=AD=90=E5=88=86=E9=85=8D=E7=AC=AC n=
 =E4=B8=AA=E9=A5=BC=E5=B9=B2=EF=BC=8C=E5=B9=B6=E4=B8=94=E8=BF=99=E4=
=B8=AA=E9=A5=BC=E5=B9=B2=E5=A4=A7=E4=BA=8E=E7=AC=AC m =E4=B8=AA=E9=
=A5=BC=E5=B9=B2=E3=80=82=E6=88=91=E4=BB=AC=E5=8F=91=E7=8E=B0=E4=BD=
=BF=E7=94=A8=E7=AC=AC m =E4=B8=AA=E9=A5=BC=E5=B9=B2=E5=8E=BB=E6=9B=
=BF=E4=BB=A3=E7=AC=AC n =E4=B8=AA=E9=A5=BC=E5=B9=B2=E5=AE=8C=E5=85=
=A8=E4=B8=8D=E5=BD=B1=E5=93=8D=E5=90=8E=E7=BB=AD=E7=9A=84=E7=BB=93=
=E6=9E=9C=EF=BC=8C=E5=9B=A0=E6=AD=A4=E4=B8=8D=E5=AD=98=E5=9C=A8=E6=
=AF=94=E8=B4=AA=E5=BF=83=E7=AD=96=E7=95=A5=E6=9B=B4=E4=BC=98=E7=9A=
=84=E7=AD=96=E7=95=A5=EF=BC=8C=E5=8D=B3=E8=B4=AA=E5=BF=83=E7=AD=96=
=E7=95=A5=E5=B0=B1=E6=98=AF=E6=9C=80=E4=BC=98=E7=AD=96=E7=95=A5=E3=
=80=82</p><div class=3D"highlight highlight-source-java"><pre><sp=
an class=3D"pl-k">public</span> <span class=3D"pl-k">int</span> f=
indContentChildren(<span class=3D"pl-k">int</span>[] g, <span cla=
ss=3D"pl-k">int</span>[] s) {=0A    <span class=3D"pl-smi">Arrays=
</span><span class=3D"pl-k">.</span>sort(g);=0A    <span class=3D=
"pl-smi">Arrays</span><span class=3D"pl-k">.</span>sort(s);=0A  =20=
 <span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-c1">0</span>, j <span class=3D"pl-k">=3D</spa=
n> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">whi=
le</span>(i <span class=3D"pl-k">&lt;</span> g<span class=3D"pl-k=
">.</span>length <span class=3D"pl-k">&amp;&amp;</span> j <span c=
lass=3D"pl-k">&lt;</span> s<span class=3D"pl-k">.</span>length){=0A=
        <span class=3D"pl-k">if</span>(g[i] <span class=3D"pl-k">=
&lt;=3D</span> s[j]) i<span class=3D"pl-k">++</span>;=0A        j=
<span class=3D"pl-k">++</span>;=0A    }=0A    <span class=3D"pl-k=
">return</span> i;=0A}</pre></div><p>=E6=8A=95=E9=A3=9E=E9=95=96=E5=
=88=BA=E7=A0=B4=E6=B0=94=E7=90=83</p><p><a href=3D"https://leetco=
de.com/problems/minimum-number-of-arrows-to-burst-balloons/descri=
ption/" target=3D"_blank">Leetcode : 452. Minimum Number of Arrow=
s to Burst Balloons (Medium)</a></p><pre><ol class=3D"hljs-ln wiz=
-list-level1" style=3D"background-image: initial; background-atta=
chment: initial; background-size: initial; background-origin: ini=
tial; background-clip: initial; background-position: initial; bac=
kground-repeat: initial;"><li><div class=3D"hljs-ln-line hljs-ln-=
n" data-line-number=3D"1" style=3D"text-align: right;"></div><div=
 class=3D"hljs-ln-line"><span class=3D"hljs-selector-tag">Input</=
span>:</div></li><li><div class=3D"hljs-ln-line hljs-ln-n" data-l=
ine-number=3D"2" style=3D"text-align: right;"></div><div class=3D=
"hljs-ln-line"><span class=3D"hljs-selector-attr">[[10,16]</span>=
, <span class=3D"hljs-selector-attr">[2,8]</span>, <span class=3D=
"hljs-selector-attr">[1,6]</span>, <span class=3D"hljs-selector-a=
ttr">[7,12]</span>]</div></li><li><div class=3D"hljs-ln-line hljs=
-ln-n" data-line-number=3D"3" style=3D"text-align: right;"></div>=
<div class=3D"hljs-ln-line"> </div></li><li><div class=3D"hljs-ln=
-line hljs-ln-n" data-line-number=3D"4" style=3D"text-align: righ=
t;"></div><div class=3D"hljs-ln-line"><span class=3D"hljs-selecto=
r-tag">Output</span>:</div></li><li><div class=3D"hljs-ln-line hl=
js-ln-n" data-line-number=3D"5" style=3D"text-align: right;"></di=
v><div class=3D"hljs-ln-line">2</div></li></ol></pre><p>=E9=A2=98=
=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E6=B0=94=E7=90=83=E5=9C=A8=E4=
=B8=80=E4=B8=AA=E6=B0=B4=E5=B9=B3=E6=95=B0=E8=BD=B4=E4=B8=8A=E6=91=
=86=E6=94=BE=EF=BC=8C=E5=8F=AF=E4=BB=A5=E9=87=8D=E5=8F=A0=EF=BC=8C=
=E9=A3=9E=E9=95=96=E5=9E=82=E7=9B=B4=E5=B0=84=E5=90=91=E5=9D=90=E6=
=A0=87=E8=BD=B4=EF=BC=8C=E4=BD=BF=E5=BE=97=E8=B7=AF=E5=BE=84=E4=B8=
=8A=E7=9A=84=E6=B0=94=E7=90=83=E9=83=BD=E4=BC=9A=E5=88=BA=E7=A0=B4=
=E3=80=82=E6=B1=82=E8=A7=A3=E6=9C=80=E5=B0=8F=E7=9A=84=E6=8A=95=E9=
=A3=9E=E9=95=96=E6=AC=A1=E6=95=B0=E4=BD=BF=E6=89=80=E6=9C=89=E6=B0=
=94=E7=90=83=E9=83=BD=E8=A2=AB=E5=88=BA=E7=A0=B4=E3=80=82</p><p>=E4=
=BB=8E=E5=B7=A6=E5=BE=80=E5=8F=B3=E6=8A=95=E9=A3=9E=E9=95=96=EF=BC=
=8C=E5=B9=B6=E4=B8=94=E5=9C=A8=E6=AF=8F=E6=AC=A1=E6=8A=95=E9=A3=9E=
=E9=95=96=E6=97=B6=E6=BB=A1=E8=B6=B3=E4=BB=A5=E4=B8=8B=E6=9D=A1=E4=
=BB=B6=EF=BC=9A</p><ol class=3D"wiz-list-level1"><li>=E5=B7=A6=E8=
=BE=B9=E5=B7=B2=E7=BB=8F=E6=B2=A1=E6=9C=89=E6=B0=94=E7=90=83=E4=BA=
=86=EF=BC=9B</li><li>=E6=9C=AC=E6=AC=A1=E6=8A=95=E9=A3=9E=E9=95=96=
=E8=83=BD=E5=A4=9F=E5=88=BA=E7=A0=B4=E6=9C=80=E5=A4=9A=E7=9A=84=E6=
=B0=94=E7=90=83=E3=80=82<span data-wiz-span=3D"data-wiz-span" sty=
le=3D"color: rgb(255, 0, 0);">/*=E5=85=88=E6=8C=89=E5=A4=A7=E5=80=
=BC=E6=8E=92=E5=BA=8F =EF=BC=8C=E6=9C=80=E5=B7=A6=E8=BE=B9=E7=9A=84=
=E5=A4=A7=E5=80=BC=E5=A4=A7=E4=BA=8E=E5=85=B6=E4=BB=96=E7=9A=84=E5=
=B0=8F=E5=80=BC=E7=AE=97=E5=81=9A=E5=90=8C=E6=97=B6=E5=88=BA=E7=A0=
=B4*/</span></li></ol><div class=3D"highlight highlight-source-ja=
va"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">=
int</span> findMinArrowShots(<span class=3D"pl-k">int</span>[][]=20=
points) { =0A    <span class=3D"pl-k">if</span>(points<span class=
=3D"pl-k">.</span>length <span class=3D"pl-k">=3D=3D</span> <span=
 class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> <sp=
an class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-smi">Arrays<=
/span><span class=3D"pl-k">.</span>sort(points,(a,b) <span class=3D=
"pl-k">-</span><span class=3D"pl-k">&gt;</span> (a[<span class=3D=
"pl-c1">1</span>] <span class=3D"pl-k">-</span> b[<span class=3D"=
pl-c1">1</span>]));=0A    <span class=3D"pl-k">int</span> curPos=20=
<span class=3D"pl-k">=3D</span> points[<span class=3D"pl-c1">0</s=
pan>][<span class=3D"pl-c1">1</span>];=0A    <span class=3D"pl-k"=
>int</span> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-c1">1</span>;=0A    <span class=3D"pl-k">for</span> (<span class=
=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span clas=
s=3D"pl-c1">1</span>; i <span class=3D"pl-k">&lt;</span> points<s=
pan class=3D"pl-k">.</span>length; i<span class=3D"pl-k">++</span=
>) {=0A        <span class=3D"pl-k">if</span>(points[i][<span cla=
ss=3D"pl-c1">0</span>] <span class=3D"pl-k">&lt;=3D</span> curPos=
) {=0A            <span class=3D"pl-k">continue</span>;=0A      =20=
 }=0A        curPos <span class=3D"pl-k">=3D</span> points[i][<sp=
an class=3D"pl-c1">1</span>];=0A        ret<span class=3D"pl-k">+=
+</span>;=0A    }=0A    <span class=3D"pl-k">return</span> ret;=0A=
 }</pre></div><p>=E8=82=A1=E7=A5=A8=E7=9A=84=E6=9C=80=E5=A4=A7=E6=
=94=B6=E7=9B=8A</p><p><a href=3D"https://leetcode.com/problems/be=
st-time-to-buy-and-sell-stock-ii/description/" target=3D"_blank">=
Leetcode : 122. Best Time to Buy and Sell Stock II (Easy)</a></p>=
<p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E4=B8=80=E6=AC=A1=
=E4=BA=A4=E6=98=93=E5=8C=85=E5=90=AB=E4=B9=B0=E5=85=A5=E5=92=8C=E5=
=8D=96=E5=87=BA=EF=BC=8C=E5=A4=9A=E4=B8=AA=E4=BA=A4=E6=98=93=E4=B9=
=8B=E9=97=B4=E4=B8=8D=E8=83=BD=E4=BA=A4=E5=8F=89=E8=BF=9B=E8=A1=8C=
=E3=80=82</p><p>=E5=AF=B9=E4=BA=8E [a, b, c, d]=EF=BC=8C=E5=A6=82=
=E6=9E=9C=E6=9C=89 a &lt;=3D b &lt;=3D c &lt;=3D d =EF=BC=8C=E9=82=
=A3=E4=B9=88=E6=9C=80=E5=A4=A7=E6=94=B6=E7=9B=8A=E4=B8=BA d - a=E3=
=80=82=E8=80=8C d - a =3D (d - c) + (c - b) + (b - a) =EF=BC=8C=E5=
=9B=A0=E6=AD=A4=E5=BD=93=E8=AE=BF=E9=97=AE=E5=88=B0=E4=B8=80=E4=B8=
=AA prices[i] =E4=B8=94 prices[i] - prices[i-1] &gt; 0=EF=BC=8C=E9=
=82=A3=E4=B9=88=E5=B0=B1=E6=8A=8A prices[i] - prices[i-1] =E6=B7=BB=
=E5=8A=A0=E5=8A=A0=E5=88=B0=E6=94=B6=E7=9B=8A=E4=B8=AD=EF=BC=8C=E4=
=BB=8E=E8=80=8C=E5=9C=A8=E5=B1=80=E9=83=A8=E6=9C=80=E4=BC=98=E7=9A=
=84=E6=83=85=E5=86=B5=E4=B8=8B=E4=B9=9F=E4=BF=9D=E8=AF=81=E5=85=A8=
=E5=B1=80=E6=9C=80=E4=BC=98=E3=80=82</p><div class=3D"highlight h=
ighlight-source-java"><pre><span class=3D"pl-k">public</span> <sp=
an class=3D"pl-k">int</span> maxProfit(<span class=3D"pl-k">int</=
span>[] prices) {=0A    <span class=3D"pl-k">int</span> profit <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A=20=
   <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</span=
> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span=
>; i <span class=3D"pl-k">&lt;</span> prices<span class=3D"pl-k">=
.</span>length; i<span class=3D"pl-k">++</span>){=0A        <span=
 class=3D"pl-k">if</span>(prices[i] <span class=3D"pl-k">&gt;</sp=
an> prices[i<span class=3D"pl-k">-</span><span class=3D"pl-c1">1<=
/span>]) profit <span class=3D"pl-k">+=3D</span> (prices[i] <span=
 class=3D"pl-k">-</span> prices[i<span class=3D"pl-k">-</span><sp=
an class=3D"pl-c1">1</span>]);=0A    }=0A    <span class=3D"pl-k"=
>return</span> profit;=0A}</pre></div><p>=E7=A7=8D=E6=A4=8D=E8=8A=
=B1=E6=9C=B5</p><p><a href=3D"https://leetcode.com/problems/can-p=
lace-flowers/description/" target=3D"_blank">Leetcode : 605. Can=20=
Place Flowers (Easy)</a></p><div class=3D"highlight highlight-tex=
t-html-basic"><pre>Input: flowerbed =3D [1,0,0,0,1], n =3D 1=0AOu=
tput: True</pre></div><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=
=9A=E8=8A=B1=E6=9C=B5=E4=B9=8B=E9=97=B4=E8=87=B3=E5=B0=91=E9=9C=80=
=E8=A6=81=E4=B8=80=E4=B8=AA=E5=8D=95=E4=BD=8D=E7=9A=84=E9=97=B4=E9=
=9A=94=E3=80=82</p><div class=3D"highlight highlight-source-java"=
><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">boo=
lean</span> canPlaceFlowers(<span class=3D"pl-k">int</span>[] flo=
werbed, <span class=3D"pl-k">int</span> n) {=0A    <span class=3D=
"pl-k">int</span> cnt <span class=3D"pl-k">=3D</span> <span class=
=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">for</span>(<span=20=
class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span=
 class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> flo=
werbed<span class=3D"pl-k">.</span>length; i<span class=3D"pl-k">=
++</span>){=0A        <span class=3D"pl-k">if</span>(flowerbed[i]=
 <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">1</span=
>) <span class=3D"pl-k">continue</span>;=0A        <span class=3D=
"pl-k">int</span> pre <span class=3D"pl-k">=3D</span> i <span cla=
ss=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span> <span cl=
ass=3D"pl-k">?</span> <span class=3D"pl-c1">0</span> <span class=3D=
"pl-k">:</span> flowerbed[i <span class=3D"pl-k">-</span> <span c=
lass=3D"pl-c1">1</span>];=0A        <span class=3D"pl-k">int</spa=
n> next <span class=3D"pl-k">=3D</span> i <span class=3D"pl-k">=3D=
=3D</span> flowerbed<span class=3D"pl-k">.</span>length <span cla=
ss=3D"pl-k">-</span> <span class=3D"pl-c1">1</span> <span class=3D=
"pl-k">?</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-=
k">:</span> flowerbed[i <span class=3D"pl-k">+</span> <span class=
=3D"pl-c1">1</span>];=0A        <span class=3D"pl-k">if</span>(pr=
e <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</spa=
n> <span class=3D"pl-k">&amp;&amp;</span> next <span class=3D"pl-=
k">=3D=3D</span> <span class=3D"pl-c1">0</span>) {=0A           =20=
cnt<span class=3D"pl-k">++</span>;=0A            flowerbed[i] <sp=
an class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span>;=0A =20=
      }=0A    }=0A    <span class=3D"pl-k">return</span> cnt <spa=
n class=3D"pl-k">&gt;=3D</span> n;=0A}</pre></div><p>=E4=BF=AE=E6=
=94=B9=E4=B8=80=E4=B8=AA=E6=95=B0=E6=88=90=E4=B8=BA=E9=9D=9E=E9=80=
=92=E5=87=8F=E6=95=B0=E7=BB=84</p><p><a href=3D"https://leetcode.=
com/problems/non-decreasing-array/description/" target=3D"_blank"=
>Leetcode : 665. Non-decreasing Array (Easy)</a></p><p>=E9=A2=98=E7=
=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E5=88=A4=E6=96=AD=E4=B8=80=E4=B8=
=AA=E6=95=B0=E7=BB=84=E8=83=BD=E4=B8=8D=E8=83=BD=E5=8F=AA=E4=BF=AE=
=E6=94=B9=E4=B8=80=E4=B8=AA=E6=95=B0=E5=B0=B1=E6=88=90=E4=B8=BA=E9=
=9D=9E=E9=80=92=E5=87=8F=E6=95=B0=E7=BB=84=E3=80=82</p><p>=E5=9C=A8=
=E5=87=BA=E7=8E=B0 nums[i] &lt; nums[i - 1] =E6=97=B6=EF=BC=8C=E9=
=9C=80=E8=A6=81=E8=80=83=E8=99=91=E7=9A=84=E6=98=AF=E5=BA=94=E8=AF=
=A5=E4=BF=AE=E6=94=B9=E6=95=B0=E7=BB=84=E7=9A=84=E5=93=AA=E4=B8=AA=
=E6=95=B0=EF=BC=8C=E4=BD=BF=E5=BE=97=E6=9C=AC=E6=AC=A1=E4=BF=AE=E6=
=94=B9=E8=83=BD=E4=BD=BF i =E4=B9=8B=E5=89=8D=E7=9A=84=E6=95=B0=E7=
=BB=84=E6=88=90=E4=B8=BA=E9=9D=9E=E9=80=92=E5=87=8F=E6=95=B0=E7=BB=
=84=EF=BC=8C=E5=B9=B6=E4=B8=94<span class=3D"Apple-converted-spac=
e">&nbsp;</span>=E4=B8=8D=E5=BD=B1=E5=93=8D=E5=90=8E=E7=BB=AD=E7=9A=
=84=E6=93=8D=E4=BD=9C=E3=80=82=E4=BC=98=E5=85=88=E8=80=83=E8=99=91=
=E4=BB=A4 nums[i - 1] =3D nums[i]=EF=BC=8C=E5=9B=A0=E4=B8=BA=E5=A6=
=82=E6=9E=9C=E4=BF=AE=E6=94=B9 nums[i] =3D nums[i - 1] =E7=9A=84=E8=
=AF=9D=EF=BC=8C=E9=82=A3=E4=B9=88 nums[i] =E8=BF=99=E4=B8=AA=E6=95=
=B0=E4=BC=9A=E5=8F=98=E5=A4=A7=EF=BC=8C=E9=82=A3=E4=B9=88=E5=B0=B1=
=E6=9C=89=E5=8F=AF=E8=83=BD=E6=AF=94 nums[i + 1] =E5=A4=A7=EF=BC=8C=
=E4=BB=8E=E8=80=8C=E5=BD=B1=E5=93=8D=E4=BA=86=E5=90=8E=E7=BB=AD=E6=
=93=8D=E4=BD=9C=E3=80=82=E8=BF=98=E6=9C=89=E4=B8=80=E4=B8=AA=E6=AF=
=94=E8=BE=83=E7=89=B9=E5=88=AB=E7=9A=84=E6=83=85=E5=86=B5=E5=B0=B1=
=E6=98=AF nums[i] &lt; nums[i - 2]=EF=BC=8C=E5=8F=AA=E4=BF=AE=E6=94=
=B9 nums[i - 1] =3D nums[i] =E4=B8=8D=E8=83=BD=E4=BB=A4=E6=95=B0=E7=
=BB=84=E6=88=90=E4=B8=BA=E9=9D=9E=E9=80=92=E5=87=8F=EF=BC=8C=E5=8F=
=AA=E8=83=BD=E9=80=9A=E8=BF=87=E4=BF=AE=E6=94=B9 nums[i] =3D nums=
[i - 1] =E6=89=8D=E8=A1=8C=E3=80=82</p><div class=3D"highlight hi=
ghlight-source-java"><pre><span class=3D"pl-k">public</span> <spa=
n class=3D"pl-k">boolean</span> checkPossibility(<span class=3D"p=
l-k">int</span>[] nums) {=0A    <span class=3D"pl-k">int</span> c=
nt <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>=
;=0A    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int<=
/span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1<=
/span>; i <span class=3D"pl-k">&lt;</span> nums<span class=3D"pl-=
k">.</span>length; i<span class=3D"pl-k">++</span>){=0A        <s=
pan class=3D"pl-k">if</span>(nums[i] <span class=3D"pl-k">&lt;</s=
pan> nums[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1=
</span>]){=0A            cnt<span class=3D"pl-k">++</span>;=0A  =20=
         <span class=3D"pl-k">if</span>(i <span class=3D"pl-k">-<=
/span> <span class=3D"pl-c1">2</span> <span class=3D"pl-k">&gt;=3D=
</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;=
&amp;</span> nums[i <span class=3D"pl-k">-</span> <span class=3D"=
pl-c1">2</span>] <span class=3D"pl-k">&gt;</span> nums[i]) nums[i=
] <span class=3D"pl-k">=3D</span> nums[i<span class=3D"pl-k">-</s=
pan><span class=3D"pl-c1">1</span>];=0A            <span class=3D=
"pl-k">else</span> nums[i <span class=3D"pl-k">-</span> <span cla=
ss=3D"pl-c1">1</span>] <span class=3D"pl-k">=3D</span> nums[i];=0A=
        }=0A    }=0A    <span class=3D"pl-k">return</span> cnt <s=
pan class=3D"pl-k">&lt;=3D</span> <span class=3D"pl-c1">1</span>;=
=0A}</pre></div><p>=E5=88=A4=E6=96=AD=E6=98=AF=E5=90=A6=E4=B8=BA=E5=
=AD=90=E4=B8=B2</p><p><a href=3D"https://leetcode.com/problems/is=
-subsequence/description/" target=3D"_blank">Leetcode : 392. Is S=
ubsequence (Medium)</a></p><div class=3D"highlight highlight-text=
-html-basic"><pre>s =3D "abc", t =3D "ahbgdc"=0AReturn true.</pre=
></div><div class=3D"highlight highlight-source-java"><pre><span=20=
class=3D"pl-k">public</span> <span class=3D"pl-k">boolean</span>=20=
isSubsequence(<span class=3D"pl-smi">String</span> s, <span class=
=3D"pl-smi">String</span> t) {=0A    <span class=3D"pl-k">for</sp=
an> (<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</=
span> <span class=3D"pl-c1">0</span>, pos <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&l=
t;</span> s<span class=3D"pl-k">.</span>length(); i<span class=3D=
"pl-k">++</span>, pos<span class=3D"pl-k">++</span>) {=0A       =20=
pos <span class=3D"pl-k">=3D</span> t<span class=3D"pl-k">.</span=
>indexOf(s<span class=3D"pl-k">.</span>charAt(i), pos);=0A      =20=
 <span class=3D"pl-k">if</span>(pos <span class=3D"pl-k">=3D=3D</=
span> <span class=3D"pl-k">-</span><span class=3D"pl-c1">1</span>=
) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">false<=
/span>;=0A    }=0A    <span class=3D"pl-k">return</span> <span cl=
ass=3D"pl-c1">true</span>;=0A}</pre></div><p>=E5=88=86=E9=9A=94=E5=
=AD=97=E7=AC=A6=E4=B8=B2=E4=BD=BF=E5=90=8C=E7=A7=8D=E5=AD=97=E7=AC=
=A6=E5=87=BA=E7=8E=B0=E5=9C=A8=E4=B8=80=E8=B5=B7</p><p><a href=3D=
"https://leetcode.com/problems/partition-labels/description/" tar=
get=3D"_blank">Leetcode : 763. Partition Labels (Medium)</a></p><=
div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-smi">Input</span><span class=3D"pl-k">:</span> <span class=3D=
"pl-smi">S</span> <span class=3D"pl-k">=3D</span> <span class=3D"=
pl-s"><span class=3D"pl-pds">"</span>ababcbacadefegdehijhklij<spa=
n class=3D"pl-pds">"</span></span>=0A<span class=3D"pl-smi">Outpu=
t</span><span class=3D"pl-k">:</span> [<span class=3D"pl-c1">9</s=
pan>,<span class=3D"pl-c1">7</span>,<span class=3D"pl-c1">8</span=
>]=0A<span class=3D"pl-smi">Explanation</span><span class=3D"pl-k=
">:</span>=0A<span class=3D"pl-smi">The</span> partition is <span=
 class=3D"pl-s"><span class=3D"pl-pds">"</span>ababcbaca<span cla=
ss=3D"pl-pds">"</span></span>, <span class=3D"pl-s"><span class=3D=
"pl-pds">"</span>defegde<span class=3D"pl-pds">"</span></span>, <=
span class=3D"pl-s"><span class=3D"pl-pds">"</span>hijhklij<span=20=
class=3D"pl-pds">"</span></span><span class=3D"pl-c1">.</span>=0A=
<span class=3D"pl-smi">This</span> is a partition so that each le=
tter appears in at most one part.=0A<span class=3D"pl-smi">A</spa=
n> partition like <span class=3D"pl-s"><span class=3D"pl-pds">"</=
span>ababcbacadefegde<span class=3D"pl-pds">"</span></span>, <spa=
n class=3D"pl-s"><span class=3D"pl-pds">"</span>hijhklij<span cla=
ss=3D"pl-pds">"</span></span> is incorrect, because it splits <sp=
an class=3D"pl-smi">S</span> into less parts.</pre></div><div cla=
ss=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">=
public</span> <span class=3D"pl-k">List&lt;<span class=3D"pl-smi"=
>Integer</span>&gt;</span> partitionLabels(<span class=3D"pl-smi"=
>String</span> <span class=3D"pl-smi">S</span>) {=0A    <span cla=
ss=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</sp=
an> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new<=
/span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <sp=
an class=3D"pl-k">int</span>[] lastIdxs <span class=3D"pl-k">=3D<=
/span> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">int=
</span>[<span class=3D"pl-c1">26</span>];=0A    <span class=3D"pl=
-k">for</span>(<span class=3D"pl-k">int</span> i <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D"=
pl-k">&lt;</span> <span class=3D"pl-smi">S</span><span class=3D"p=
l-k">.</span>length(); i<span class=3D"pl-k">++</span>) lastIdxs[=
<span class=3D"pl-smi">S</span><span class=3D"pl-k">.</span>charA=
t(i) <span class=3D"pl-k">-</span> <span class=3D"pl-s"><span cla=
ss=3D"pl-pds">'</span>a<span class=3D"pl-pds">'</span></span>] <s=
pan class=3D"pl-k">=3D</span> i;=0A    <span class=3D"pl-k">int</=
span> startIdx <span class=3D"pl-k">=3D</span> <span class=3D"pl-=
c1">0</span>;=0A    <span class=3D"pl-k">while</span>(startIdx <s=
pan class=3D"pl-k">&lt;</span> <span class=3D"pl-smi">S</span><sp=
an class=3D"pl-k">.</span>length()) {=0A        <span class=3D"pl=
-k">int</span> endIdx <span class=3D"pl-k">=3D</span> startIdx;=0A=
        <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int<=
/span> i <span class=3D"pl-k">=3D</span> startIdx; i <span class=3D=
"pl-k">&lt;</span> <span class=3D"pl-smi">S</span><span class=3D"=
pl-k">.</span>length() <span class=3D"pl-k">&amp;&amp;</span> i <=
span class=3D"pl-k">&lt;=3D</span> endIdx; i<span class=3D"pl-k">=
++</span>) {=0A            <span class=3D"pl-k">int</span> lastId=
x <span class=3D"pl-k">=3D</span> lastIdxs[<span class=3D"pl-smi"=
>S</span><span class=3D"pl-k">.</span>charAt(i) <span class=3D"pl=
-k">-</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</span>=
a<span class=3D"pl-pds">'</span></span>];=0A            <span cla=
ss=3D"pl-k">if</span>(lastIdx <span class=3D"pl-k">=3D=3D</span>=20=
i) <span class=3D"pl-k">continue</span>;=0A            <span clas=
s=3D"pl-k">if</span>(lastIdx <span class=3D"pl-k">&gt;</span> end=
Idx) endIdx <span class=3D"pl-k">=3D</span> lastIdx;=0A        }=0A=
        ret<span class=3D"pl-k">.</span>add(endIdx <span class=3D=
"pl-k">-</span> startIdx <span class=3D"pl-k">+</span> <span clas=
s=3D"pl-c1">1</span>);=0A        startIdx <span class=3D"pl-k">=3D=
</span> endIdx <span class=3D"pl-k">+</span> <span class=3D"pl-c1=
">1</span>;=0A    }=0A    <span class=3D"pl-k">return</span> ret;=
=0A}</pre></div><p>=E6=A0=B9=E6=8D=AE=E8=BA=AB=E9=AB=98=E5=92=8C=E5=
=BA=8F=E5=8F=B7=E9=87=8D=E7=BB=84=E9=98=9F=E5=88=97</p><p><a href=
=3D"https://leetcode.com/problems/queue-reconstruction-by-height/=
description/" target=3D"_blank">Leetcode : 406. Queue Reconstruct=
ion by Height(Medium)</a></p><div class=3D"highlight highlight-te=
xt-html-basic"><pre>Input:=0A[[7,0], [4,4], [7,1], [5,0], [6,1],=20=
[5,2]]=0A=0AOutput:=0A[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]<=
/pre></div><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E4=B8=
=80=E4=B8=AA=E5=AD=A6=E7=94=9F=E7=94=A8=E4=B8=A4=E4=B8=AA=E5=88=86=
=E9=87=8F (h, k) =E6=8F=8F=E8=BF=B0=EF=BC=8Ch =E8=A1=A8=E7=A4=BA=E8=
=BA=AB=E9=AB=98=EF=BC=8Ck =E8=A1=A8=E7=A4=BA=E6=8E=92=E5=9C=A8=E5=
=89=8D=E9=9D=A2=E7=9A=84=E6=9C=89 k =E4=B8=AA=E5=AD=A6=E7=94=9F=E7=
=9A=84=E8=BA=AB=E9=AB=98=E6=AF=94=E4=BB=96=E9=AB=98=E6=88=96=E8=80=
=85=E5=92=8C=E4=BB=96=E4=B8=80=E6=A0=B7=E9=AB=98=E3=80=82</p><p>=E4=
=B8=BA=E4=BA=86=E5=9C=A8=E6=AF=8F=E6=AC=A1=E6=8F=92=E5=85=A5=E6=93=
=8D=E4=BD=9C=E6=97=B6=E4=B8=8D=E5=BD=B1=E5=93=8D=E5=90=8E=E7=BB=AD=
=E7=9A=84=E6=93=8D=E4=BD=9C=EF=BC=8C=E8=BA=AB=E9=AB=98=E8=BE=83=E9=
=AB=98=E7=9A=84=E5=AD=A6=E7=94=9F=E5=BA=94=E8=AF=A5=E5=85=88=E5=81=
=9A=E6=8F=92=E5=85=A5=E6=93=8D=E4=BD=9C=EF=BC=8C=E5=90=A6=E5=88=99=
=E8=BA=AB=E9=AB=98=E8=BE=83=E5=B0=8F=E7=9A=84=E5=AD=A6=E7=94=9F=E5=
=8E=9F=E5=85=88=E6=AD=A3=E7=A1=AE=E6=8F=92=E5=85=A5=E7=AC=AC k =E4=
=B8=AA=E4=BD=8D=E7=BD=AE=E5=8F=AF=E8=83=BD=E4=BC=9A=E5=8F=98=E6=88=
=90=E7=AC=AC k+1 =E4=B8=AA=E4=BD=8D=E7=BD=AE=E3=80=82</p><p>=E8=BA=
=AB=E9=AB=98=E9=99=8D=E5=BA=8F=E3=80=81k =E5=80=BC=E5=8D=87=E5=BA=
=8F=EF=BC=8C=E7=84=B6=E5=90=8E=E6=8C=89=E6=8E=92=E5=A5=BD=E5=BA=8F=
=E7=9A=84=E9=A1=BA=E5=BA=8F=E6=8F=92=E5=85=A5=E9=98=9F=E5=88=97=E7=
=9A=84=E7=AC=AC k =E4=B8=AA=E4=BD=8D=E7=BD=AE=E4=B8=AD=E3=80=82</=
p><div class=3D"highlight highlight-source-java"><pre><span class=
=3D"pl-k">public</span> <span class=3D"pl-k">int</span>[][] recon=
structQueue(<span class=3D"pl-k">int</span>[][] people) {=0A    <=
span class=3D"pl-k">if</span>(people <span class=3D"pl-k">=3D=3D<=
/span> <span class=3D"pl-c1">null</span> <span class=3D"pl-k">||<=
/span> people<span class=3D"pl-k">.</span>length <span class=3D"p=
l-k">=3D=3D</span> <span class=3D"pl-c1">0</span> <span class=3D"=
pl-k">||</span> people[<span class=3D"pl-c1">0</span>]<span class=
=3D"pl-k">.</span>length <span class=3D"pl-k">=3D=3D</span> <span=
 class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> <sp=
an class=3D"pl-k">new</span> <span class=3D"pl-smi">int</span>[<s=
pan class=3D"pl-c1">0</span>][<span class=3D"pl-c1">0</span>];=0A=
=0A    <span class=3D"pl-smi">Arrays</span><span class=3D"pl-k">.=
</span>sort(people, <span class=3D"pl-k">new</span> <span class=3D=
"pl-k">Comparator&lt;int[]&gt;</span>() {=0A       <span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> <span class=3D=
"pl-en">compare</span>(<span class=3D"pl-k">int</span>[] <span cl=
ass=3D"pl-v">a</span>, <span class=3D"pl-k">int</span>[] <span cl=
ass=3D"pl-v">b</span>) {=0A           <span class=3D"pl-k">if</sp=
an>(a[<span class=3D"pl-c1">0</span>] <span class=3D"pl-k">=3D=3D=
</span> b[<span class=3D"pl-c1">0</span>]) <span class=3D"pl-k">r=
eturn</span> a[<span class=3D"pl-c1">1</span>] <span class=3D"pl-=
k">-</span> b[<span class=3D"pl-c1">1</span>];=0A           <span=
 class=3D"pl-k">return</span> b[<span class=3D"pl-c1">0</span>] <=
span class=3D"pl-k">-</span> a[<span class=3D"pl-c1">0</span>];=0A=
       }=0A    });=0A    =0A    <span class=3D"pl-k">int</span> n=
 <span class=3D"pl-k">=3D</span> people<span class=3D"pl-k">.</sp=
an>length;=0A    <span class=3D"pl-k">List&lt;int[]&gt;</span> tm=
p <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span>=
 <span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <span cla=
ss=3D"pl-k">for</span>(<span class=3D"pl-k">int</span> i <span cl=
ass=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span c=
lass=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span>) {=0A=
        tmp<span class=3D"pl-k">.</span>add(people[i][<span class=
=3D"pl-c1">1</span>], <span class=3D"pl-k">new</span> <span class=
=3D"pl-smi">int</span>[]{people[i][<span class=3D"pl-c1">0</span>=
], people[i][<span class=3D"pl-c1">1</span>]});=0A    }=0A    =0A=
    <span class=3D"pl-k">int</span>[][] ret <span class=3D"pl-k">=
=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl-smi"=
>int</span>[n][<span class=3D"pl-c1">2</span>];=0A    <span class=
=3D"pl-k">for</span>(<span class=3D"pl-k">int</span> i <span clas=
s=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span cla=
ss=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span>) {=0A=20=
       ret[i][<span class=3D"pl-c1">0</span>] <span class=3D"pl-k=
">=3D</span> tmp<span class=3D"pl-k">.</span>get(i)[<span class=3D=
"pl-c1">0</span>];=0A        ret[i][<span class=3D"pl-c1">1</span=
>] <span class=3D"pl-k">=3D</span> tmp<span class=3D"pl-k">.</spa=
n>get(i)[<span class=3D"pl-c1">1</span>];=0A    }=0A    <span cla=
ss=3D"pl-k">return</span> ret;=0A}</pre></div><h2>=E5=8F=8C=E6=8C=
=87=E9=92=88</h2><p>=E5=8F=8C=E6=8C=87=E9=92=88=E4=B8=BB=E8=A6=81=
=E7=94=A8=E4=BA=8E=E9=81=8D=E5=8E=86=E6=95=B0=E7=BB=84=EF=BC=8C=E4=
=B8=A4=E4=B8=AA=E6=8C=87=E9=92=88=E6=8C=87=E5=90=91=E4=B8=8D=E5=90=
=8C=E7=9A=84=E5=85=83=E7=B4=A0=EF=BC=8C=E4=BB=8E=E8=80=8C=E5=8D=8F=
=E5=90=8C=E5=AE=8C=E6=88=90=E4=BB=BB=E5=8A=A1=E3=80=82</p><p>=E4=BB=
=8E=E4=B8=80=E4=B8=AA=E5=B7=B2=E7=BB=8F=E6=8E=92=E5=BA=8F=E7=9A=84=
=E6=95=B0=E7=BB=84=E4=B8=AD=E6=9F=A5=E6=89=BE=E5=87=BA=E4=B8=A4=E4=
=B8=AA=E6=95=B0=EF=BC=8C=E4=BD=BF=E5=AE=83=E4=BB=AC=E7=9A=84=E5=92=
=8C=E4=B8=BA 0</p><p><a href=3D"https://leetcode.com/problems/two=
-sum-ii-input-array-is-sorted/description/" target=3D"_blank">Lee=
tcode =EF=BC=9A167. Two Sum II - Input array is sorted (Easy)</a>=
</p><p>=E4=BD=BF=E7=94=A8=E5=8F=8C=E6=8C=87=E9=92=88=EF=BC=8C=E4=B8=
=80=E4=B8=AA=E6=8C=87=E9=92=88=E6=8C=87=E5=90=91=E5=85=83=E7=B4=A0=
=E8=BE=83=E5=B0=8F=E7=9A=84=E5=80=BC=EF=BC=8C=E4=B8=80=E4=B8=AA=E6=
=8C=87=E9=92=88=E6=8C=87=E5=90=91=E5=85=83=E7=B4=A0=E8=BE=83=E5=A4=
=A7=E7=9A=84=E5=80=BC=E3=80=82=E6=8C=87=E5=90=91=E8=BE=83=E5=B0=8F=
=E5=85=83=E7=B4=A0=E7=9A=84=E6=8C=87=E9=92=88=E4=BB=8E=E5=A4=B4=E5=
=90=91=E5=B0=BE=E9=81=8D=E5=8E=86=EF=BC=8C=E6=8C=87=E5=90=91=E8=BE=
=83=E5=A4=A7=E5=85=83=E7=B4=A0=E7=9A=84=E6=8C=87=E9=92=88=E4=BB=8E=
=E5=B0=BE=E5=90=91=E5=A4=B4=E9=81=8D=E5=8E=86=E3=80=82</p><p>=E5=A6=
=82=E6=9E=9C=E4=B8=A4=E4=B8=AA=E6=8C=87=E9=92=88=E6=8C=87=E5=90=91=
=E5=85=83=E7=B4=A0=E7=9A=84=E5=92=8C sum =3D=3D target=EF=BC=8C=E9=
=82=A3=E4=B9=88=E5=BE=97=E5=88=B0=E8=A6=81=E6=B1=82=E7=9A=84=E7=BB=
=93=E6=9E=9C=EF=BC=9B=E5=A6=82=E6=9E=9C sum &gt; target=EF=BC=8C=E7=
=A7=BB=E5=8A=A8=E8=BE=83=E5=A4=A7=E7=9A=84=E5=85=83=E7=B4=A0=EF=BC=
=8C=E4=BD=BF sum =E5=8F=98=E5=B0=8F=E4=B8=80=E4=BA=9B=EF=BC=9B=E5=
=A6=82=E6=9E=9C sum &lt; target=EF=BC=8C=E7=A7=BB=E5=8A=A8=E8=BE=83=
=E5=B0=8F=E7=9A=84=E5=85=83=E7=B4=A0=EF=BC=8C=E4=BD=BF sum =E5=8F=
=98=E5=A4=A7=E4=B8=80=E4=BA=9B=E3=80=82</p><div class=3D"highligh=
t highlight-source-java"><pre><span class=3D"pl-k">public</span>=20=
<span class=3D"pl-k">int</span>[] twoSum(<span class=3D"pl-k">int=
</span>[] numbers, <span class=3D"pl-k">int</span> target) {=0A =20=
  <span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</spa=
n> <span class=3D"pl-c1">0</span>, j <span class=3D"pl-k">=3D</sp=
an> numbers<span class=3D"pl-k">.</span>length <span class=3D"pl-=
k">-</span> <span class=3D"pl-c1">1</span>;=0A    <span class=3D"=
pl-k">while</span> (i <span class=3D"pl-k">&lt;</span> j) {=0A  =20=
     <span class=3D"pl-k">int</span> sum <span class=3D"pl-k">=3D=
</span> numbers[i] <span class=3D"pl-k">+</span> numbers[j];=0A =20=
      <span class=3D"pl-k">if</span> (sum <span class=3D"pl-k">=3D=
=3D</span> target) <span class=3D"pl-k">return</span> <span class=
=3D"pl-k">new</span> <span class=3D"pl-smi">int</span>[]{i <span=20=
class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>, j <span c=
lass=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>};=0A      =20=
 <span class=3D"pl-k">else</span> <span class=3D"pl-k">if</span>=20=
(sum <span class=3D"pl-k">&lt;</span> target) i<span class=3D"pl-=
k">++</span>;=0A        <span class=3D"pl-k">else</span> j<span c=
lass=3D"pl-k">--</span>;=0A    }=0A    <span class=3D"pl-k">retur=
n</span> <span class=3D"pl-c1">null</span>;=0A}</pre></div><p>=E5=
=8F=8D=E8=BD=AC=E5=AD=97=E7=AC=A6=E4=B8=B2=E4=B8=AD=E7=9A=84=E5=85=
=83=E9=9F=B3=E5=AD=97=E7=AC=A6</p><p><a href=3D"https://leetcode.=
com/problems/reverse-vowels-of-a-string/description/" target=3D"_=
blank">Leetcode : 345. Reverse Vowels of a String (Easy)</a></p><=
p>=E4=BD=BF=E7=94=A8=E5=8F=8C=E6=8C=87=E9=92=88=EF=BC=8C=E6=8C=87=
=E5=90=91=E5=BE=85=E5=8F=8D=E8=BD=AC=E7=9A=84=E4=B8=A4=E4=B8=AA=E5=
=85=83=E9=9F=B3=E5=AD=97=E7=AC=A6=EF=BC=8C=E4=B8=80=E4=B8=AA=E6=8C=
=87=E9=92=88=E4=BB=8E=E5=A4=B4=E5=90=91=E5=B0=BE=E9=81=8D=E5=8E=86=
=EF=BC=8C=E4=B8=80=E4=B8=AA=E6=8C=87=E9=92=88=E4=BB=8E=E5=B0=BE=E5=
=88=B0=E5=A4=B4=E9=81=8D=E5=8E=86=E3=80=82</p><div class=3D"highl=
ight highlight-source-java"><pre><span class=3D"pl-k">private</sp=
an> <span class=3D"pl-k">HashSet&lt;<span class=3D"pl-smi">Charac=
ter</span>&gt;</span> vowels <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-k">new</span> <span class=3D"pl-k">HashSet&lt;&gt;<=
/span>(<span class=3D"pl-smi">Arrays</span><span class=3D"pl-k">.=
</span>asList(<span class=3D"pl-s"><span class=3D"pl-pds">'</span=
>a<span class=3D"pl-pds">'</span></span>,<span class=3D"pl-s"><sp=
an class=3D"pl-pds">'</span>e<span class=3D"pl-pds">'</span></spa=
n>,<span class=3D"pl-s"><span class=3D"pl-pds">'</span>i<span cla=
ss=3D"pl-pds">'</span></span>,<span class=3D"pl-s"><span class=3D=
"pl-pds">'</span>o<span class=3D"pl-pds">'</span></span>,<span cl=
ass=3D"pl-s"><span class=3D"pl-pds">'</span>u<span class=3D"pl-pd=
s">'</span></span>,<span class=3D"pl-s"><span class=3D"pl-pds">'<=
/span>A<span class=3D"pl-pds">'</span></span>,<span class=3D"pl-s=
"><span class=3D"pl-pds">'</span>E<span class=3D"pl-pds">'</span>=
</span>,<span class=3D"pl-s"><span class=3D"pl-pds">'</span>I<spa=
n class=3D"pl-pds">'</span></span>,<span class=3D"pl-s"><span cla=
ss=3D"pl-pds">'</span>O<span class=3D"pl-pds">'</span></span>,<sp=
an class=3D"pl-s"><span class=3D"pl-pds">'</span>U<span class=3D"=
pl-pds">'</span></span>));=0A=0A<span class=3D"pl-k">public</span=
> <span class=3D"pl-smi">String</span> reverseVowels(<span class=3D=
"pl-smi">String</span> s) {=0A    <span class=3D"pl-k">if</span>(=
s<span class=3D"pl-k">.</span>length() <span class=3D"pl-k">=3D=3D=
</span> <span class=3D"pl-c1">0</span>) <span class=3D"pl-k">retu=
rn</span> s;=0A    <span class=3D"pl-k">int</span> i <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">0</span>, j <span class=3D=
"pl-k">=3D</span> s<span class=3D"pl-k">.</span>length() <span cl=
ass=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>;=0A    <span=
 class=3D"pl-k">char</span>[] result <span class=3D"pl-k">=3D</sp=
an> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">char</=
span>[s<span class=3D"pl-k">.</span>length()];=0A    <span class=3D=
"pl-k">while</span>(i <span class=3D"pl-k">&lt;=3D</span> j){=0A=20=
       <span class=3D"pl-k">char</span> ci <span class=3D"pl-k">=3D=
</span> s<span class=3D"pl-k">.</span>charAt(i);=0A        <span=20=
class=3D"pl-k">char</span> cj <span class=3D"pl-k">=3D</span> s<s=
pan class=3D"pl-k">.</span>charAt(j);=0A        <span class=3D"pl=
-k">if</span>(<span class=3D"pl-k">!</span>vowels<span class=3D"p=
l-k">.</span>contains(ci)){=0A            result[i] <span class=3D=
"pl-k">=3D</span> ci;=0A            i<span class=3D"pl-k">++</spa=
n>;=0A        } <span class=3D"pl-k">else</span> <span class=3D"p=
l-k">if</span>(<span class=3D"pl-k">!</span>vowels<span class=3D"=
pl-k">.</span>contains(cj)){=0A            result[j] <span class=3D=
"pl-k">=3D</span> cj;=0A            j<span class=3D"pl-k">--</spa=
n>;=0A        } <span class=3D"pl-k">else</span>{=0A            r=
esult[i] <span class=3D"pl-k">=3D</span> cj;=0A            result=
[j] <span class=3D"pl-k">=3D</span> ci;=0A            i<span clas=
s=3D"pl-k">++</span>;=0A            j<span class=3D"pl-k">--</spa=
n>;=0A        }=0A    }=0A    <span class=3D"pl-k">return</span>=20=
<span class=3D"pl-k">new</span> <span class=3D"pl-smi">String</sp=
an>(result);=0A}</pre></div><p>=E4=B8=A4=E6=95=B0=E5=B9=B3=E6=96=B9=
=E5=92=8C</p><p><a href=3D"https://leetcode.com/problems/sum-of-s=
quare-numbers/description/" target=3D"_blank">Leetcode : 633. Sum=
 of Square Numbers (Easy)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=
=BF=B0=EF=BC=9A=E5=88=A4=E6=96=AD=E4=B8=80=E4=B8=AA=E6=95=B0=E6=98=
=AF=E5=90=A6=E4=B8=BA=E4=B8=A4=E4=B8=AA=E6=95=B0=E7=9A=84=E5=B9=B3=
=E6=96=B9=E5=92=8C=EF=BC=8C=E4=BE=8B=E5=A6=82 5 =3D 12<span class=
=3D"Apple-converted-space">&nbsp;</span>+ 22=E3=80=82</p><div cla=
ss=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">=
public</span> <span class=3D"pl-k">boolean</span> judgeSquareSum(=
<span class=3D"pl-k">int</span> c) {=0A    <span class=3D"pl-k">i=
nt</span> left <span class=3D"pl-k">=3D</span> <span class=3D"pl-=
c1">0</span>, right <span class=3D"pl-k">=3D</span> (<span class=3D=
"pl-k">int</span>) <span class=3D"pl-smi">Math</span><span class=3D=
"pl-k">.</span>sqrt(c);=0A    <span class=3D"pl-k">while</span>(l=
eft <span class=3D"pl-k">&lt;=3D</span> right){=0A        <span c=
lass=3D"pl-k">int</span> powSum <span class=3D"pl-k">=3D</span> l=
eft <span class=3D"pl-k">*</span> left <span class=3D"pl-k">+</sp=
an> right <span class=3D"pl-k">*</span> right;=0A        <span cl=
ass=3D"pl-k">if</span>(powSum <span class=3D"pl-k">=3D=3D</span>=20=
c) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">true<=
/span>;=0A        <span class=3D"pl-k">else</span> <span class=3D=
"pl-k">if</span>(powSum <span class=3D"pl-k">&gt;</span> c) right=
<span class=3D"pl-k">--</span>;=0A        <span class=3D"pl-k">el=
se</span> left<span class=3D"pl-k">++</span>;=0A    }=0A    <span=
 class=3D"pl-k">return</span> <span class=3D"pl-c1">false</span>;=
=0A}</pre></div><p>=E5=9B=9E=E6=96=87=E5=AD=97=E7=AC=A6=E4=B8=B2<=
/p><p><a href=3D"https://leetcode.com/problems/valid-palindrome-i=
i/description/" target=3D"_blank">Leetcode : 680. Valid Palindrom=
e II (Easy)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=
=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=8F=AF=E4=BB=A5=E5=88=A0=E9=99=A4=E4=
=B8=80=E4=B8=AA=E5=AD=97=E7=AC=A6=EF=BC=8C=E5=88=A4=E6=96=AD=E6=98=
=AF=E5=90=A6=E8=83=BD=E6=9E=84=E6=88=90=E5=9B=9E=E6=96=87=E5=AD=97=
=E7=AC=A6=E4=B8=B2=E3=80=82</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">public</span> <span class=3D=
"pl-k">boolean</span> validPalindrome(<span class=3D"pl-smi">Stri=
ng</span> s) {=0A    <span class=3D"pl-k">int</span> i <span clas=
s=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>, j <span cla=
ss=3D"pl-k">=3D</span> s<span class=3D"pl-k">.</span>length() <sp=
an class=3D"pl-k">-</span><span class=3D"pl-c1">1</span>;=0A    <=
span class=3D"pl-k">while</span>(i <span class=3D"pl-k">&lt;</spa=
n> j){=0A        <span class=3D"pl-k">if</span>(s<span class=3D"p=
l-k">.</span>charAt(i) <span class=3D"pl-k">!=3D</span> s<span cl=
ass=3D"pl-k">.</span>charAt(j)){=0A            <span class=3D"pl-=
k">return</span> isPalindrome(s, i, j <span class=3D"pl-k">-</spa=
n> <span class=3D"pl-c1">1</span>) <span class=3D"pl-k">||</span>=
 isPalindrome(s, i <span class=3D"pl-k">+</span> <span class=3D"p=
l-c1">1</span>, j);=0A        }=0A        i<span class=3D"pl-k">+=
+</span>;=0A        j<span class=3D"pl-k">--</span>;=0A    }=0A =20=
  <span class=3D"pl-k">return</span> <span class=3D"pl-c1">true</=
span>;=0A}=0A=0A<span class=3D"pl-k">private</span> <span class=3D=
"pl-k">boolean</span> isPalindrome(<span class=3D"pl-smi">String<=
/span> s, <span class=3D"pl-k">int</span> l, <span class=3D"pl-k"=
>int</span> r){=0A    <span class=3D"pl-k">while</span>(l <span c=
lass=3D"pl-k">&lt;</span> r){=0A        <span class=3D"pl-k">if</=
span>(s<span class=3D"pl-k">.</span>charAt(l) <span class=3D"pl-k=
">!=3D</span> s<span class=3D"pl-k">.</span>charAt(r))=0A       =20=
    <span class=3D"pl-k">return</span> <span class=3D"pl-c1">fals=
e</span>;=0A        l<span class=3D"pl-k">++</span>;=0A        r<=
span class=3D"pl-k">--</span>;=0A    }=0A    <span class=3D"pl-k"=
>return</span> <span class=3D"pl-c1">true</span>;=0A}</pre></div>=
<p>=E5=BD=92=E5=B9=B6=E4=B8=A4=E4=B8=AA=E6=9C=89=E5=BA=8F=E6=95=B0=
=E7=BB=84</p><p><a href=3D"https://leetcode.com/problems/merge-so=
rted-array/description/" target=3D"_blank">Leetcode : 88. Merge S=
orted Array (Easy)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=
=EF=BC=9A=E6=8A=8A=E5=BD=92=E5=B9=B6=E7=BB=93=E6=9E=9C=E5=AD=98=E5=
=88=B0=E7=AC=AC=E4=B8=80=E4=B8=AA=E6=95=B0=E7=BB=84=E4=B8=8A</p><=
div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">void</span> merge(<span=
 class=3D"pl-k">int</span>[] nums1, <span class=3D"pl-k">int</spa=
n> m, <span class=3D"pl-k">int</span>[] nums2, <span class=3D"pl-=
k">int</span> n) {=0A    <span class=3D"pl-k">int</span> i <span=20=
class=3D"pl-k">=3D</span> m <span class=3D"pl-k">-</span> <span c=
lass=3D"pl-c1">1</span>, j <span class=3D"pl-k">=3D</span> n <spa=
n class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>; <span c=
lass=3D"pl-c"><span class=3D"pl-c">//</span> =E9=9C=80=E8=A6=81=E4=
=BB=8E=E5=B0=BE=E5=BC=80=E5=A7=8B=E9=81=8D=E5=8E=86=EF=BC=8C=E5=90=
=A6=E5=88=99=E5=9C=A8 nums1 =E4=B8=8A=E5=BD=92=E5=B9=B6=E5=BE=97=E5=
=88=B0=E7=9A=84=E5=80=BC=E4=BC=9A=E8=A6=86=E7=9B=96=E8=BF=98=E6=9C=
=AA=E8=BF=9B=E8=A1=8C=E5=BD=92=E5=B9=B6=E6=AF=94=E8=BE=83=E7=9A=84=
=E5=80=BC</span>=0A    <span class=3D"pl-k">int</span> idx <span=20=
class=3D"pl-k">=3D</span> m <span class=3D"pl-k">+</span> n <span=
 class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>;=0A    <s=
pan class=3D"pl-k">while</span>(i <span class=3D"pl-k">&gt;=3D</s=
pan> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">||</span=
> j <span class=3D"pl-k">&gt;=3D</span> <span class=3D"pl-c1">0</=
span>){=0A        <span class=3D"pl-k">if</span>(i <span class=3D=
"pl-k">&lt;</span> <span class=3D"pl-c1">0</span>) nums1[idx] <sp=
an class=3D"pl-k">=3D</span> nums2[j<span class=3D"pl-k">--</span=
>];=0A        <span class=3D"pl-k">else</span> <span class=3D"pl-=
k">if</span>(j <span class=3D"pl-k">&lt;</span> <span class=3D"pl=
-c1">0</span>) nums1[idx] <span class=3D"pl-k">=3D</span> nums1[i=
<span class=3D"pl-k">--</span>];=0A        <span class=3D"pl-k">e=
lse</span> <span class=3D"pl-k">if</span>(nums1[i] <span class=3D=
"pl-k">&gt;</span> nums2[j]) nums1[idx] <span class=3D"pl-k">=3D<=
/span> nums1[i<span class=3D"pl-k">--</span>];=0A        <span cl=
ass=3D"pl-k">else</span> nums1[idx] <span class=3D"pl-k">=3D</spa=
n> nums2[j<span class=3D"pl-k">--</span>];=0A        idx<span cla=
ss=3D"pl-k">--</span>;=0A    }=0A}</pre></div><p>=E5=88=A4=E6=96=AD=
=E9=93=BE=E8=A1=A8=E6=98=AF=E5=90=A6=E5=AD=98=E5=9C=A8=E7=8E=AF</=
p><p><a href=3D"https://leetcode.com/problems/linked-list-cycle/d=
escription/" target=3D"_blank">Leetcode : 141. Linked List Cycle=20=
(Easy)</a></p><p>=E4=BD=BF=E7=94=A8=E5=8F=8C=E6=8C=87=E9=92=88=EF=
=BC=8C=E4=B8=80=E4=B8=AA=E6=8C=87=E9=92=88=E6=AF=8F=E6=AC=A1=E7=A7=
=BB=E5=8A=A8=E4=B8=80=E4=B8=AA=E8=8A=82=E7=82=B9=EF=BC=8C=E4=B8=80=
=E4=B8=AA=E6=8C=87=E9=92=88=E6=AF=8F=E6=AC=A1=E7=A7=BB=E5=8A=A8=E4=
=B8=A4=E4=B8=AA=E8=8A=82=E7=82=B9=EF=BC=8C=E5=A6=82=E6=9E=9C=E5=AD=
=98=E5=9C=A8=E7=8E=AF=EF=BC=8C=E9=82=A3=E4=B9=88=E8=BF=99=E4=B8=A4=
=E4=B8=AA=E6=8C=87=E9=92=88=E4=B8=80=E5=AE=9A=E4=BC=9A=E7=9B=B8=E9=
=81=87=E3=80=82</p><div class=3D"highlight highlight-source-java"=
><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">boo=
lean</span> hasCycle(<span class=3D"pl-smi">ListNode</span> head)=
 {=0A    <span class=3D"pl-k">if</span>(head <span class=3D"pl-k"=
>=3D=3D</span> <span class=3D"pl-c1">null</span>) <span class=3D"=
pl-k">return</span> <span class=3D"pl-c1">false</span>;=0A    <sp=
an class=3D"pl-smi">ListNode</span> l1 <span class=3D"pl-k">=3D</=
span> head, l2 <span class=3D"pl-k">=3D</span> head<span class=3D=
"pl-k">.</span>next;=0A    <span class=3D"pl-k">while</span>(l1 <=
span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">null</span>=
 <span class=3D"pl-k">&amp;&amp;</span> l2 <span class=3D"pl-k">!=
=3D</span> <span class=3D"pl-c1">null</span>){=0A        <span cl=
ass=3D"pl-k">if</span>(l1 <span class=3D"pl-k">=3D=3D</span> l2)=20=
<span class=3D"pl-k">return</span> <span class=3D"pl-c1">true</sp=
an>;=0A        l1 <span class=3D"pl-k">=3D</span> l1<span class=3D=
"pl-k">.</span>next;=0A        <span class=3D"pl-k">if</span>(l2<=
span class=3D"pl-k">.</span>next <span class=3D"pl-k">=3D=3D</spa=
n> <span class=3D"pl-c1">null</span>) <span class=3D"pl-k">break<=
/span>;=0A        l2 <span class=3D"pl-k">=3D</span> l2<span clas=
s=3D"pl-k">.</span>next<span class=3D"pl-k">.</span>next;=0A    }=
=0A    <span class=3D"pl-k">return</span> <span class=3D"pl-c1">f=
alse</span>;=0A}</pre></div><p>=E6=9C=80=E9=95=BF=E5=AD=90=E5=BA=8F=
=E5=88=97</p><p><a href=3D"https://leetcode.com/problems/longest-=
word-in-dictionary-through-deleting/description/" target=3D"_blan=
k">Leetcode : 524. Longest Word in Dictionary through Deleting (M=
edium)</a></p><pre><ol class=3D"hljs-ln wiz-list-level1" style=3D=
"background-image: initial; background-attachment: initial; backg=
round-size: initial; background-origin: initial; background-clip:=
 initial; background-position: initial; background-repeat: initia=
l;"><li><div class=3D"hljs-ln-line hljs-ln-n" data-line-number=3D=
"1" style=3D"text-align: right;"></div><div class=3D"hljs-ln-line=
">Input:</div></li><li><div class=3D"hljs-ln-line hljs-ln-n" data=
-line-number=3D"2" style=3D"text-align: right;"></div><div class=3D=
"hljs-ln-line">s =3D <span class=3D"hljs-string">"abpcplea"</span=
>, d =3D [<span class=3D"hljs-string">"ale"</span>,<span class=3D=
"hljs-string">"apple"</span>,<span class=3D"hljs-string">"monkey"=
</span>,<span class=3D"hljs-string">"plea"</span>]</div></li><li>=
<div class=3D"hljs-ln-line hljs-ln-n" data-line-number=3D"3" styl=
e=3D"text-align: right;"></div><div class=3D"hljs-ln-line"> </div=
></li><li><div class=3D"hljs-ln-line hljs-ln-n" data-line-number=3D=
"4" style=3D"text-align: right;"></div><div class=3D"hljs-ln-line=
">Output:</div></li><li><div class=3D"hljs-ln-line hljs-ln-n" dat=
a-line-number=3D"5" style=3D"text-align: right;"></div><div class=
=3D"hljs-ln-line"><span class=3D"hljs-string">"apple"</span></div=
></li></ol></pre><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=
=E5=8F=AF=E4=BB=A5=E5=88=A0=E9=99=A4 s =E4=B8=AD=E7=9A=84=E4=B8=80=
=E4=BA=9B=E5=AD=97=E7=AC=A6=EF=BC=8C=E4=BD=BF=E5=BE=97=E5=AE=83=E6=
=88=90=E4=B8=BA=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=88=97=E8=A1=A8 d =E4=
=B8=AD=E7=9A=84=E4=B8=80=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E3=80=
=82=E8=A6=81=E6=B1=82=E5=9C=A8 d =E4=B8=AD=E6=89=BE=E5=88=B0=E6=BB=
=A1=E8=B6=B3=E6=9D=A1=E4=BB=B6=E7=9A=84=E6=9C=80=E9=95=BF=E5=AD=97=
=E7=AC=A6=E4=B8=B2=E3=80=82</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">public</span> <span class=3D=
"pl-smi">String</span> findLongestWord(<span class=3D"pl-smi">Str=
ing</span> s, <span class=3D"pl-k">List&lt;<span class=3D"pl-smi"=
>String</span>&gt;</span> d) {=0A    <span class=3D"pl-smi">Strin=
g</span> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-s"=
><span class=3D"pl-pds">"</span><span class=3D"pl-pds">"</span></=
span>;=0A    <span class=3D"pl-k">for</span> (<span class=3D"pl-s=
mi">String</span> str <span class=3D"pl-k">:</span> d) {=0A     =20=
  <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span=
> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span=
>, j <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</spa=
n>; i <span class=3D"pl-k">&lt;</span> s<span class=3D"pl-k">.</s=
pan>length() <span class=3D"pl-k">&amp;&amp;</span> j <span class=
=3D"pl-k">&lt;</span> str<span class=3D"pl-k">.</span>length(); i=
<span class=3D"pl-k">++</span>) {=0A            <span class=3D"pl=
-k">if</span> (s<span class=3D"pl-k">.</span>charAt(i) <span clas=
s=3D"pl-k">=3D=3D</span> str<span class=3D"pl-k">.</span>charAt(j=
)) j<span class=3D"pl-k">++</span>;=0A            <span class=3D"=
pl-k">if</span> (j <span class=3D"pl-k">=3D=3D</span> str<span cl=
ass=3D"pl-k">.</span>length()) {=0A                <span class=3D=
"pl-k">if</span> (ret<span class=3D"pl-k">.</span>length() <span=20=
class=3D"pl-k">&lt;</span> str<span class=3D"pl-k">.</span>length=
()=0A                        <span class=3D"pl-k">||</span> (ret<=
span class=3D"pl-k">.</span>length() <span class=3D"pl-k">=3D=3D<=
/span> str<span class=3D"pl-k">.</span>length() <span class=3D"pl=
-k">&amp;&amp;</span> ret<span class=3D"pl-k">.</span>compareTo(s=
tr) <span class=3D"pl-k">&gt;</span> <span class=3D"pl-c1">0</spa=
n>)) {=0A                    ret <span class=3D"pl-k">=3D</span>=20=
str;=0A                }=0A            }=0A        }=0A    }=0A =20=
  <span class=3D"pl-k">return</span> ret;=0A}</pre></div><h2>=E6=8E=
=92=E5=BA=8F</h2><h3>=E5=BF=AB=E9=80=9F=E9=80=89=E6=8B=A9</h3><p>=
=E4=B8=80=E8=88=AC=E7=94=A8=E4=BA=8E=E6=B1=82=E8=A7=A3<span class=
=3D"Apple-converted-space">&nbsp;</span>Kth Element<span class=3D=
"Apple-converted-space">&nbsp;</span>=E9=97=AE=E9=A2=98=EF=BC=8C=E5=
=8F=AF=E4=BB=A5=E5=9C=A8 O(n) =E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=
=E5=BA=A6=EF=BC=8CO(1) =E7=A9=BA=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=
=A6=E5=AE=8C=E6=88=90=E6=B1=82=E8=A7=A3=E5=B7=A5=E4=BD=9C=E3=80=82=
</p><p>=E4=B8=8E=E5=BF=AB=E9=80=9F=E6=8E=92=E5=BA=8F=E4=B8=80=E6=A0=
=B7=EF=BC=8C=E5=BF=AB=E9=80=9F=E9=80=89=E6=8B=A9=E4=B8=80=E8=88=AC=
=E9=9C=80=E8=A6=81=E5=85=88=E6=89=93=E4=B9=B1=E6=95=B0=E7=BB=84=EF=
=BC=8C=E5=90=A6=E5=88=99=E6=9C=80=E5=9D=8F=E6=83=85=E5=86=B5=E4=B8=
=8B=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E4=B8=BA O(n2)=E3=
=80=82</p><h3>=E5=A0=86=E6=8E=92=E5=BA=8F</h3><p>=E5=A0=86=E6=8E=92=
=E5=BA=8F=E7=94=A8=E4=BA=8E=E6=B1=82=E8=A7=A3<span class=3D"Apple=
-converted-space">&nbsp;</span>TopK Elements<span class=3D"Apple-=
converted-space">&nbsp;</span>=E9=97=AE=E9=A2=98=EF=BC=8C=E9=80=9A=
=E8=BF=87=E7=BB=B4=E6=8A=A4=E4=B8=80=E4=B8=AA=E5=A4=A7=E5=B0=8F=E4=
=B8=BA K =E7=9A=84=E5=A0=86=EF=BC=8C=E5=A0=86=E4=B8=AD=E7=9A=84=E5=
=85=83=E7=B4=A0=E5=B0=B1=E6=98=AF TopK Elements=E3=80=82=E5=BD=93=
=E7=84=B6=E5=AE=83=E4=B9=9F=E5=8F=AF=E4=BB=A5=E7=94=A8=E4=BA=8E=E6=
=B1=82=E8=A7=A3 Kth Element =E9=97=AE=E9=A2=98=EF=BC=8C=E5=9B=A0=E4=
=B8=BA=E6=9C=80=E5=90=8E=E5=87=BA=E5=A0=86=E7=9A=84=E9=82=A3=E4=B8=
=AA=E5=85=83=E7=B4=A0=E5=B0=B1=E6=98=AF Kth Element=E3=80=82=E5=BF=
=AB=E9=80=9F=E9=80=89=E6=8B=A9=E4=B9=9F=E5=8F=AF=E4=BB=A5=E6=B1=82=
=E8=A7=A3 TopK Elements =E9=97=AE=E9=A2=98=EF=BC=8C=E5=9B=A0=E4=B8=
=BA=E6=89=BE=E5=88=B0 Kth Element =E4=B9=8B=E5=90=8E=EF=BC=8C=E5=86=
=8D=E9=81=8D=E5=8E=86=E4=B8=80=E6=AC=A1=E6=95=B0=E7=BB=84=EF=BC=8C=
=E6=89=80=E6=9C=89=E5=B0=8F=E4=BA=8E=E7=AD=89=E4=BA=8E Kth Elemen=
t =E7=9A=84=E5=85=83=E7=B4=A0=E9=83=BD=E6=98=AF TopK Elements=E3=80=
=82=E5=8F=AF=E4=BB=A5=E7=9C=8B=E5=88=B0=EF=BC=8C=E5=BF=AB=E9=80=9F=
=E9=80=89=E6=8B=A9=E5=92=8C=E5=A0=86=E6=8E=92=E5=BA=8F=E9=83=BD=E5=
=8F=AF=E4=BB=A5=E6=B1=82=E8=A7=A3 Kth Element =E5=92=8C TopK Elem=
ents =E9=97=AE=E9=A2=98=E3=80=82</p><p>Kth Element</p><p><a href=3D=
"https://leetcode.com/problems/kth-largest-element-in-an-array/de=
scription/" target=3D"_blank">Leetocde : 215. Kth Largest Element=
 in an Array (Medium)</a></p><p>=E6=8E=92=E5=BA=8F=EF=BC=9A=E6=97=
=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6 O(nlgn)=EF=BC=8C=E7=A9=BA=
=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6 O(1) =E8=A7=A3=E6=B3=95</p><=
div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> findKthLarge=
st(<span class=3D"pl-k">int</span>[] nums, <span class=3D"pl-k">i=
nt</span> k) {=0A        <span class=3D"pl-k">int</span> <span cl=
ass=3D"pl-smi">N</span> <span class=3D"pl-k">=3D</span> nums<span=
 class=3D"pl-k">.</span>length;=0A        <span class=3D"pl-smi">=
Arrays</span><span class=3D"pl-k">.</span>sort(nums);=0A        <=
span class=3D"pl-k">return</span> nums[<span class=3D"pl-smi">N</=
span> <span class=3D"pl-k">-</span> k];=0A}</pre></div><p>=E5=A0=86=
=E6=8E=92=E5=BA=8F=EF=BC=9A=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=
=BA=A6 O(nlgk)=EF=BC=8C=E7=A9=BA=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=
=A6 O(k)</p><div class=3D"highlight highlight-source-java"><pre><=
span class=3D"pl-k">public</span> <span class=3D"pl-k">int</span>=
 findKthLargest(<span class=3D"pl-k">int</span>[] nums, <span cla=
ss=3D"pl-k">int</span> k) {=0A    <span class=3D"pl-k">PriorityQu=
eue&lt;<span class=3D"pl-smi">Integer</span>&gt;</span> pq <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span c=
lass=3D"pl-k">PriorityQueue&lt;&gt;</span>();=0A    <span class=3D=
"pl-k">for</span>(<span class=3D"pl-k">int</span> val <span class=
=3D"pl-k">:</span> nums) {=0A        pq<span class=3D"pl-k">.</sp=
an>offer(val);=0A        <span class=3D"pl-k">if</span>(pq<span c=
lass=3D"pl-k">.</span>size() <span class=3D"pl-k">&gt;</span> k)=20=
{=0A            pq<span class=3D"pl-k">.</span>poll();=0A       =20=
}=0A    }=0A    <span class=3D"pl-k">return</span> pq<span class=3D=
"pl-k">.</span>peek();=0A}</pre></div><p>=E5=BF=AB=E9=80=9F=E9=80=
=89=E6=8B=A9=EF=BC=9A=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=
 O(n)=EF=BC=8C=E7=A9=BA=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6 O(1)<=
/p><div class=3D"highlight highlight-source-java"><pre><span clas=
s=3D"pl-k">public</span> <span class=3D"pl-k">int</span> findKthL=
argest(<span class=3D"pl-k">int</span>[] nums, <span class=3D"pl-=
k">int</span> k) {=0A        k <span class=3D"pl-k">=3D</span> nu=
ms<span class=3D"pl-k">.</span>length <span class=3D"pl-k">-</spa=
n> k;=0A        <span class=3D"pl-k">int</span> lo <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A        <span=
 class=3D"pl-k">int</span> hi <span class=3D"pl-k">=3D</span> num=
s<span class=3D"pl-k">.</span>length <span class=3D"pl-k">-</span=
> <span class=3D"pl-c1">1</span>;=0A        <span class=3D"pl-k">=
while</span> (lo <span class=3D"pl-k">&lt;</span> hi) {=0A      =20=
     <span class=3D"pl-k">final</span> <span class=3D"pl-k">int</=
span> j <span class=3D"pl-k">=3D</span> partition(nums, lo, hi);=0A=
            <span class=3D"pl-k">if</span>(j <span class=3D"pl-k"=
>&lt;</span> k) {=0A                lo <span class=3D"pl-k">=3D</=
span> j <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</sp=
an>;=0A            } <span class=3D"pl-k">else</span> <span class=
=3D"pl-k">if</span> (j <span class=3D"pl-k">&gt;</span> k) {=0A =20=
              hi <span class=3D"pl-k">=3D</span> j <span class=3D=
"pl-k">-</span> <span class=3D"pl-c1">1</span>;=0A            } <=
span class=3D"pl-k">else</span> {=0A                <span class=3D=
"pl-k">break</span>;=0A            }=0A        }=0A        <span=20=
class=3D"pl-k">return</span> nums[k];=0A    }=0A=0A    <span clas=
s=3D"pl-k">private</span> <span class=3D"pl-k">int</span> partiti=
on(<span class=3D"pl-k">int</span>[] a, <span class=3D"pl-k">int<=
/span> lo, <span class=3D"pl-k">int</span> hi) {=0A        <span=20=
class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> lo;=0A=
        <span class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D=
</span> hi <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1<=
/span>;=0A        <span class=3D"pl-k">while</span>(<span class=3D=
"pl-c1">true</span>) {=0A            <span class=3D"pl-k">while</=
span>(i <span class=3D"pl-k">&lt;</span> hi <span class=3D"pl-k">=
&amp;&amp;</span> less(a[<span class=3D"pl-k">++</span>i], a[lo])=
);=0A            <span class=3D"pl-k">while</span>(j <span class=3D=
"pl-k">&gt;</span> lo <span class=3D"pl-k">&amp;&amp;</span> less=
(a[lo], a[<span class=3D"pl-k">--</span>j]));=0A            <span=
 class=3D"pl-k">if</span>(i <span class=3D"pl-k">&gt;=3D</span> j=
) {=0A                <span class=3D"pl-k">break</span>;=0A     =20=
      }=0A            exch(a, i, j);=0A        }=0A        exch(a=
, lo, j);=0A        <span class=3D"pl-k">return</span> j;=0A    }=
=0A=0A    <span class=3D"pl-k">private</span> <span class=3D"pl-k=
">void</span> exch(<span class=3D"pl-k">int</span>[] a, <span cla=
ss=3D"pl-k">int</span> i, <span class=3D"pl-k">int</span> j) {=0A=
        <span class=3D"pl-k">final</span> <span class=3D"pl-k">in=
t</span> tmp <span class=3D"pl-k">=3D</span> a[i];=0A        a[i]=
 <span class=3D"pl-k">=3D</span> a[j];=0A        a[j] <span class=
=3D"pl-k">=3D</span> tmp;=0A    }=0A=0A    <span class=3D"pl-k">p=
rivate</span> <span class=3D"pl-k">boolean</span> less(<span clas=
s=3D"pl-k">int</span> v, <span class=3D"pl-k">int</span> w) {=0A=20=
       <span class=3D"pl-k">return</span> v <span class=3D"pl-k">=
&lt;</span> w;=0A    }=0A}</pre></div><h3>=E6=A1=B6=E6=8E=92=E5=BA=
=8F</h3><p>=E6=89=BE=E5=87=BA=E5=87=BA=E7=8E=B0=E9=A2=91=E7=8E=87=
=E6=9C=80=E5=A4=9A=E7=9A=84 k =E4=B8=AA=E6=95=B0</p><p><a href=3D=
"https://leetcode.com/problems/top-k-frequent-elements/descriptio=
n/" target=3D"_blank">Leetcode : 347. Top K Frequent Elements (Me=
dium)</a></p><div class=3D"highlight highlight-source-java"><pre>=
<span class=3D"pl-k">public</span> <span class=3D"pl-k">List&lt;<=
span class=3D"pl-smi">Integer</span>&gt;</span> topKFrequent(<spa=
n class=3D"pl-k">int</span>[] nums, <span class=3D"pl-k">int</spa=
n> k) {=0A    <span class=3D"pl-k">List&lt;<span class=3D"pl-smi"=
>Integer</span>&gt;</span> ret <span class=3D"pl-k">=3D</span> <s=
pan class=3D"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&=
gt;</span>();=0A    <span class=3D"pl-k">Map&lt;<span class=3D"pl=
-smi">Integer</span>, <span class=3D"pl-smi">Integer</span>&gt;</=
span> map <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">ne=
w</span> <span class=3D"pl-k">HashMap&lt;&gt;</span>();=0A    <sp=
an class=3D"pl-k">for</span>(<span class=3D"pl-k">int</span> num=20=
<span class=3D"pl-k">:</span> nums) {=0A        map<span class=3D=
"pl-k">.</span>put(num, map<span class=3D"pl-k">.</span>getOrDefa=
ult(num, <span class=3D"pl-c1">0</span>) <span class=3D"pl-k">+</=
span> <span class=3D"pl-c1">1</span>);=0A    }=0A    <span class=3D=
"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</span>[]=
 bucket <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new<=
/span> <span class=3D"pl-smi">List</span>[nums<span class=3D"pl-k=
">.</span>length <span class=3D"pl-k">+</span> <span class=3D"pl-=
c1">1</span>];=0A    <span class=3D"pl-k">for</span>(<span class=3D=
"pl-k">int</span> key <span class=3D"pl-k">:</span> map<span clas=
s=3D"pl-k">.</span>keySet()) {=0A        <span class=3D"pl-k">int=
</span> frequency <span class=3D"pl-k">=3D</span> map<span class=3D=
"pl-k">.</span>get(key);=0A        <span class=3D"pl-k">if</span>=
(bucket[frequency] <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">null</span>) {=0A            bucket[frequency] <span c=
lass=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span cl=
ass=3D"pl-k">ArrayList&lt;&gt;</span>();=0A        }=0A        bu=
cket[frequency]<span class=3D"pl-k">.</span>add(key);=0A    }=0A=20=
   =0A    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">in=
t</span> i <span class=3D"pl-k">=3D</span> bucket<span class=3D"p=
l-k">.</span>length <span class=3D"pl-k">-</span> <span class=3D"=
pl-c1">1</span>; i <span class=3D"pl-k">&gt;=3D</span> <span clas=
s=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;&amp;</span> ret<s=
pan class=3D"pl-k">.</span>size() <span class=3D"pl-k">&lt;</span=
> k; i<span class=3D"pl-k">--</span>) {=0A        <span class=3D"=
pl-k">if</span>(bucket[i] <span class=3D"pl-k">!=3D</span> <span=20=
class=3D"pl-c1">null</span>) {=0A            ret<span class=3D"pl=
-k">.</span>addAll(bucket[i]);=0A        }=0A    }=0A    <span cl=
ass=3D"pl-k">return</span> ret;=0A}</pre></div><h2>=E6=90=9C=E7=B4=
=A2</h2><p>=E6=B7=B1=E5=BA=A6=E4=BC=98=E5=85=88=E6=90=9C=E7=B4=A2=
=E5=92=8C=E5=B9=BF=E5=BA=A6=E4=BC=98=E5=85=88=E6=90=9C=E7=B4=A2=E5=
=B9=BF=E6=B3=9B=E8=BF=90=E7=94=A8=E4=BA=8E=E6=A0=91=E5=92=8C=E5=9B=
=BE=E4=B8=AD=EF=BC=8C=E4=BD=86=E6=98=AF=E5=AE=83=E4=BB=AC=E7=9A=84=
=E5=BA=94=E7=94=A8=E8=BF=9C=E8=BF=9C=E4=B8=8D=E6=AD=A2=E5=A6=82=E6=
=AD=A4=E3=80=82</p><h3>BFS</h3><p><a href=3D"https://github.com/C=
yC2018/InterviewNotes/blob/master/pics/4ff355cf-9a7f-4468-af43-e5=
b02038facc.jpg" target=3D"_blank"><img src=3D"D:\=E6=96=87=E6=A1=A3=
\My Knowledge\temp\969fb8f2-eb58-4891-86ea-51bce0e90052\128\index=
_files\0.10856945993466005.png" alt=3D""></a></p><p>=E5=B9=BF=E5=BA=
=A6=E4=BC=98=E5=85=88=E6=90=9C=E7=B4=A2=E7=9A=84=E6=90=9C=E7=B4=A2=
=E8=BF=87=E7=A8=8B=E6=9C=89=E7=82=B9=E5=83=8F=E4=B8=80=E5=B1=82=E4=
=B8=80=E5=B1=82=E5=9C=B0=E8=BF=9B=E8=A1=8C=E9=81=8D=E5=8E=86=EF=BC=
=9A=E4=BB=8E=E8=8A=82=E7=82=B9 0 =E5=87=BA=E5=8F=91=EF=BC=8C=E9=81=
=8D=E5=8E=86=E5=88=B0 6=E3=80=812=E3=80=811 =E5=92=8C 5 =E8=BF=99=
=E5=9B=9B=E4=B8=AA=E6=96=B0=E8=8A=82=E7=82=B9=E3=80=82</p><p>=E7=BB=
=A7=E7=BB=AD=E4=BB=8E 6 =E5=BC=80=E5=A7=8B=E9=81=8D=E5=8E=86=EF=BC=
=8C=E5=BE=97=E5=88=B0=E8=8A=82=E7=82=B9 4 =EF=BC=9B=E4=BB=8E 2 =E5=
=BC=80=E5=A7=8B=E9=81=8D=E5=8E=86=EF=BC=8C=E6=B2=A1=E6=9C=89=E4=B8=
=8B=E4=B8=80=E4=B8=AA=E8=8A=82=E7=82=B9=EF=BC=9B=E4=BB=8E 1 =E5=BC=
=80=E5=A7=8B=E9=81=8D=E5=8E=86=EF=BC=8C=E6=B2=A1=E6=9C=89=E4=B8=8B=
=E4=B8=80=E4=B8=AA=E8=8A=82=E7=82=B9=EF=BC=9B=E4=BB=8E 5 =E5=BC=80=
=E5=A7=8B=E9=81=8D=E5=8E=86=EF=BC=8C=E5=BE=97=E5=88=B0 3 =E5=92=8C=
 4 =E8=8A=82=E7=82=B9=E3=80=82=E8=BF=99=E4=B8=80=E8=BD=AE=E6=80=BB=
=E5=85=B1=E5=BE=97=E5=88=B0=E4=B8=A4=E4=B8=AA=E6=96=B0=E8=8A=82=E7=
=82=B9=EF=BC=9A4 =E5=92=8C 3 =E3=80=82</p><p>=E5=8F=8D=E5=A4=8D=E4=
=BB=8E=E6=96=B0=E8=8A=82=E7=82=B9=E5=87=BA=E5=8F=91=E8=BF=9B=E8=A1=
=8C=E4=B8=8A=E8=BF=B0=E7=9A=84=E9=81=8D=E5=8E=86=E6=93=8D=E4=BD=9C=
=E3=80=82</p><p>=E5=8F=AF=E4=BB=A5=E7=9C=8B=E5=88=B0=EF=BC=8C=E6=AF=
=8F=E4=B8=80=E8=BD=AE=E9=81=8D=E5=8E=86=E7=9A=84=E8=8A=82=E7=82=B9=
=E9=83=BD=E4=B8=8E=E6=A0=B9=E8=8A=82=E7=82=B9=E8=B7=AF=E5=BE=84=E9=
=95=BF=E5=BA=A6=E7=9B=B8=E5=90=8C=E3=80=82=E8=AE=BE di<span class=
=3D"Apple-converted-space">&nbsp;</span>=E8=A1=A8=E7=A4=BA=E7=AC=AC=
 i =E4=B8=AA=E8=8A=82=E7=82=B9=E4=B8=8E=E6=A0=B9=E8=8A=82=E7=82=B9=
=E7=9A=84=E8=B7=AF=E5=BE=84=E9=95=BF=E5=BA=A6=EF=BC=8C=E6=8E=A8=E5=
=AF=BC=E5=87=BA=E4=B8=80=E4=B8=AA=E7=BB=93=E8=AE=BA=EF=BC=9A=E5=AF=
=B9=E4=BA=8E=E5=85=88=E9=81=8D=E5=8E=86=E7=9A=84=E8=8A=82=E7=82=B9=
 i =E4=B8=8E=E5=90=8E=E9=81=8D=E5=8E=86=E7=9A=84=E8=8A=82=E7=82=B9=
 j=EF=BC=8C=E6=9C=89 di&lt;=3Ddj=E3=80=82=E5=88=A9=E7=94=A8=E8=BF=
=99=E4=B8=AA=E7=BB=93=E8=AE=BA=EF=BC=8C=E5=8F=AF=E4=BB=A5=E6=B1=82=
=E8=A7=A3=E6=9C=80=E7=9F=AD=E8=B7=AF=E5=BE=84<span class=3D"Apple=
-converted-space">&nbsp;</span>=E6=9C=80=E4=BC=98=E8=A7=A3<span c=
lass=3D"Apple-converted-space">&nbsp;</span>=E9=97=AE=E9=A2=98=EF=
=BC=9A=E7=AC=AC=E4=B8=80=E6=AC=A1=E9=81=8D=E5=8E=86=E5=88=B0=E7=9B=
=AE=E7=9A=84=E8=8A=82=E7=82=B9=EF=BC=8C=E5=85=B6=E6=89=80=E7=BB=8F=
=E8=BF=87=E7=9A=84=E8=B7=AF=E5=BE=84=E4=B8=BA=E6=9C=80=E7=9F=AD=E8=
=B7=AF=E5=BE=84=EF=BC=8C=E5=A6=82=E6=9E=9C=E7=BB=A7=E7=BB=AD=E9=81=
=8D=E5=8E=86=EF=BC=8C=E4=B9=8B=E5=90=8E=E5=86=8D=E9=81=8D=E5=8E=86=
=E5=88=B0=E7=9B=AE=E7=9A=84=E8=8A=82=E7=82=B9=EF=BC=8C=E6=89=80=E7=
=BB=8F=E8=BF=87=E7=9A=84=E8=B7=AF=E5=BE=84=E5=B0=B1=E4=B8=8D=E6=98=
=AF=E6=9C=80=E7=9F=AD=E8=B7=AF=E5=BE=84=E3=80=82</p><p>=E5=9C=A8=E7=
=A8=8B=E5=BA=8F=E5=AE=9E=E7=8E=B0 BFS =E6=97=B6=E9=9C=80=E8=A6=81=
=E8=80=83=E8=99=91=E4=BB=A5=E4=B8=8B=E9=97=AE=E9=A2=98=EF=BC=9A</=
p><ul><li>=E9=98=9F=E5=88=97=EF=BC=9A=E7=94=A8=E6=9D=A5=E5=AD=98=E5=
=82=A8=E6=AF=8F=E4=B8=80=E8=BD=AE=E9=81=8D=E5=8E=86=E7=9A=84=E8=8A=
=82=E7=82=B9</li><li>=E6=A0=87=E8=AE=B0=EF=BC=9A=E5=AF=B9=E4=BA=8E=
=E9=81=8D=E5=8E=86=E8=BF=87=E5=BE=97=E8=8A=82=E7=82=B9=EF=BC=8C=E5=
=BA=94=E8=AF=A5=E5=B0=86=E5=AE=83=E6=A0=87=E8=AE=B0=EF=BC=8C=E9=98=
=B2=E6=AD=A2=E9=87=8D=E5=A4=8D=E9=81=8D=E5=8E=86=EF=BC=9B</li></u=
l><p>=E8=AE=A1=E7=AE=97=E5=9C=A8=E7=BD=91=E6=A0=BC=E4=B8=AD=E4=BB=
=8E=E5=8E=9F=E7=82=B9=E5=88=B0=E7=89=B9=E5=AE=9A=E7=82=B9=E7=9A=84=
=E6=9C=80=E7=9F=AD=E8=B7=AF=E5=BE=84=E9=95=BF=E5=BA=A6</p><div cl=
ass=3D"highlight highlight-text-html-basic"><pre>[[1,1,0,1],=0A[1=
,0,1,0],=0A[1,1,1,1],=0A[1,0,1,1]]</pre></div><div class=3D"highl=
ight highlight-source-java"><pre><span class=3D"pl-k">public</spa=
n> <span class=3D"pl-k">int</span> minPathLength(<span class=3D"p=
l-k">int</span>[][] grids, <span class=3D"pl-k">int</span> tr, <s=
pan class=3D"pl-k">int</span> tc) {=0A    <span class=3D"pl-k">in=
t</span>[][] next <span class=3D"pl-k">=3D</span> {{<span class=3D=
"pl-c1">1</span>, <span class=3D"pl-c1">0</span>}, {<span class=3D=
"pl-k">-</span><span class=3D"pl-c1">1</span>, <span class=3D"pl-=
c1">0</span>}, {<span class=3D"pl-c1">0</span>, <span class=3D"pl=
-c1">1</span>}, {<span class=3D"pl-c1">0</span>, <span class=3D"p=
l-k">-</span><span class=3D"pl-c1">1</span>}};=0A    <span class=3D=
"pl-k">int</span> m <span class=3D"pl-k">=3D</span> grids<span cl=
ass=3D"pl-k">.</span>length, n <span class=3D"pl-k">=3D</span> gr=
ids[<span class=3D"pl-c1">0</span>]<span class=3D"pl-k">.</span>l=
ength;=0A    <span class=3D"pl-k">Queue&lt;<span class=3D"pl-smi"=
>Position</span>&gt;</span> queue <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-k">new</span> <span class=3D"pl-k">LinkedList&=
lt;&gt;</span>();=0A    queue<span class=3D"pl-k">.</span>add(<sp=
an class=3D"pl-k">new</span> <span class=3D"pl-smi">Position</spa=
n>(<span class=3D"pl-c1">0</span>, <span class=3D"pl-c1">0</span>=
, <span class=3D"pl-c1">1</span>));=0A    <span class=3D"pl-k">wh=
ile</span> (<span class=3D"pl-k">!</span>queue<span class=3D"pl-k=
">.</span>isEmpty()) {=0A        <span class=3D"pl-smi">Position<=
/span> pos <span class=3D"pl-k">=3D</span> queue<span class=3D"pl=
-k">.</span>poll();=0A        <span class=3D"pl-k">for</span> (<s=
pan class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span>=
 <span class=3D"pl-c1">4</span>; i<span class=3D"pl-k">++</span>)=
 {=0A            <span class=3D"pl-smi">Position</span> nextPos <=
span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <s=
pan class=3D"pl-smi">Position</span>(pos<span class=3D"pl-k">.</s=
pan>r <span class=3D"pl-k">+</span> next[i][<span class=3D"pl-c1"=
>0</span>], pos<span class=3D"pl-k">.</span>c <span class=3D"pl-k=
">+</span> next[i][<span class=3D"pl-c1">1</span>], pos<span clas=
s=3D"pl-k">.</span>length <span class=3D"pl-k">+</span> <span cla=
ss=3D"pl-c1">1</span>);=0A            <span class=3D"pl-k">if</sp=
an> (nextPos<span class=3D"pl-k">.</span>r <span class=3D"pl-k">&=
lt;</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">||=
</span> nextPos<span class=3D"pl-k">.</span>r <span class=3D"pl-k=
">&gt;=3D</span> m <span class=3D"pl-k">||</span> nextPos<span cl=
ass=3D"pl-k">.</span>c <span class=3D"pl-k">&lt;</span> <span cla=
ss=3D"pl-c1">0</span> <span class=3D"pl-k">||</span> nextPos<span=
 class=3D"pl-k">.</span>c <span class=3D"pl-k">&gt;=3D</span> n)=20=
<span class=3D"pl-k">continue</span>;=0A            <span class=3D=
"pl-k">if</span> (grids[nextPos<span class=3D"pl-k">.</span>r][ne=
xtPos<span class=3D"pl-k">.</span>c] <span class=3D"pl-k">!=3D</s=
pan> <span class=3D"pl-c1">1</span>) <span class=3D"pl-k">continu=
e</span>;=0A            grids[nextPos<span class=3D"pl-k">.</span=
>r][nextPos<span class=3D"pl-k">.</span>c] <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-c1">0</span>;=0A            <span class=
=3D"pl-k">if</span> (nextPos<span class=3D"pl-k">.</span>r <span=20=
class=3D"pl-k">=3D=3D</span> tr <span class=3D"pl-k">&amp;&amp;</=
span> nextPos<span class=3D"pl-k">.</span>c <span class=3D"pl-k">=
=3D=3D</span> tc) <span class=3D"pl-k">return</span> nextPos<span=
 class=3D"pl-k">.</span>length;=0A            queue<span class=3D=
"pl-k">.</span>add(nextPos);=0A        }=0A    }=0A    <span clas=
s=3D"pl-k">return</span> <span class=3D"pl-k">-</span><span class=
=3D"pl-c1">1</span>;=0A}=0A=0A<span class=3D"pl-k">private</span>=
 <span class=3D"pl-k">class</span> <span class=3D"pl-en">Position=
</span> {=0A    <span class=3D"pl-k">int</span> r, c, length;=0A=20=
   <span class=3D"pl-k">public</span> <span class=3D"pl-en">Posit=
ion</span>(<span class=3D"pl-k">int</span> <span class=3D"pl-v">r=
</span>, <span class=3D"pl-k">int</span> <span class=3D"pl-v">c</=
span>, <span class=3D"pl-k">int</span> <span class=3D"pl-v">lengt=
h</span>) {=0A        <span class=3D"pl-c1">this</span><span clas=
s=3D"pl-k">.</span>r <span class=3D"pl-k">=3D</span> r;=0A      =20=
 <span class=3D"pl-c1">this</span><span class=3D"pl-k">.</span>c=20=
<span class=3D"pl-k">=3D</span> c;=0A        <span class=3D"pl-c1=
">this</span><span class=3D"pl-k">.</span>length <span class=3D"p=
l-k">=3D</span> length;=0A    }=0A}</pre></div><h3>DFS</h3><p><a=20=
href=3D"https://github.com/CyC2018/InterviewNotes/blob/master/pic=
s/f7f7e3e5-7dd4-4173-9999-576b9e2ac0a2.png" target=3D"_blank"><im=
g src=3D"D:\=E6=96=87=E6=A1=A3\My Knowledge\temp\969fb8f2-eb58-48=
91-86ea-51bce0e90052\128\index_files\0.9810681149897038.png" alt=3D=
""></a></p><p>=E5=B9=BF=E5=BA=A6=E4=BC=98=E5=85=88=E6=90=9C=E7=B4=
=A2=E4=B8=80=E5=B1=82=E4=B8=80=E5=B1=82=E9=81=8D=E5=8E=86=EF=BC=8C=
=E6=AF=8F=E4=B8=80=E5=B1=82=E9=81=8D=E5=8E=86=E5=88=B0=E7=9A=84=E6=
=89=80=E6=9C=89=E6=96=B0=E8=8A=82=E7=82=B9=EF=BC=8C=E8=A6=81=E7=94=
=A8=E9=98=9F=E5=88=97=E5=85=88=E5=AD=98=E5=82=A8=E8=B5=B7=E6=9D=A5=
=E4=BB=A5=E5=A4=87=E4=B8=8B=E4=B8=80=E5=B1=82=E9=81=8D=E5=8E=86=E7=
=9A=84=E6=97=B6=E5=80=99=E5=86=8D=E9=81=8D=E5=8E=86=EF=BC=9B=E8=80=
=8C=E6=B7=B1=E5=BA=A6=E4=BC=98=E5=85=88=E6=90=9C=E7=B4=A2=E5=9C=A8=
=E9=81=8D=E5=8E=86=E5=88=B0=E4=B8=80=E4=B8=AA=E6=96=B0=E8=8A=82=E7=
=82=B9=E6=97=B6=E7=AB=8B=E9=A9=AC=E5=AF=B9=E6=96=B0=E8=8A=82=E7=82=
=B9=E8=BF=9B=E8=A1=8C=E9=81=8D=E5=8E=86=EF=BC=9A=E4=BB=8E=E8=8A=82=
=E7=82=B9 0 =E5=87=BA=E5=8F=91=E5=BC=80=E5=A7=8B=E9=81=8D=E5=8E=86=
=EF=BC=8C=E5=BE=97=E5=88=B0=E5=88=B0=E6=96=B0=E8=8A=82=E7=82=B9 6=
 =E6=97=B6=EF=BC=8C=E7=AB=8B=E9=A9=AC=E5=AF=B9=E6=96=B0=E8=8A=82=E7=
=82=B9 6 =E8=BF=9B=E8=A1=8C=E9=81=8D=E5=8E=86=EF=BC=8C=E5=BE=97=E5=
=88=B0=E6=96=B0=E8=8A=82=E7=82=B9 4=EF=BC=9B=E5=A6=82=E6=AD=A4=E5=
=8F=8D=E5=A4=8D=E4=BB=A5=E8=BF=99=E7=A7=8D=E6=96=B9=E5=BC=8F=E9=81=
=8D=E5=8E=86=E6=96=B0=E8=8A=82=E7=82=B9=EF=BC=8C=E7=9B=B4=E5=88=B0=
=E6=B2=A1=E6=9C=89=E6=96=B0=E8=8A=82=E7=82=B9=E4=BA=86=EF=BC=8C=E6=
=AD=A4=E6=97=B6=E8=BF=94=E5=9B=9E=E3=80=82=E8=BF=94=E5=9B=9E=E5=88=
=B0=E6=A0=B9=E8=8A=82=E7=82=B9 0 =E7=9A=84=E6=83=85=E5=86=B5=E6=98=
=AF=EF=BC=8C=E7=BB=A7=E7=BB=AD=E5=AF=B9=E6=A0=B9=E8=8A=82=E7=82=B9=
 0 =E8=BF=9B=E8=A1=8C=E9=81=8D=E5=8E=86=EF=BC=8C=E5=BE=97=E5=88=B0=
=E6=96=B0=E8=8A=82=E7=82=B9 2=EF=BC=8C=E7=84=B6=E5=90=8E=E7=BB=A7=
=E7=BB=AD=E4=BB=A5=E4=B8=8A=E6=AD=A5=E9=AA=A4=E3=80=82</p><p>=E4=BB=
=8E=E4=B8=80=E4=B8=AA=E8=8A=82=E7=82=B9=E5=87=BA=E5=8F=91=EF=BC=8C=
=E4=BD=BF=E7=94=A8 DFS =E5=AF=B9=E4=B8=80=E4=B8=AA=E5=9B=BE=E8=BF=
=9B=E8=A1=8C=E9=81=8D=E5=8E=86=E6=97=B6=EF=BC=8C=E8=83=BD=E5=A4=9F=
=E9=81=8D=E5=8E=86=E5=88=B0=E7=9A=84=E8=8A=82=E7=82=B9=E9=83=BD=E6=
=98=AF=E4=BB=8E=E5=88=9D=E5=A7=8B=E8=8A=82=E7=82=B9=E5=8F=AF=E8=BE=
=BE=E7=9A=84=EF=BC=8CDFS =E5=B8=B8=E7=94=A8=E6=9D=A5=E6=B1=82=E8=A7=
=A3=E8=BF=99=E7=A7=8D<span class=3D"Apple-converted-space">&nbsp;=
</span>=E5=8F=AF=E8=BE=BE=E6=80=A7<span class=3D"Apple-converted-=
space">&nbsp;</span>=E9=97=AE=E9=A2=98=E3=80=82</p><p>=E5=9C=A8=E7=
=A8=8B=E5=BA=8F=E5=AE=9E=E7=8E=B0 DFS =E6=97=B6=E9=9C=80=E8=A6=81=
=E8=80=83=E8=99=91=E4=BB=A5=E4=B8=8B=E9=97=AE=E9=A2=98=EF=BC=9A</=
p><ul><li>=E6=A0=88=EF=BC=9A=E7=94=A8=E6=A0=88=E6=9D=A5=E4=BF=9D=E5=
=AD=98=E5=BD=93=E5=89=8D=E8=8A=82=E7=82=B9=E4=BF=A1=E6=81=AF=EF=BC=
=8C=E5=BD=93=E9=81=8D=E5=8E=86=E6=96=B0=E8=8A=82=E7=82=B9=E8=BF=94=
=E5=9B=9E=E6=97=B6=E8=83=BD=E5=A4=9F=E7=BB=A7=E7=BB=AD=E9=81=8D=E5=
=8E=86=E5=BD=93=E5=89=8D=E8=8A=82=E7=82=B9=E3=80=82=E4=B9=9F=E5=8F=
=AF=E4=BB=A5=E4=BD=BF=E7=94=A8=E9=80=92=E5=BD=92=E6=A0=88=E3=80=82=
</li><li>=E6=A0=87=E8=AE=B0=EF=BC=9A=E5=92=8C BFS =E4=B8=80=E6=A0=
=B7=E5=90=8C=E6=A0=B7=E9=9C=80=E8=A6=81=E5=AF=B9=E5=B7=B2=E7=BB=8F=
=E9=81=8D=E5=8E=86=E8=BF=87=E5=BE=97=E8=8A=82=E7=82=B9=E8=BF=9B=E8=
=A1=8C=E6=A0=87=E8=AE=B0=E3=80=82</li></ul><p>=E6=9F=A5=E6=89=BE=E6=
=9C=80=E5=A4=A7=E7=9A=84=E8=BF=9E=E9=80=9A=E9=9D=A2=E7=A7=AF</p><=
p><a href=3D"https://leetcode.com/problems/max-area-of-island/des=
cription/" target=3D"_blank">Leetcode : 695. Max Area of Island (=
Easy)</a></p><div class=3D"highlight highlight-text-html-basic"><=
pre>[[0,0,1,0,0,0,0,1,0,0,0,0,0],=0A[0,0,0,0,0,0,0,1,1,1,0,0,0],=0A=
[0,1,1,0,1,0,0,0,0,0,0,0,0],=0A[0,1,0,0,1,1,0,0,1,0,1,0,0],=0A[0,=
1,0,0,1,1,0,0,1,1,1,0,0],=0A[0,0,0,0,0,0,0,0,0,0,1,0,0],=0A[0,0,0=
,0,0,0,0,1,1,1,0,0,0],=0A[0,0,0,0,0,0,0,1,1,0,0,0,0]]</pre></div>=
<div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> maxAreaOfIsl=
and(<span class=3D"pl-k">int</span>[][] grid) {=0A    <span class=
=3D"pl-k">int</span> m <span class=3D"pl-k">=3D</span> grid<span=20=
class=3D"pl-k">.</span>length, n <span class=3D"pl-k">=3D</span>=20=
grid[<span class=3D"pl-c1">0</span>]<span class=3D"pl-k">.</span>=
length;=0A    <span class=3D"pl-k">int</span> max <span class=3D"=
pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A    <span clas=
s=3D"pl-k">for</span>(<span class=3D"pl-k">int</span> i <span cla=
ss=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span cl=
ass=3D"pl-k">&lt;</span> m; i<span class=3D"pl-k">++</span>){=0A=20=
       <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</=
span> j <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</=
span>; j <span class=3D"pl-k">&lt;</span> n; j<span class=3D"pl-k=
">++</span>){=0A            <span class=3D"pl-k">if</span>(grid[i=
][j] <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">1</=
span>) max <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi"=
>Math</span><span class=3D"pl-k">.</span>max(max, dfs(grid, i, j)=
);=0A        }=0A    }=0A    <span class=3D"pl-k">return</span> m=
ax;=0A}=0A=0A<span class=3D"pl-k">private</span> <span class=3D"p=
l-k">int</span> dfs(<span class=3D"pl-k">int</span>[][] grid, <sp=
an class=3D"pl-k">int</span> i, <span class=3D"pl-k">int</span> j=
){=0A    <span class=3D"pl-k">int</span> m <span class=3D"pl-k">=3D=
</span> grid<span class=3D"pl-k">.</span>length, n <span class=3D=
"pl-k">=3D</span> grid[<span class=3D"pl-c1">0</span>]<span class=
=3D"pl-k">.</span>length;=0A    <span class=3D"pl-k">if</span>(i=20=
<span class=3D"pl-k">&lt;</span> <span class=3D"pl-c1">0</span> <=
span class=3D"pl-k">||</span> i <span class=3D"pl-k">&gt;=3D</spa=
n> m <span class=3D"pl-k">||</span> j <span class=3D"pl-k">&lt;</=
span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">||</spa=
n> j <span class=3D"pl-k">&gt;=3D</span> n) <span class=3D"pl-k">=
return</span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D=
"pl-k">if</span>(grid[i][j] <span class=3D"pl-k">=3D=3D</span> <s=
pan class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span>=20=
<span class=3D"pl-c1">0</span>;=0A    grid[i][j] <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A    <span class=
=3D"pl-k">return</span> dfs(grid, i <span class=3D"pl-k">+</span>=
 <span class=3D"pl-c1">1</span>, j) <span class=3D"pl-k">+</span>=
 dfs(grid, i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">=
1</span>, j) <span class=3D"pl-k">+</span> dfs(grid, i, j <span c=
lass=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>) <span clas=
s=3D"pl-k">+</span> dfs(grid, i, j <span class=3D"pl-k">-</span>=20=
<span class=3D"pl-c1">1</span>) <span class=3D"pl-k">+</span> <sp=
an class=3D"pl-c1">1</span>;=0A}</pre></div><p>=E5=9B=BE=E7=9A=84=
=E8=BF=9E=E9=80=9A=E5=88=86=E9=87=8F</p><p><a href=3D"https://lee=
tcode.com/problems/friend-circles/description/" target=3D"_blank"=
>Leetcode : 547. Friend Circles (Medium)</a></p><div class=3D"hig=
hlight highlight-text-html-basic"><pre>Input:=0A[[1,1,0],=0A [1,1=
,0],=0A [0,0,1]]=0AOutput: 2=0AExplanation:The 0th and 1st studen=
ts are direct friends, so they are in a friend circle.=0AThe 2nd=20=
student himself is in a friend circle. So return 2.</pre></div><d=
iv class=3D"highlight highlight-source-java"><pre><span class=3D"=
pl-k">public</span> <span class=3D"pl-k">int</span> findCircleNum=
(<span class=3D"pl-k">int</span>[][] <span class=3D"pl-smi">M</sp=
an>) {=0A    <span class=3D"pl-k">int</span> n <span class=3D"pl-=
k">=3D</span> <span class=3D"pl-smi">M</span><span class=3D"pl-k"=
>.</span>length;=0A    <span class=3D"pl-k">int</span> ret <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A    <=
span class=3D"pl-k">boolean</span>[] hasFind <span class=3D"pl-k"=
>=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl-smi=
">boolean</span>[n];=0A    <span class=3D"pl-k">for</span>(<span=20=
class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span=
 class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> n;=20=
i<span class=3D"pl-k">++</span>) {=0A        <span class=3D"pl-k"=
>if</span>(<span class=3D"pl-k">!</span>hasFind[i]) {=0A        =20=
   dfs(<span class=3D"pl-smi">M</span>, i, hasFind);=0A         =20=
  ret<span class=3D"pl-k">++</span>;=0A        }=0A    }=0A    <s=
pan class=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D"pl-=
k">private</span> <span class=3D"pl-k">void</span> dfs(<span clas=
s=3D"pl-k">int</span>[][] <span class=3D"pl-smi">M</span>, <span=20=
class=3D"pl-k">int</span> i, <span class=3D"pl-k">boolean</span>[=
] hasFind) {=0A    hasFind[i] <span class=3D"pl-k">=3D</span> <sp=
an class=3D"pl-c1">true</span>;=0A    <span class=3D"pl-k">int</s=
pan> n <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi">M</=
span><span class=3D"pl-k">.</span>length;=0A    <span class=3D"pl=
-k">for</span>(<span class=3D"pl-k">int</span> k <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-c1">0</span>; k <span class=3D"=
pl-k">&lt;</span> n; k<span class=3D"pl-k">++</span>) {=0A      =20=
 <span class=3D"pl-k">if</span>(<span class=3D"pl-k">M</span>[i][=
k] <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">1</sp=
an> <span class=3D"pl-k">&amp;&amp;</span> <span class=3D"pl-k">!=
</span>hasFind[k]) {=0A            dfs(<span class=3D"pl-smi">M</=
span>, k, hasFind);=0A        }=0A    }=0A}</pre></div><p>=E7=9F=A9=
=E9=98=B5=E4=B8=AD=E7=9A=84=E8=BF=9E=E9=80=9A=E5=8C=BA=E5=9F=9F=E6=
=95=B0=E9=87=8F</p><p><a href=3D"https://leetcode.com/problems/nu=
mber-of-islands/description/" target=3D"_blank">Leetcode : 200. N=
umber of Islands (Medium)</a></p><div class=3D"highlight highligh=
t-text-html-basic"><pre>11110=0A11010=0A11000=0A00000=0AAnswer: 1=
</pre></div><div class=3D"highlight highlight-source-java"><pre><=
span class=3D"pl-k">private</span> <span class=3D"pl-k">int</span=
> m, n;=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k=
">int</span>[][] direction <span class=3D"pl-k">=3D</span> {{<spa=
n class=3D"pl-c1">0</span>, <span class=3D"pl-c1">1</span>}, {<sp=
an class=3D"pl-c1">0</span>, <span class=3D"pl-k">-</span><span c=
lass=3D"pl-c1">1</span>}, {<span class=3D"pl-c1">1</span>, <span=20=
class=3D"pl-c1">0</span>}, {<span class=3D"pl-k">-</span><span cl=
ass=3D"pl-c1">1</span>, <span class=3D"pl-c1">0</span>}};=0A=0A<s=
pan class=3D"pl-k">public</span> <span class=3D"pl-k">int</span>=20=
numIslands(<span class=3D"pl-k">char</span>[][] grid) {=0A    <sp=
an class=3D"pl-k">if</span> (grid <span class=3D"pl-k">=3D=3D</sp=
an> <span class=3D"pl-c1">null</span> <span class=3D"pl-k">||</sp=
an> grid<span class=3D"pl-k">.</span>length <span class=3D"pl-k">=
=3D=3D</span> <span class=3D"pl-c1">0</span>) <span class=3D"pl-k=
">return</span> <span class=3D"pl-c1">0</span>;=0A    m <span cla=
ss=3D"pl-k">=3D</span> grid<span class=3D"pl-k">.</span>length;=0A=
    n <span class=3D"pl-k">=3D</span> grid[<span class=3D"pl-c1">=
0</span>]<span class=3D"pl-k">.</span>length;=0A    <span class=3D=
"pl-k">int</span> ret <span class=3D"pl-k">=3D</span> <span class=
=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">for</span> (<span=
 class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> m;=
 i<span class=3D"pl-k">++</span>) {=0A        <span class=3D"pl-k=
">for</span> (<span class=3D"pl-k">int</span> j <span class=3D"pl=
-k">=3D</span> <span class=3D"pl-c1">0</span>; j <span class=3D"p=
l-k">&lt;</span> n; j<span class=3D"pl-k">++</span>) {=0A       =20=
    <span class=3D"pl-k">if</span> (grid[i][j] <span class=3D"pl-=
k">=3D=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</s=
pan>1<span class=3D"pl-pds">'</span></span>) {=0A               =20=
dfs(grid, i, j);=0A                ret<span class=3D"pl-k">++</sp=
an>;=0A            }=0A        }=0A    }=0A    <span class=3D"pl-=
k">return</span> ret;=0A}=0A=0A<span class=3D"pl-k">private</span=
> <span class=3D"pl-k">void</span> dfs(<span class=3D"pl-k">char<=
/span>[][] grid, <span class=3D"pl-k">int</span> i, <span class=3D=
"pl-k">int</span> j) {=0A    <span class=3D"pl-k">if</span> (i <s=
pan class=3D"pl-k">&lt;</span> <span class=3D"pl-c1">0</span> <sp=
an class=3D"pl-k">||</span> i <span class=3D"pl-k">&gt;=3D</span>=
 m <span class=3D"pl-k">||</span> j <span class=3D"pl-k">&lt;</sp=
an> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">||</span>=
 j <span class=3D"pl-k">&gt;=3D</span> n <span class=3D"pl-k">||<=
/span> grid[i][j] <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-s"><span class=3D"pl-pds">'</span>0<span class=3D"pl-pds">'</=
span></span>) <span class=3D"pl-k">return</span>;=0A    grid[i][j=
] <span class=3D"pl-k">=3D</span> <span class=3D"pl-s"><span clas=
s=3D"pl-pds">'</span>0<span class=3D"pl-pds">'</span></span>;=0A=20=
   <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int</spa=
n> k <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</spa=
n>; k <span class=3D"pl-k">&lt;</span> direction<span class=3D"pl=
-k">.</span>length; k<span class=3D"pl-k">++</span>) {=0A       =20=
dfs(grid, i <span class=3D"pl-k">+</span> direction[k][<span clas=
s=3D"pl-c1">0</span>], j <span class=3D"pl-k">+</span> direction[=
k][<span class=3D"pl-c1">1</span>]);=0A    }=0A}</pre></div><p>=E8=
=BE=93=E5=87=BA=E4=BA=8C=E5=8F=89=E6=A0=91=E4=B8=AD=E6=89=80=E6=9C=
=89=E4=BB=8E=E6=A0=B9=E5=88=B0=E5=8F=B6=E5=AD=90=E7=9A=84=E8=B7=AF=
=E5=BE=84</p><p><a href=3D"https://leetcode.com/problems/binary-t=
ree-paths/description/" target=3D"_blank">Leetcode : 257. Binary=20=
Tree Paths (Easy)</a></p><div class=3D"highlight highlight-text-h=
tml-basic"><pre>  1=0A/  \=0A2    3=0A\=0A  5</pre></div><div cla=
ss=3D"highlight highlight-text-html-basic"><pre>["1-&gt;2-&gt;5",=
 "1-&gt;3"]</pre></div><div class=3D"highlight highlight-source-j=
ava"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k"=
>List&lt;<span class=3D"pl-smi">String</span>&gt;</span> binaryTr=
eePaths(<span class=3D"pl-smi">TreeNode</span> root) {=0A    <spa=
n class=3D"pl-k">List&lt;<span class=3D"pl-smi">String</span>&gt;=
</span> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">=
new</span> <span class=3D"pl-smi">ArrayList</span>();=0A    <span=
 class=3D"pl-k">if</span>(root <span class=3D"pl-k">=3D=3D</span>=
 <span class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</=
span> ret;=0A    dfs(root, <span class=3D"pl-s"><span class=3D"pl=
-pds">"</span><span class=3D"pl-pds">"</span></span>, ret);=0A  =20=
 <span class=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D"=
pl-k">private</span> <span class=3D"pl-k">void</span> dfs(<span c=
lass=3D"pl-smi">TreeNode</span> root, <span class=3D"pl-smi">Stri=
ng</span> prefix, <span class=3D"pl-k">List&lt;<span class=3D"pl-=
smi">String</span>&gt;</span> ret){=0A    <span class=3D"pl-k">if=
</span>(root <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl=
-c1">null</span>) <span class=3D"pl-k">return</span>;=0A    <span=
 class=3D"pl-k">if</span>(root<span class=3D"pl-k">.</span>left <=
span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</spa=
n> <span class=3D"pl-k">&amp;&amp;</span> root<span class=3D"pl-k=
">.</span>right <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">null</span>){=0A        ret<span class=3D"pl-k">.</span>a=
dd(prefix <span class=3D"pl-k">+</span> root<span class=3D"pl-k">=
.</span>val);=0A        <span class=3D"pl-k">return</span>;=0A  =20=
 }=0A    prefix <span class=3D"pl-k">+=3D</span> (root<span class=
=3D"pl-k">.</span>val <span class=3D"pl-k">+</span> <span class=3D=
"pl-s"><span class=3D"pl-pds">"</span>-&gt;<span class=3D"pl-pds"=
>"</span></span>);=0A    dfs(root<span class=3D"pl-k">.</span>lef=
t, prefix, ret);=0A    dfs(root<span class=3D"pl-k">.</span>right=
, prefix, ret);=0A}</pre></div><p>=E5=A1=AB=E5=85=85=E5=B0=81=E9=97=
=AD=E5=8C=BA=E5=9F=9F</p><p><a href=3D"https://leetcode.com/probl=
ems/surrounded-regions/description/" target=3D"_blank">Leetcode :=
 130. Surrounded Regions (Medium)</a></p><div class=3D"highlight=20=
highlight-text-html-basic"><pre>For example,=0AX X X X=0AX O O X=0A=
X X O X=0AX O X X=0A=0AAfter running your function, the board sho=
uld be:=0AX X X X=0AX X X X=0AX X X X=0AX O X X</pre></div><p>=E9=
=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E4=BD=BF=E5=BE=97=E8=A2=
=AB 'X' =E7=9A=84 'O' =E8=BD=AC=E6=8D=A2=E4=B8=BA 'X'=E3=80=82</p=
><p>=E5=85=88=E5=A1=AB=E5=85=85=E6=9C=80=E5=A4=96=E4=BE=A7=EF=BC=8C=
=E5=89=A9=E4=B8=8B=E7=9A=84=E5=B0=B1=E6=98=AF=E9=87=8C=E4=BE=A7=E4=
=BA=86=E3=80=82</p><div class=3D"highlight highlight-source-java"=
><pre><span class=3D"pl-k">private</span> <span class=3D"pl-k">in=
t</span>[][] direction <span class=3D"pl-k">=3D</span> {{<span cl=
ass=3D"pl-c1">0</span>, <span class=3D"pl-c1">1</span>}, {<span c=
lass=3D"pl-c1">0</span>, <span class=3D"pl-k">-</span><span class=
=3D"pl-c1">1</span>}, {<span class=3D"pl-c1">1</span>, <span clas=
s=3D"pl-c1">0</span>}, {<span class=3D"pl-k">-</span><span class=3D=
"pl-c1">1</span>, <span class=3D"pl-c1">0</span>}};=0A<span class=
=3D"pl-k">private</span> <span class=3D"pl-k">int</span> m, n;=0A=
=0A<span class=3D"pl-k">public</span> <span class=3D"pl-k">void</=
span> solve(<span class=3D"pl-k">char</span>[][] board) {=0A    <=
span class=3D"pl-k">if</span> (board <span class=3D"pl-k">=3D=3D<=
/span> <span class=3D"pl-c1">null</span> <span class=3D"pl-k">||<=
/span> board<span class=3D"pl-k">.</span>length <span class=3D"pl=
-k">=3D=3D</span> <span class=3D"pl-c1">0</span>) <span class=3D"=
pl-k">return</span>;=0A    m <span class=3D"pl-k">=3D</span> boar=
d<span class=3D"pl-k">.</span>length;=0A    n <span class=3D"pl-k=
">=3D</span> board[<span class=3D"pl-c1">0</span>]<span class=3D"=
pl-k">.</span>length;=0A    <span class=3D"pl-k">for</span> (<spa=
n class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <sp=
an class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> m=
; i<span class=3D"pl-k">++</span>) {=0A        dfs(board, i, <spa=
n class=3D"pl-c1">0</span>);=0A        dfs(board, i, n <span clas=
s=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>);=0A    }=0A =20=
  <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span=
> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span=
>; i <span class=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">++=
</span>) {=0A        dfs(board, <span class=3D"pl-c1">0</span>, i=
);=0A        dfs(board, m <span class=3D"pl-k">-</span> <span cla=
ss=3D"pl-c1">1</span>, i);=0A    }=0A    <span class=3D"pl-k">for=
</span> (<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&l=
t;</span> m; i<span class=3D"pl-k">++</span>) {=0A        <span c=
lass=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> j <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; j <spa=
n class=3D"pl-k">&lt;</span> n; j<span class=3D"pl-k">++</span>)=20=
{=0A            <span class=3D"pl-k">if</span> (board[i][j] <span=
 class=3D"pl-k">=3D=3D</span> <span class=3D"pl-s"><span class=3D=
"pl-pds">'</span>T<span class=3D"pl-pds">'</span></span>) board[i=
][j] <span class=3D"pl-k">=3D</span> <span class=3D"pl-s"><span c=
lass=3D"pl-pds">'</span>O<span class=3D"pl-pds">'</span></span>;=0A=
            <span class=3D"pl-k">else</span> <span class=3D"pl-k"=
>if</span> (board[i][j] <span class=3D"pl-k">=3D=3D</span> <span=20=
class=3D"pl-s"><span class=3D"pl-pds">'</span>O<span class=3D"pl-=
pds">'</span></span>) board[i][j] <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-s"><span class=3D"pl-pds">'</span>X<span class=
=3D"pl-pds">'</span></span>;=0A        }=0A    }=0A}=0A=0A<span c=
lass=3D"pl-k">private</span> <span class=3D"pl-k">void</span> dfs=
(<span class=3D"pl-k">char</span>[][] board, <span class=3D"pl-k"=
>int</span> r, <span class=3D"pl-k">int</span> c) {=0A    <span c=
lass=3D"pl-k">if</span> (r <span class=3D"pl-k">&lt;</span> <span=
 class=3D"pl-c1">0</span> <span class=3D"pl-k">||</span> r <span=20=
class=3D"pl-k">&gt;=3D</span> m <span class=3D"pl-k">||</span> c=20=
<span class=3D"pl-k">&lt;</span> <span class=3D"pl-c1">0</span> <=
span class=3D"pl-k">||</span> c <span class=3D"pl-k">&gt;=3D</spa=
n> n <span class=3D"pl-k">||</span> board[r][c] <span class=3D"pl=
-k">!=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</sp=
an>O<span class=3D"pl-pds">'</span></span>) <span class=3D"pl-k">=
return</span>;=0A    board[r][c] <span class=3D"pl-k">=3D</span>=20=
<span class=3D"pl-s"><span class=3D"pl-pds">'</span>T<span class=3D=
"pl-pds">'</span></span>;=0A    <span class=3D"pl-k">for</span> (=
<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</spa=
n> direction<span class=3D"pl-k">.</span>length; i<span class=3D"=
pl-k">++</span>) {=0A        dfs(board, r <span class=3D"pl-k">+<=
/span> direction[i][<span class=3D"pl-c1">0</span>], c <span clas=
s=3D"pl-k">+</span> direction[i][<span class=3D"pl-c1">1</span>])=
;=0A    }=0A}</pre></div><p>=E4=BB=8E=E4=B8=A4=E4=B8=AA=E6=96=B9=E5=
=90=91=E9=83=BD=E8=83=BD=E5=88=B0=E8=BE=BE=E7=9A=84=E5=8C=BA=E5=9F=
=9F</p><p><a href=3D"https://leetcode.com/problems/pacific-atlant=
ic-water-flow/description/" target=3D"_blank">Leetcode : 417. Pac=
ific Atlantic Water Flow (Medium)</a></p><div class=3D"highlight=20=
highlight-text-html-basic"><pre>Given the following 5x5 matrix:=0A=
=0A  Pacific \~   \~   \~   \~   \~ =0A       \~  1   2   2   3 =20=
(5) *=0A       \~  3   2   3  (4) (4) *=0A       \~  2   4  (5) =20=
3   1  *=0A       \~ (6) (7)  1   4   5  *=0A       \~ (5)  1   1=
   2   4  *=0A          *   *   *   *   * Atlantic=0A=0AReturn:=0A=
[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positio=
ns with parentheses in above matrix).</pre></div><p>=E9=A2=98=E7=9B=
=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E5=B7=A6=E8=BE=B9=E5=92=8C=E4=B8=8A=
=E8=BE=B9=E6=98=AF<a href=3D"https://www.baidu.com/s?wd=3D%E5%A4%=
AA%E5%B9%B3%E6%B4%8B&amp;tn=3D24004469_oem_dg&amp;rsv_dl=3Dgh_pl_=
sl_csd" target=3D"_blank">=E5=A4=AA=E5=B9=B3=E6=B4=8B</a>=EF=BC=8C=
=E5=8F=B3=E8=BE=B9=E5=92=8C=E4=B8=8B=E8=BE=B9=E6=98=AF=E5=A4=A7=E8=
=A5=BF=E6=B4=8B=EF=BC=8C=E5=86=85=E9=83=A8=E7=9A=84=E6=95=B0=E5=AD=
=97=E4=BB=A3=E8=A1=A8=E6=B5=B7=E6=8B=94=EF=BC=8C=E6=B5=B7=E6=8B=94=
=E9=AB=98=E7=9A=84=E5=9C=B0=E6=96=B9=E7=9A=84=E6=B0=B4=E8=83=BD=E5=
=A4=9F=E6=B5=81=E5=88=B0=E4=BD=8E=E7=9A=84=E5=9C=B0=E6=96=B9=EF=BC=
=8C=E6=B1=82=E8=A7=A3=E6=B0=B4=E8=83=BD=E5=A4=9F=E6=B5=81=E5=88=B0=
=E5=A4=AA=E5=B9=B3=E6=B4=8B=E5=92=8C=E5=A4=A7=E8=A5=BF=E6=B4=8B=E7=
=9A=84=E6=89=80=E6=9C=89=E4=BD=8D=E7=BD=AE=E3=80=82</p><div class=
=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">pr=
ivate</span> <span class=3D"pl-k">int</span> m, n;=0A<span class=3D=
"pl-k">private</span> <span class=3D"pl-k">int</span>[][] matrix;=
=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k">int</=
span>[][] direction <span class=3D"pl-k">=3D</span> {{<span class=
=3D"pl-c1">0</span>, <span class=3D"pl-c1">1</span>}, {<span clas=
s=3D"pl-c1">0</span>, <span class=3D"pl-k">-</span><span class=3D=
"pl-c1">1</span>}, {<span class=3D"pl-c1">1</span>, <span class=3D=
"pl-c1">0</span>}, {<span class=3D"pl-k">-</span><span class=3D"p=
l-c1">1</span>, <span class=3D"pl-c1">0</span>}};=0A=0A<span clas=
s=3D"pl-k">public</span> <span class=3D"pl-k">List&lt;int[]&gt;</=
span> pacificAtlantic(<span class=3D"pl-k">int</span>[][] matrix)=
 {=0A    <span class=3D"pl-k">List&lt;int[]&gt;</span> ret <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span c=
lass=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <span class=3D"pl=
-k">if</span> (matrix <span class=3D"pl-k">=3D=3D</span> <span cl=
ass=3D"pl-c1">null</span> <span class=3D"pl-k">||</span> matrix<s=
pan class=3D"pl-k">.</span>length <span class=3D"pl-k">=3D=3D</sp=
an> <span class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</=
span> ret;=0A    <span class=3D"pl-c1">this</span><span class=3D"=
pl-k">.</span>m <span class=3D"pl-k">=3D</span> matrix<span class=
=3D"pl-k">.</span>length;=0A    <span class=3D"pl-c1">this</span>=
<span class=3D"pl-k">.</span>n <span class=3D"pl-k">=3D</span> ma=
trix[<span class=3D"pl-c1">0</span>]<span class=3D"pl-k">.</span>=
length;=0A    <span class=3D"pl-c1">this</span><span class=3D"pl-=
k">.</span>matrix <span class=3D"pl-k">=3D</span> matrix;=0A    <=
span class=3D"pl-k">boolean</span>[][] canReachP <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl=
-smi">boolean</span>[m][n];=0A    <span class=3D"pl-k">boolean</s=
pan>[][] canReachA <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-k">new</span> <span class=3D"pl-smi">boolean</span>[m][n];=0A=
    <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int</sp=
an> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</sp=
an>; i <span class=3D"pl-k">&lt;</span> m; i<span class=3D"pl-k">=
++</span>) {=0A        dfs(i, <span class=3D"pl-c1">0</span>, can=
ReachP);=0A        dfs(i, n <span class=3D"pl-k">-</span> <span c=
lass=3D"pl-c1">1</span>, canReachA);=0A    }=0A    <span class=3D=
"pl-k">for</span> (<span class=3D"pl-k">int</span> i <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D=
"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span>) {=0A     =20=
  dfs(<span class=3D"pl-c1">0</span>, i, canReachP);=0A        df=
s(m <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>,=
 i, canReachA);=0A    }=0A    <span class=3D"pl-k">for</span> (<s=
pan class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span>=
 m; i<span class=3D"pl-k">++</span>) {=0A        <span class=3D"p=
l-k">for</span> (<span class=3D"pl-k">int</span> j <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; j <span class=3D=
"pl-k">&lt;</span> n; j<span class=3D"pl-k">++</span>) {=0A     =20=
      <span class=3D"pl-k">if</span> (canReachP[i][j] <span class=
=3D"pl-k">&amp;&amp;</span> canReachA[i][j]) {=0A               =20=
ret<span class=3D"pl-k">.</span>add(<span class=3D"pl-k">new</spa=
n> <span class=3D"pl-smi">int</span>[]{i, j});=0A            }=0A=
        }=0A    }=0A    <span class=3D"pl-k">return</span> ret;=0A=
}=0A=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k">v=
oid</span> dfs(<span class=3D"pl-k">int</span> r, <span class=3D"=
pl-k">int</span> c, <span class=3D"pl-k">boolean</span>[][] canRe=
ach) {=0A    <span class=3D"pl-k">if</span>(canReach[r][c]) <span=
 class=3D"pl-k">return</span>;=0A    canReach[r][c] <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">true</span>;=0A    <span=20=
class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <spa=
n class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <sp=
an class=3D"pl-k">&lt;</span> direction<span class=3D"pl-k">.</sp=
an>length; i<span class=3D"pl-k">++</span>) {=0A        <span cla=
ss=3D"pl-k">int</span> nextR <span class=3D"pl-k">=3D</span> dire=
ction[i][<span class=3D"pl-c1">0</span>] <span class=3D"pl-k">+</=
span> r;=0A        <span class=3D"pl-k">int</span> nextC <span cl=
ass=3D"pl-k">=3D</span> direction[i][<span class=3D"pl-c1">1</spa=
n>] <span class=3D"pl-k">+</span> c;=0A        <span class=3D"pl-=
k">if</span> (nextR <span class=3D"pl-k">&lt;</span> <span class=3D=
"pl-c1">0</span> <span class=3D"pl-k">||</span> nextR <span class=
=3D"pl-k">&gt;=3D</span> m <span class=3D"pl-k">||</span> nextC <=
span class=3D"pl-k">&lt;</span> <span class=3D"pl-c1">0</span> <s=
pan class=3D"pl-k">||</span> nextC <span class=3D"pl-k">&gt;=3D</=
span> n=0A                <span class=3D"pl-k">||</span> matrix[r=
][c] <span class=3D"pl-k">&gt;</span> matrix[nextR][nextC]) <span=
 class=3D"pl-k">continue</span>;=0A        dfs(nextR, nextC, canR=
each);=0A    }=0A}</pre></div><p>N =E7=9A=87=E5=90=8E</p><p><a hr=
ef=3D"https://leetcode.com/problems/n-queens/description/" target=
=3D"_blank">Leetcode : 51. N-Queens (Hard)</a></p><p><a href=3D"h=
ttps://github.com/CyC2018/InterviewNotes/blob/master/pics/1f080e5=
3-4758-406c-bb5f-dbedf89b63ce.jpg" target=3D"_blank"><img src=3D"=
D:\=E6=96=87=E6=A1=A3\My Knowledge\temp\969fb8f2-eb58-4891-86ea-5=
1bce0e90052\128\index_files\0.24006901011572568.png" alt=3D""></a=
></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E5=9C=A8 n*=
n =E7=9A=84=E7=9F=A9=E9=98=B5=E4=B8=AD=E6=91=86=E6=94=BE n =E4=B8=
=AA=E7=9A=87=E5=90=8E=EF=BC=8C=E5=B9=B6=E4=B8=94=E6=AF=8F=E4=B8=AA=
=E7=9A=87=E5=90=8E=E4=B8=8D=E8=83=BD=E5=9C=A8=E5=90=8C=E4=B8=80=E8=
=A1=8C=EF=BC=8C=E5=90=8C=E4=B8=80=E5=88=97=EF=BC=8C=E5=90=8C=E4=B8=
=80=E5=AF=B9=E8=A7=92=E7=BA=BF=E4=B8=8A=EF=BC=8C=E8=A6=81=E6=B1=82=
=E8=A7=A3=E6=89=80=E6=9C=89=E7=9A=84 n =E7=9A=87=E5=90=8E=E8=A7=A3=
=E3=80=82</p><p>=E4=B8=80=E8=A1=8C=E4=B8=80=E8=A1=8C=E5=9C=B0=E6=91=
=86=E6=94=BE=EF=BC=8C=E5=9C=A8=E7=A1=AE=E5=AE=9A=E4=B8=80=E8=A1=8C=
=E4=B8=AD=E7=9A=84=E9=82=A3=E4=B8=AA=E7=9A=87=E5=90=8E=E5=BA=94=E8=
=AF=A5=E6=91=86=E5=9C=A8=E5=93=AA=E4=B8=80=E5=88=97=E6=97=B6=EF=BC=
=8C=E9=9C=80=E8=A6=81=E7=94=A8=E4=B8=89=E4=B8=AA=E6=A0=87=E8=AE=B0=
=E6=95=B0=E7=BB=84=E6=9D=A5=E7=A1=AE=E5=AE=9A=E6=9F=90=E4=B8=80=E5=
=88=97=E6=98=AF=E5=90=A6=E5=90=88=E6=B3=95=EF=BC=8C=E8=BF=99=E4=B8=
=89=E4=B8=AA=E6=A0=87=E8=AE=B0=E6=95=B0=E7=BB=84=E5=88=86=E5=88=AB=
=E4=B8=BA=EF=BC=9A=E5=88=97=E6=A0=87=E8=AE=B0=E6=95=B0=E7=BB=84=E3=
=80=8145 =E5=BA=A6=E5=AF=B9=E8=A7=92=E7=BA=BF=E6=A0=87=E8=AE=B0=E6=
=95=B0=E7=BB=84=E5=92=8C 135 =E5=BA=A6=E5=AF=B9=E8=A7=92=E7=BA=BF=
=E6=A0=87=E8=AE=B0=E6=95=B0=E7=BB=84=E3=80=82</p><p>45 =E5=BA=A6=E5=
=AF=B9=E8=A7=92=E7=BA=BF=E6=A0=87=E8=AE=B0=E6=95=B0=E7=BB=84=E7=9A=
=84=E7=BB=B4=E5=BA=A6=E4=B8=BA 2*n - 1=EF=BC=8C=E9=80=9A=E8=BF=87=
=E4=B8=8B=E5=9B=BE=E5=8F=AF=E4=BB=A5=E6=98=8E=E7=A1=AE (r,c) =E7=9A=
=84=E4=BD=8D=E7=BD=AE=E6=89=80=E5=9C=A8=E7=9A=84=E6=95=B0=E7=BB=84=
=E4=B8=8B=E6=A0=87=E4=B8=BA r + c=E3=80=82</p><p><a href=3D"https=
://github.com/CyC2018/InterviewNotes/blob/master/pics/85583359-1b=
45-45f2-9811-4f7bb9a64db7.jpg" target=3D"_blank"><img src=3D"D:\=E6=
=96=87=E6=A1=A3\My Knowledge\temp\969fb8f2-eb58-4891-86ea-51bce0e=
90052\128\index_files\0.9217961213288917.png" alt=3D""></a></p><p=
>135 =E5=BA=A6=E5=AF=B9=E8=A7=92=E7=BA=BF=E6=A0=87=E8=AE=B0=E6=95=
=B0=E7=BB=84=E7=9A=84=E7=BB=B4=E5=BA=A6=E4=B9=9F=E6=98=AF 2*n - 1=
=EF=BC=8C(r,c) =E7=9A=84=E4=BD=8D=E7=BD=AE=E6=89=80=E5=9C=A8=E7=9A=
=84=E6=95=B0=E7=BB=84=E4=B8=8B=E6=A0=87=E4=B8=BA n - 1 - (r - c)=E3=
=80=82</p><p><a href=3D"https://github.com/CyC2018/InterviewNotes=
/blob/master/pics/9e80f75a-b12b-4344-80c8-1f9ccc2d5246.jpg" targe=
t=3D"_blank"><img src=3D"D:\=E6=96=87=E6=A1=A3\My Knowledge\temp\=
969fb8f2-eb58-4891-86ea-51bce0e90052\128\index_files\0.9891150324=
63993.png" alt=3D""></a></p><div class=3D"highlight highlight-sou=
rce-java"><pre><span class=3D"pl-k">private</span> <span class=3D=
"pl-k">List&lt;<span class=3D"pl-k">List&lt;<span class=3D"pl-smi=
">String</span>&gt;</span>&gt;</span> ret;=0A<span class=3D"pl-k"=
>private</span> <span class=3D"pl-k">char</span>[][] nQueens;=0A<=
span class=3D"pl-k">private</span> <span class=3D"pl-k">boolean</=
span>[] colUsed;=0A<span class=3D"pl-k">private</span> <span clas=
s=3D"pl-k">boolean</span>[] diagonals45Used;=0A<span class=3D"pl-=
k">private</span> <span class=3D"pl-k">boolean</span>[] diagonals=
135Used;=0A<span class=3D"pl-k">private</span> <span class=3D"pl-=
k">int</span> n;=0A=0A<span class=3D"pl-k">public</span> <span cl=
ass=3D"pl-k">List&lt;<span class=3D"pl-k">List&lt;<span class=3D"=
pl-smi">String</span>&gt;</span>&gt;</span> solveNQueens(<span cl=
ass=3D"pl-k">int</span> n) {=0A    ret <span class=3D"pl-k">=3D</=
span> <span class=3D"pl-k">new</span> <span class=3D"pl-k">ArrayL=
ist&lt;&gt;</span>();=0A    nQueens <span class=3D"pl-k">=3D</spa=
n> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">char</s=
pan>[n][n];=0A    <span class=3D"pl-smi">Arrays</span><span class=
=3D"pl-k">.</span>fill(nQueens, <span class=3D"pl-s"><span class=3D=
"pl-pds">'</span>.<span class=3D"pl-pds">'</span></span>);=0A   =20=
colUsed <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new<=
/span> <span class=3D"pl-smi">boolean</span>[n];=0A    diagonals4=
5Used <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</s=
pan> <span class=3D"pl-smi">boolean</span>[<span class=3D"pl-c1">=
2</span> <span class=3D"pl-k">*</span> n <span class=3D"pl-k">-</=
span> <span class=3D"pl-c1">1</span>];=0A    diagonals135Used <sp=
an class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <spa=
n class=3D"pl-smi">boolean</span>[<span class=3D"pl-c1">2</span>=20=
<span class=3D"pl-k">*</span> n <span class=3D"pl-k">-</span> <sp=
an class=3D"pl-c1">1</span>];=0A    <span class=3D"pl-c1">this</s=
pan><span class=3D"pl-k">.</span>n <span class=3D"pl-k">=3D</span=
> n;=0A    backstracking(<span class=3D"pl-c1">0</span>);=0A    <=
span class=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D"pl=
-k">private</span> <span class=3D"pl-k">void</span> backstracking=
(<span class=3D"pl-k">int</span> row) {=0A    <span class=3D"pl-k=
">if</span> (row <span class=3D"pl-k">=3D=3D</span> n) {=0A     =20=
  <span class=3D"pl-k">List&lt;<span class=3D"pl-smi">String</spa=
n>&gt;</span> list <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>()=
;=0A        <span class=3D"pl-k">for</span> (<span class=3D"pl-k"=
>char</span>[] chars <span class=3D"pl-k">:</span> nQueens) {=0A=20=
           list<span class=3D"pl-k">.</span>add(<span class=3D"pl=
-k">new</span> <span class=3D"pl-smi">String</span>(chars));=0A =20=
      }=0A        ret<span class=3D"pl-k">.</span>add(list);=0A =20=
      <span class=3D"pl-k">return</span>;=0A    }=0A=0A    <span=20=
class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> col <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; col=
 <span class=3D"pl-k">&lt;</span> n; col<span class=3D"pl-k">++</=
span>) {=0A        <span class=3D"pl-k">int</span> diagonals45Idx=
 <span class=3D"pl-k">=3D</span> row <span class=3D"pl-k">+</span=
> col;=0A        <span class=3D"pl-k">int</span> diagonals135Idx=20=
<span class=3D"pl-k">=3D</span> n <span class=3D"pl-k">-</span> <=
span class=3D"pl-c1">1</span> <span class=3D"pl-k">-</span> (row=20=
<span class=3D"pl-k">-</span> col);=0A        <span class=3D"pl-k=
">if</span> (colUsed[col] <span class=3D"pl-k">||</span> diagonal=
s45Used[diagonals45Idx] <span class=3D"pl-k">||</span> diagonals1=
35Used[diagonals135Idx]) {=0A            <span class=3D"pl-k">con=
tinue</span>;=0A        }=0A        nQueens[row][col] <span class=
=3D"pl-k">=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">=
'</span>Q<span class=3D"pl-pds">'</span></span>;=0A        colUse=
d[col] <span class=3D"pl-k">=3D</span> diagonals45Used[diagonals4=
5Idx] <span class=3D"pl-k">=3D</span> diagonals135Used[diagonals1=
35Idx] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">true=
</span>;=0A        backstracking(row <span class=3D"pl-k">+</span=
> <span class=3D"pl-c1">1</span>);=0A        colUsed[col] <span c=
lass=3D"pl-k">=3D</span> diagonals45Used[diagonals45Idx] <span cl=
ass=3D"pl-k">=3D</span> diagonals135Used[diagonals135Idx] <span c=
lass=3D"pl-k">=3D</span> <span class=3D"pl-c1">false</span>;=0A =20=
      nQueens[row][col] <span class=3D"pl-k">=3D</span> <span cla=
ss=3D"pl-s"><span class=3D"pl-pds">'</span>.<span class=3D"pl-pds=
">'</span></span>;=0A    }=0A}</pre></div><h3>Backtracking</h3><p=
>=E5=9B=9E=E6=BA=AF=E6=98=AF DFS =E7=9A=84=E4=B8=80=E7=A7=8D=EF=BC=
=8C=E5=AE=83=E4=B8=8D=E6=98=AF=E7=94=A8=E5=9C=A8=E9=81=8D=E5=8E=86=
=E5=9B=BE=E7=9A=84=E8=8A=82=E7=82=B9=E4=B8=8A=EF=BC=8C=E8=80=8C=E6=
=98=AF=E7=94=A8=E4=BA=8E=E6=B1=82=E8=A7=A3<span class=3D"Apple-co=
nverted-space">&nbsp;</span>=E6=8E=92=E5=88=97=E7=BB=84=E5=90=88<=
span class=3D"Apple-converted-space">&nbsp;</span>=E9=97=AE=E9=A2=
=98=EF=BC=8C=E4=BE=8B=E5=A6=82=E6=9C=89 { 'a','b','c' } =E4=B8=89=
=E4=B8=AA=E5=AD=97=E7=AC=A6=EF=BC=8C=E6=B1=82=E8=A7=A3=E6=89=80=E6=
=9C=89=E7=94=B1=E8=BF=99=E4=B8=89=E4=B8=AA=E5=AD=97=E7=AC=A6=E6=8E=
=92=E5=88=97=E5=BE=97=E5=88=B0=E7=9A=84=E5=AD=97=E7=AC=A6=E4=B8=B2=
=E3=80=82</p><p>=E5=9C=A8=E7=A8=8B=E5=BA=8F=E5=AE=9E=E7=8E=B0=E6=97=
=B6=EF=BC=8C=E5=9B=9E=E6=BA=AF=E9=9C=80=E8=A6=81=E6=B3=A8=E6=84=8F=
=E5=AF=B9=E5=85=83=E7=B4=A0=E8=BF=9B=E8=A1=8C=E6=A0=87=E8=AE=B0=E7=
=9A=84=E9=97=AE=E9=A2=98=E3=80=82=E4=BD=BF=E7=94=A8=E9=80=92=E5=BD=
=92=E5=AE=9E=E7=8E=B0=E7=9A=84=E5=9B=9E=E6=BA=AF=EF=BC=8C=E5=9C=A8=
=E8=AE=BF=E9=97=AE=E4=B8=80=E4=B8=AA=E6=96=B0=E5=85=83=E7=B4=A0=E8=
=BF=9B=E5=85=A5=E6=96=B0=E7=9A=84=E9=80=92=E5=BD=92=E8=B0=83=E7=94=
=A8=EF=BC=8C=E6=AD=A4=E6=97=B6=E9=9C=80=E8=A6=81=E5=B0=86=E6=96=B0=
=E5=85=83=E7=B4=A0=E6=A0=87=E8=AE=B0=E4=B8=BA=E5=B7=B2=E7=BB=8F=E8=
=AE=BF=E9=97=AE=EF=BC=8C=E8=BF=99=E6=A0=B7=E6=89=8D=E8=83=BD=E5=9C=
=A8=E7=BB=A7=E7=BB=AD=E9=80=92=E5=BD=92=E8=B0=83=E7=94=A8=E6=97=B6=
=E4=B8=8D=E7=94=A8=E9=87=8D=E5=A4=8D=E8=AE=BF=E9=97=AE=E8=AF=A5=E5=
=85=83=E7=B4=A0=EF=BC=9B=E4=BD=86=E6=98=AF=E5=9C=A8=E9=80=92=E5=BD=
=92=E8=BF=94=E5=9B=9E=E6=97=B6=EF=BC=8C=E9=9C=80=E8=A6=81=E5=B0=86=
=E8=AF=A5=E5=85=83=E7=B4=A0=E6=A0=87=E8=AE=B0=E4=B8=BA=E6=9C=AA=E8=
=AE=BF=E9=97=AE=EF=BC=8C=E5=9B=A0=E4=B8=BA=E5=8F=AA=E9=9C=80=E8=A6=
=81=E4=BF=9D=E8=AF=81=E5=9C=A8=E4=B8=80=E4=B8=AA=E9=80=92=E5=BD=92=
=E9=93=BE=E4=B8=AD=E4=B8=8D=E5=90=8C=E6=97=B6=E8=AE=BF=E9=97=AE=E4=
=B8=80=E4=B8=AA=E5=85=83=E7=B4=A0=EF=BC=8C=E8=80=8C=E5=9C=A8=E4=B8=
=8D=E5=90=8C=E7=9A=84=E9=80=92=E5=BD=92=E9=93=BE=E6=98=AF=E5=8F=AF=
=E4=BB=A5=E8=AE=BF=E9=97=AE=E5=B7=B2=E7=BB=8F=E8=AE=BF=E9=97=AE=E8=
=BF=87=E4=BD=86=E6=98=AF=E4=B8=8D=E5=9C=A8=E5=BD=93=E5=89=8D=E9=80=
=92=E5=BD=92=E9=93=BE=E4=B8=AD=E7=9A=84=E5=85=83=E7=B4=A0=E3=80=82=
</p><p>=E6=95=B0=E5=AD=97=E9=94=AE=E7=9B=98=E7=BB=84=E5=90=88</p>=
<p><a href=3D"https://leetcode.com/problems/letter-combinations-o=
f-a-phone-number/description/" target=3D"_blank">Leetcode : 17. L=
etter Combinations of a Phone Number (Medium)</a></p><p><a href=3D=
"https://github.com/CyC2018/InterviewNotes/blob/master/pics/a3f34=
241-bb80-4879-8ec9-dff2d81b514e.jpg" target=3D"_blank"><img src=3D=
"D:\=E6=96=87=E6=A1=A3\My Knowledge\temp\969fb8f2-eb58-4891-86ea-=
51bce0e90052\128\index_files\0.7505186556682106.png" alt=3D""></a=
></p><div class=3D"highlight highlight-text-html-basic"><pre>Inpu=
t:Digit string "23"=0AOutput: ["ad", "ae", "af", "bd", "be", "bf"=
, "cd", "ce", "cf"].</pre></div><div class=3D"highlight highlight=
-source-java"><pre><span class=3D"pl-k">private</span> <span clas=
s=3D"pl-k">static</span> <span class=3D"pl-k">final</span> <span=20=
class=3D"pl-k">String</span>[] <span class=3D"pl-c1">KEYS</span>=20=
<span class=3D"pl-k">=3D</span> {<span class=3D"pl-s"><span class=
=3D"pl-pds">"</span><span class=3D"pl-pds">"</span></span>, <span=
 class=3D"pl-s"><span class=3D"pl-pds">"</span><span class=3D"pl-=
pds">"</span></span>, <span class=3D"pl-s"><span class=3D"pl-pds"=
>"</span>abc<span class=3D"pl-pds">"</span></span>, <span class=3D=
"pl-s"><span class=3D"pl-pds">"</span>def<span class=3D"pl-pds">"=
</span></span>, <span class=3D"pl-s"><span class=3D"pl-pds">"</sp=
an>ghi<span class=3D"pl-pds">"</span></span>, <span class=3D"pl-s=
"><span class=3D"pl-pds">"</span>jkl<span class=3D"pl-pds">"</spa=
n></span>, <span class=3D"pl-s"><span class=3D"pl-pds">"</span>mn=
o<span class=3D"pl-pds">"</span></span>, <span class=3D"pl-s"><sp=
an class=3D"pl-pds">"</span>pqrs<span class=3D"pl-pds">"</span></=
span>, <span class=3D"pl-s"><span class=3D"pl-pds">"</span>tuv<sp=
an class=3D"pl-pds">"</span></span>, <span class=3D"pl-s"><span c=
lass=3D"pl-pds">"</span>wxyz<span class=3D"pl-pds">"</span></span=
>};=0A=0A<span class=3D"pl-k">public</span> <span class=3D"pl-k">=
List&lt;<span class=3D"pl-smi">String</span>&gt;</span> letterCom=
binations(<span class=3D"pl-smi">String</span> digits) {=0A    <s=
pan class=3D"pl-k">List&lt;<span class=3D"pl-smi">String</span>&g=
t;</span> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-k=
">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A=20=
   <span class=3D"pl-k">if</span> (digits <span class=3D"pl-k">!=3D=
</span> <span class=3D"pl-c1">null</span> <span class=3D"pl-k">&a=
mp;&amp;</span> digits<span class=3D"pl-k">.</span>length() <span=
 class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">0</span>) {=0A=20=
       combination(<span class=3D"pl-s"><span class=3D"pl-pds">"<=
/span><span class=3D"pl-pds">"</span></span>, digits, <span class=
=3D"pl-c1">0</span>, ret);=0A    }=0A    <span class=3D"pl-k">ret=
urn</span> ret;=0A}=0A=0A<span class=3D"pl-k">private</span> <spa=
n class=3D"pl-k">void</span> combination(<span class=3D"pl-smi">S=
tring</span> prefix, <span class=3D"pl-smi">String</span> digits,=
 <span class=3D"pl-k">int</span> offset, <span class=3D"pl-k">Lis=
t&lt;<span class=3D"pl-smi">String</span>&gt;</span> ret) {=0A  =20=
 <span class=3D"pl-k">if</span> (offset <span class=3D"pl-k">=3D=3D=
</span> digits<span class=3D"pl-k">.</span>length()) {=0A       =20=
ret<span class=3D"pl-k">.</span>add(prefix);=0A        <span clas=
s=3D"pl-k">return</span>;=0A    }=0A    <span class=3D"pl-smi">St=
ring</span> letters <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">KEYS</span>[digits<span class=3D"pl-k">.</span>charAt(off=
set) <span class=3D"pl-k">-</span> <span class=3D"pl-s"><span cla=
ss=3D"pl-pds">'</span>0<span class=3D"pl-pds">'</span></span>];=0A=
    <span class=3D"pl-k">for</span> (<span class=3D"pl-k">char</s=
pan> c <span class=3D"pl-k">:</span> letters<span class=3D"pl-k">=
.</span>toCharArray()) {=0A        combination(prefix <span class=
=3D"pl-k">+</span> c, digits, offset <span class=3D"pl-k">+</span=
> <span class=3D"pl-c1">1</span>, ret);=0A    }=0A}</pre></div><p=
>=E5=9C=A8=E7=9F=A9=E9=98=B5=E4=B8=AD=E5=AF=BB=E6=89=BE=E5=AD=97=E7=
=AC=A6=E4=B8=B2</p><p><a href=3D"https://leetcode.com/problems/wo=
rd-search/description/" target=3D"_blank">Leetcode : 79. Word Sea=
rch (Medium)</a></p><div class=3D"highlight highlight-text-html-b=
asic"><pre>For example,=0AGiven board =3D=0A[=0A  ['A','B','C','E=
'],=0A  ['S','F','C','S'],=0A  ['A','D','E','E']=0A]=0Aword =3D "=
ABCCED", -&gt; returns true,=0Aword =3D "SEE", -&gt; returns true=
,=0Aword =3D "ABCB", -&gt; returns false.</pre></div><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">priva=
te</span> <span class=3D"pl-k">static</span> <span class=3D"pl-k"=
>int</span>[][] shift <span class=3D"pl-k">=3D</span> {{<span cla=
ss=3D"pl-c1">1</span>, <span class=3D"pl-c1">0</span>}, {<span cl=
ass=3D"pl-k">-</span><span class=3D"pl-c1">1</span>, <span class=3D=
"pl-c1">0</span>}, {<span class=3D"pl-c1">0</span>, <span class=3D=
"pl-c1">1</span>}, {<span class=3D"pl-c1">0</span>, <span class=3D=
"pl-k">-</span><span class=3D"pl-c1">1</span>}};=0A<span class=3D=
"pl-k">private</span> <span class=3D"pl-k">static</span> <span cl=
ass=3D"pl-k">boolean</span>[][] visited;=0A<span class=3D"pl-k">p=
rivate</span> <span class=3D"pl-k">int</span> m;=0A<span class=3D=
"pl-k">private</span> <span class=3D"pl-k">int</span> n;=0A=0A<sp=
an class=3D"pl-k">public</span> <span class=3D"pl-k">boolean</spa=
n> exist(<span class=3D"pl-k">char</span>[][] board, <span class=3D=
"pl-smi">String</span> word) {=0A    <span class=3D"pl-k">if</spa=
n> (word <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1"=
>null</span> <span class=3D"pl-k">||</span> word<span class=3D"pl=
-k">.</span>length() <span class=3D"pl-k">=3D=3D</span> <span cla=
ss=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> <span c=
lass=3D"pl-c1">true</span>;=0A    <span class=3D"pl-k">if</span>=20=
(board <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">n=
ull</span> <span class=3D"pl-k">||</span> board<span class=3D"pl-=
k">.</span>length <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">0</span> <span class=3D"pl-k">||</span> board[<span class=
=3D"pl-c1">0</span>]<span class=3D"pl-k">.</span>length <span cla=
ss=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>) <span c=
lass=3D"pl-k">return</span> <span class=3D"pl-c1">false</span>;=0A=
    m <span class=3D"pl-k">=3D</span> board<span class=3D"pl-k">.=
</span>length;=0A    n <span class=3D"pl-k">=3D</span> board[<spa=
n class=3D"pl-c1">0</span>]<span class=3D"pl-k">.</span>length;=0A=
    visited <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">=
new</span> <span class=3D"pl-smi">boolean</span>[m][n];=0A    <sp=
an class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <=
span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i=20=
<span class=3D"pl-k">&lt;</span> m; i<span class=3D"pl-k">++</spa=
n>) {=0A        <span class=3D"pl-k">for</span> (<span class=3D"p=
l-k">int</span> j <span class=3D"pl-k">=3D</span> <span class=3D"=
pl-c1">0</span>; j <span class=3D"pl-k">&lt;</span> n; j<span cla=
ss=3D"pl-k">++</span>) {=0A            <span class=3D"pl-k">if</s=
pan> (dfs(board, word, <span class=3D"pl-c1">0</span>, i, j)) <sp=
an class=3D"pl-k">return</span> <span class=3D"pl-c1">true</span>=
;=0A        }=0A    }=0A    <span class=3D"pl-k">return</span> <s=
pan class=3D"pl-c1">false</span>;=0A}=0A=0A<span class=3D"pl-k">p=
rivate</span> <span class=3D"pl-k">boolean</span> dfs(<span class=
=3D"pl-k">char</span>[][] board, <span class=3D"pl-smi">String</s=
pan> word, <span class=3D"pl-k">int</span> start, <span class=3D"=
pl-k">int</span> r, <span class=3D"pl-k">int</span> c) {=0A    <s=
pan class=3D"pl-k">if</span> (start <span class=3D"pl-k">=3D=3D</=
span> word<span class=3D"pl-k">.</span>length()) {=0A        <spa=
n class=3D"pl-k">return</span> <span class=3D"pl-c1">true</span>;=
=0A    }=0A    <span class=3D"pl-k">if</span> (r <span class=3D"p=
l-k">&lt;</span> <span class=3D"pl-c1">0</span> <span class=3D"pl=
-k">||</span> r <span class=3D"pl-k">&gt;=3D</span> m <span class=
=3D"pl-k">||</span> c <span class=3D"pl-k">&lt;</span> <span clas=
s=3D"pl-c1">0</span> <span class=3D"pl-k">||</span> c <span class=
=3D"pl-k">&gt;=3D</span> n <span class=3D"pl-k">||</span> board[r=
][c] <span class=3D"pl-k">!=3D</span> word<span class=3D"pl-k">.<=
/span>charAt(start) <span class=3D"pl-k">||</span>  visited[r][c]=
 ) {=0A        <span class=3D"pl-k">return</span> <span class=3D"=
pl-c1">false</span>;=0A    }=0A    visited[r][c] <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-c1">true</span>;=0A    <span cl=
ass=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span=
 class=3D"pl-k">&lt;</span> shift<span class=3D"pl-k">.</span>len=
gth; i<span class=3D"pl-k">++</span>) {=0A        <span class=3D"=
pl-k">int</span> nextR <span class=3D"pl-k">=3D</span> r <span cl=
ass=3D"pl-k">+</span> shift[i][<span class=3D"pl-c1">0</span>];=0A=
        <span class=3D"pl-k">int</span> nextC <span class=3D"pl-k=
">=3D</span> c <span class=3D"pl-k">+</span> shift[i][<span class=
=3D"pl-c1">1</span>];=0A        <span class=3D"pl-k">if</span> (d=
fs(board, word, start <span class=3D"pl-k">+</span> <span class=3D=
"pl-c1">1</span>, nextR, nextC)) <span class=3D"pl-k">return</spa=
n> <span class=3D"pl-c1">true</span>;=0A    }=0A    visited[r][c]=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">false</spa=
n>;=0A    <span class=3D"pl-k">return</span> <span class=3D"pl-c1=
">false</span>;=0A}</pre></div><p>IP =E5=9C=B0=E5=9D=80=E5=88=92=E5=
=88=86</p><p><a href=3D"https://leetcode.com/problems/restore-ip-=
addresses/description/" target=3D"_blank">Leetcode : 93. Restore=20=
IP Addresses(Medium)</a></p><div class=3D"highlight highlight-tex=
t-html-basic"><pre>Given "25525511135",=0Areturn ["255.255.11.135=
", "255.255.111.35"].</pre></div><div class=3D"highlight highligh=
t-source-java"><pre><span class=3D"pl-k">private</span> <span cla=
ss=3D"pl-k">List&lt;<span class=3D"pl-smi">String</span>&gt;</spa=
n> ret;=0A=0A<span class=3D"pl-k">public</span> <span class=3D"pl=
-k">List&lt;<span class=3D"pl-smi">String</span>&gt;</span> resto=
reIpAddresses(<span class=3D"pl-smi">String</span> s) {=0A    ret=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span>=20=
<span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    doRestore(=
<span class=3D"pl-c1">0</span>, <span class=3D"pl-s"><span class=3D=
"pl-pds">"</span><span class=3D"pl-pds">"</span></span>, s);=0A =20=
  <span class=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D=
"pl-k">private</span> <span class=3D"pl-k">void</span> doRestore(=
<span class=3D"pl-k">int</span> k, <span class=3D"pl-smi">String<=
/span> path, <span class=3D"pl-smi">String</span> s) {=0A    <spa=
n class=3D"pl-k">if</span> (k <span class=3D"pl-k">=3D=3D</span>=20=
<span class=3D"pl-c1">4</span> <span class=3D"pl-k">||</span> s<s=
pan class=3D"pl-k">.</span>length() <span class=3D"pl-k">=3D=3D</=
span> <span class=3D"pl-c1">0</span>) {=0A        <span class=3D"=
pl-k">if</span> (k <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">4</span> <span class=3D"pl-k">&amp;&amp;</span> s<span=
 class=3D"pl-k">.</span>length() <span class=3D"pl-k">=3D=3D</spa=
n> <span class=3D"pl-c1">0</span>) {=0A            ret<span class=
=3D"pl-k">.</span>add(path);=0A        }=0A        <span class=3D=
"pl-k">return</span>;=0A    }=0A    <span class=3D"pl-k">for</spa=
n> (<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</s=
pan> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;<=
/span> s<span class=3D"pl-k">.</span>length() <span class=3D"pl-k=
">&amp;&amp;</span> i <span class=3D"pl-k">&lt;=3D</span> <span c=
lass=3D"pl-c1">2</span>; i<span class=3D"pl-k">++</span>) {=0A  =20=
     <span class=3D"pl-k">if</span> (i <span class=3D"pl-k">!=3D<=
/span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;&=
amp;</span> s<span class=3D"pl-k">.</span>charAt(<span class=3D"p=
l-c1">0</span>) <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-s"><span class=3D"pl-pds">'</span>0<span class=3D"pl-pds">'</=
span></span>) <span class=3D"pl-k">break</span>;=0A        <span=20=
class=3D"pl-smi">String</span> part <span class=3D"pl-k">=3D</spa=
n> s<span class=3D"pl-k">.</span>substring(<span class=3D"pl-c1">=
0</span>, i <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1=
</span>);=0A        <span class=3D"pl-k">if</span> (<span class=3D=
"pl-smi">Integer</span><span class=3D"pl-k">.</span>valueOf(part)=
 <span class=3D"pl-k">&lt;=3D</span> <span class=3D"pl-c1">255</s=
pan>) {=0A            doRestore(k <span class=3D"pl-k">+</span> <=
span class=3D"pl-c1">1</span>, path<span class=3D"pl-k">.</span>l=
ength() <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">0<=
/span> <span class=3D"pl-k">?</span> path <span class=3D"pl-k">+<=
/span> <span class=3D"pl-s"><span class=3D"pl-pds">"</span>.<span=
 class=3D"pl-pds">"</span></span> <span class=3D"pl-k">+</span> p=
art <span class=3D"pl-k">:</span> part, s<span class=3D"pl-k">.</=
span>substring(i <span class=3D"pl-k">+</span> <span class=3D"pl-=
c1">1</span>));=0A        }=0A    }=0A}</pre></div><p>=E6=8E=92=E5=
=88=97</p><p><a href=3D"https://leetcode.com/problems/permutation=
s/description/" target=3D"_blank">Leetcode : 46. Permutations (Me=
dium)</a></p><div class=3D"highlight highlight-text-html-basic"><=
pre>[1,2,3] have the following permutations:=0A[=0A  [1,2,3],=0A=20=
 [1,3,2],=0A  [2,1,3],=0A  [2,3,1],=0A  [3,1,2],=0A  [3,2,1]=0A]<=
/pre></div><div class=3D"highlight highlight-source-java"><pre><s=
pan class=3D"pl-k">public</span> <span class=3D"pl-k">List&lt;<sp=
an class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&g=
t;</span>&gt;</span> permute(<span class=3D"pl-k">int</span>[] nu=
ms) {=0A    <span class=3D"pl-k">List&lt;<span class=3D"pl-k">Lis=
t&lt;<span class=3D"pl-smi">Integer</span>&gt;</span>&gt;</span>=20=
ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</spa=
n> <span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <span c=
lass=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</=
span> permuteList <span class=3D"pl-k">=3D</span> <span class=3D"=
pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>();=
=0A    <span class=3D"pl-k">boolean</span>[] visited <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"=
pl-smi">boolean</span>[nums<span class=3D"pl-k">.</span>length];=0A=
    backtracking(permuteList, visited, nums, ret);=0A    <span cl=
ass=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D"pl-k">pri=
vate</span> <span class=3D"pl-k">void</span> backtracking(<span c=
lass=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</=
span> permuteList, <span class=3D"pl-k">boolean</span>[] visited,=
 <span class=3D"pl-k">int</span>[] nums, <span class=3D"pl-k">Lis=
t&lt;<span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer<=
/span>&gt;</span>&gt;</span> ret){=0A    <span class=3D"pl-k">if<=
/span>(permuteList<span class=3D"pl-k">.</span>size() <span class=
=3D"pl-k">=3D=3D</span> nums<span class=3D"pl-k">.</span>length){=
=0A        ret<span class=3D"pl-k">.</span>add(<span class=3D"pl-=
k">new</span> <span class=3D"pl-smi">ArrayList</span>(permuteList=
));=0A        <span class=3D"pl-k">return</span>;=0A    }=0A=0A =20=
  <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</span>=
 i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>=
; i <span class=3D"pl-k">&lt;</span> visited<span class=3D"pl-k">=
.</span>length; i<span class=3D"pl-k">++</span>){=0A        <span=
 class=3D"pl-k">if</span>(visited[i]) <span class=3D"pl-k">contin=
ue</span>;=0A        visited[i] <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-c1">true</span>;=0A        permuteList<span clas=
s=3D"pl-k">.</span>add(nums[i]);=0A        backtracking(permuteLi=
st, visited, nums, ret);=0A        permuteList<span class=3D"pl-k=
">.</span>remove(permuteList<span class=3D"pl-k">.</span>size() <=
span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>);=0A=20=
       visited[i] <span class=3D"pl-k">=3D</span> <span class=3D"=
pl-c1">false</span>;=0A    }=0A}</pre></div><p>=E5=90=AB=E6=9C=89=
=E7=9B=B8=E5=90=8C=E5=85=83=E7=B4=A0=E6=B1=82=E6=8E=92=E5=88=97</=
p><p><a href=3D"https://leetcode.com/problems/permutations-ii/des=
cription/" target=3D"_blank">Leetcode : 47. Permutations II (Medi=
um)</a></p><div class=3D"highlight highlight-text-html-basic"><pr=
e>[1,1,2] have the following unique permutations:=0A[[1,1,2], [1,=
2,1], [2,1,1]]</pre></div><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=
=EF=BC=9A=E6=95=B0=E7=BB=84=E5=85=83=E7=B4=A0=E5=8F=AF=E8=83=BD=E5=
=90=AB=E6=9C=89=E7=9B=B8=E5=90=8C=E7=9A=84=E5=85=83=E7=B4=A0=EF=BC=
=8C=E8=BF=9B=E8=A1=8C=E6=8E=92=E5=88=97=E6=97=B6=E5=B0=B1=E6=9C=89=
=E5=8F=AF=E8=83=BD=E5=87=BA=E5=85=88=E9=87=8D=E5=A4=8D=E7=9A=84=E6=
=8E=92=E5=88=97=EF=BC=8C=E8=A6=81=E6=B1=82=E9=87=8D=E5=A4=8D=E7=9A=
=84=E6=8E=92=E5=88=97=E5=8F=AA=E8=BF=94=E5=9B=9E=E4=B8=80=E4=B8=AA=
=E3=80=82</p><p>=E5=9C=A8=E5=AE=9E=E7=8E=B0=E4=B8=8A=EF=BC=8C=E5=92=
=8C Permutations =E4=B8=8D=E5=90=8C=E7=9A=84=E6=98=AF=E8=A6=81=E5=
=85=88=E6=8E=92=E5=BA=8F=EF=BC=8C=E7=84=B6=E5=90=8E=E5=9C=A8=E6=B7=
=BB=E5=8A=A0=E4=B8=80=E4=B8=AA=E5=85=83=E7=B4=A0=E6=97=B6=EF=BC=8C=
=E5=88=A4=E6=96=AD=E8=BF=99=E4=B8=AA=E5=85=83=E7=B4=A0=E6=98=AF=E5=
=90=A6=E7=AD=89=E4=BA=8E=E5=89=8D=E4=B8=80=E4=B8=AA=E5=85=83=E7=B4=
=A0=EF=BC=8C=E5=A6=82=E6=9E=9C=E7=AD=89=E4=BA=8E=EF=BC=8C=E5=B9=B6=
=E4=B8=94=E5=89=8D=E4=B8=80=E4=B8=AA=E5=85=83=E7=B4=A0=E8=BF=98=E6=
=9C=AA=E8=AE=BF=E9=97=AE=EF=BC=8C=E9=82=A3=E4=B9=88=E5=B0=B1=E8=B7=
=B3=E8=BF=87=E8=BF=99=E4=B8=AA=E5=85=83=E7=B4=A0=E3=80=82</p><div=
 class=3D"highlight highlight-source-java"><pre><span class=3D"pl=
-k">public</span> <span class=3D"pl-k">List&lt;<span class=3D"pl-=
k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</span>&gt;</=
span> permuteUnique(<span class=3D"pl-k">int</span>[] nums) {=0A=20=
   <span class=3D"pl-k">List&lt;<span class=3D"pl-k">List&lt;<spa=
n class=3D"pl-smi">Integer</span>&gt;</span>&gt;</span> ret <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span=20=
class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <span class=3D"p=
l-k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</span> per=
muteList <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new=
</span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <s=
pan class=3D"pl-smi">Arrays</span><span class=3D"pl-k">.</span>so=
rt(nums);=0A    <span class=3D"pl-k">boolean</span>[] visited <sp=
an class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <spa=
n class=3D"pl-smi">boolean</span>[nums<span class=3D"pl-k">.</spa=
n>length];=0A    backtracking(permuteList, visited, nums, ret);=0A=
    <span class=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D=
"pl-k">private</span> <span class=3D"pl-k">void</span> backtracki=
ng(<span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</s=
pan>&gt;</span> permuteList, <span class=3D"pl-k">boolean</span>[=
] visited, <span class=3D"pl-k">int</span>[] nums, <span class=3D=
"pl-k">List&lt;<span class=3D"pl-k">List&lt;<span class=3D"pl-smi=
">Integer</span>&gt;</span>&gt;</span> ret) {=0A    <span class=3D=
"pl-k">if</span> (permuteList<span class=3D"pl-k">.</span>size()=20=
<span class=3D"pl-k">=3D=3D</span> nums<span class=3D"pl-k">.</sp=
an>length) {=0A        ret<span class=3D"pl-k">.</span>add(<span=20=
class=3D"pl-k">new</span> <span class=3D"pl-smi">ArrayList</span>=
(permuteList));=0A        <span class=3D"pl-k">return</span>;=0A=20=
   }=0A=0A    <span class=3D"pl-k">for</span> (<span class=3D"pl-=
k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-c1">0</span>; i <span class=3D"pl-k">&lt;</span> visited<span cl=
ass=3D"pl-k">.</span>length; i<span class=3D"pl-k">++</span>) {=0A=
        <span class=3D"pl-k">if</span> (i <span class=3D"pl-k">!=3D=
</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;=
&amp;</span> nums[i] <span class=3D"pl-k">=3D=3D</span> nums[i <s=
pan class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>] <span=
 class=3D"pl-k">&amp;&amp;</span> <span class=3D"pl-k">!</span>vi=
sited[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</sp=
an>]) <span class=3D"pl-k">continue</span>;=0A        <span class=
=3D"pl-k">if</span> (visited[i]) <span class=3D"pl-k">continue</s=
pan>;=0A        visited[i] <span class=3D"pl-k">=3D</span> <span=20=
class=3D"pl-c1">true</span>;=0A        permuteList<span class=3D"=
pl-k">.</span>add(nums[i]);=0A        backtracking(permuteList, v=
isited, nums, ret);=0A        permuteList<span class=3D"pl-k">.</=
span>remove(permuteList<span class=3D"pl-k">.</span>size() <span=20=
class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>);=0A     =20=
  visited[i] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1=
">false</span>;=0A    }=0A}</pre></div><p>=E7=BB=84=E5=90=88</p><=
p><a href=3D"https://leetcode.com/problems/combinations/descripti=
on/" target=3D"_blank">Leetcode : 77. Combinations (Medium)</a></=
p><div class=3D"highlight highlight-text-html-basic"><pre>If n =3D=
 4 and k =3D 2, a solution is:=0A[=0A  [2,4],=0A  [3,4],=0A  [2,3=
],=0A  [1,2],=0A  [1,3],=0A  [1,4],=0A]</pre></div><div class=3D"=
highlight highlight-source-java"><pre><span class=3D"pl-k">public=
</span> <span class=3D"pl-k">List&lt;<span class=3D"pl-k">List&lt=
;<span class=3D"pl-smi">Integer</span>&gt;</span>&gt;</span> comb=
ine(<span class=3D"pl-k">int</span> n, <span class=3D"pl-k">int</=
span> k) {=0A    <span class=3D"pl-k">List&lt;<span class=3D"pl-k=
">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</span>&gt;</s=
pan> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new=
</span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <s=
pan class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&=
gt;</span> combineList <span class=3D"pl-k">=3D</span> <span clas=
s=3D"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</spa=
n>();=0A    backtracking(<span class=3D"pl-c1">1</span>, n, k, co=
mbineList, ret);=0A    <span class=3D"pl-k">return</span> ret;=0A=
}=0A=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k">v=
oid</span> backtracking(<span class=3D"pl-k">int</span> start, <s=
pan class=3D"pl-k">int</span> n, <span class=3D"pl-k">int</span>=20=
k, <span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</s=
pan>&gt;</span> combineList, <span class=3D"pl-k">List&lt;<span c=
lass=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</=
span>&gt;</span> ret){=0A    <span class=3D"pl-k">if</span>(k <sp=
an class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>){=0A=
        ret<span class=3D"pl-k">.</span>add(<span class=3D"pl-k">=
new</span> <span class=3D"pl-smi">ArrayList</span>(combineList));=
 <span class=3D"pl-c"><span class=3D"pl-c">//</span> =E8=BF=99=E9=
=87=8C=E8=A6=81=E9=87=8D=E6=96=B0=E6=9E=84=E9=80=A0=E4=B8=80=E4=B8=
=AA List</span>=0A        <span class=3D"pl-k">return</span>;=0A=20=
   }=0A    =0A    <span class=3D"pl-k">for</span>(<span class=3D"=
pl-k">int</span> i <span class=3D"pl-k">=3D</span> start; i <span=
 class=3D"pl-k">&lt;=3D</span> n <span class=3D"pl-k">-</span> k=20=
<span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>; i<s=
pan class=3D"pl-k">++</span>){ <span class=3D"pl-c"><span class=3D=
"pl-c">//</span> =E5=89=AA=E6=9E=9D</span>=0A=0A        combineLi=
st<span class=3D"pl-k">.</span>add(i);                        <sp=
an class=3D"pl-c"><span class=3D"pl-c">//</span> =E6=8A=8A i =E6=A0=
=87=E8=AE=B0=E4=B8=BA=E5=B7=B2=E8=AE=BF=E9=97=AE</span>=0A      =20=
 backtracking(i <span class=3D"pl-k">+</span> <span class=3D"pl-c=
1">1</span>, n, k <span class=3D"pl-k">-</span> <span class=3D"pl=
-c1">1</span>, combineList, ret);=0A        combineList<span clas=
s=3D"pl-k">.</span>remove(combineList<span class=3D"pl-k">.</span=
>size() <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</sp=
an>); <span class=3D"pl-c"><span class=3D"pl-c">//</span> =E6=8A=8A=
 i =E6=A0=87=E8=AE=B0=E4=B8=BA=E6=9C=AA=E8=AE=BF=E9=97=AE</span>=0A=
    }=0A}</pre></div><p>=E7=BB=84=E5=90=88=E6=B1=82=E5=92=8C</p><=
p><a href=3D"https://leetcode.com/problems/combination-sum/descri=
ption/" target=3D"_blank">Leetcode : 39. Combination Sum (Medium)=
</a></p><div class=3D"highlight highlight-text-html-basic"><pre>g=
iven candidate set [2, 3, 6, 7] and target 7,=0AA solution set is=
:=0A[[7],[2, 2, 3]]</pre></div><div class=3D"highlight highlight-=
source-java"><pre> <span class=3D"pl-k">private</span> <span clas=
s=3D"pl-k">List&lt;<span class=3D"pl-k">List&lt;<span class=3D"pl=
-smi">Integer</span>&gt;</span>&gt;</span> ret;=0A=0A <span class=
=3D"pl-k">public</span> <span class=3D"pl-k">List&lt;<span class=3D=
"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</span>&g=
t;</span> combinationSum(<span class=3D"pl-k">int</span>[] candid=
ates, <span class=3D"pl-k">int</span> target) {=0A     ret <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span c=
lass=3D"pl-k">ArrayList&lt;&gt;</span>();=0A     doCombination(ca=
ndidates, target, <span class=3D"pl-c1">0</span>, <span class=3D"=
pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>())=
;=0A     <span class=3D"pl-k">return</span> ret;=0A }=0A=0A <span=
 class=3D"pl-k">private</span> <span class=3D"pl-k">void</span> d=
oCombination(<span class=3D"pl-k">int</span>[] candidates, <span=20=
class=3D"pl-k">int</span> target, <span class=3D"pl-k">int</span>=
 start, <span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integ=
er</span>&gt;</span> list) {=0A     <span class=3D"pl-k">if</span=
> (target <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1=
">0</span>) {=0A         ret<span class=3D"pl-k">.</span>add(<spa=
n class=3D"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt=
;</span>(list));=0A         <span class=3D"pl-k">return</span>;=0A=
     }=0A     <span class=3D"pl-k">for</span> (<span class=3D"pl-=
k">int</span> i <span class=3D"pl-k">=3D</span> start; i <span cl=
ass=3D"pl-k">&lt;</span> candidates<span class=3D"pl-k">.</span>l=
ength; i<span class=3D"pl-k">++</span>) {=0A         <span class=3D=
"pl-k">if</span> (candidates[i] <span class=3D"pl-k">&lt;=3D</spa=
n> target) {=0A             list<span class=3D"pl-k">.</span>add(=
candidates[i]);=0A             doCombination(candidates, target <=
span class=3D"pl-k">-</span> candidates[i], i, list);=0A        =20=
    list<span class=3D"pl-k">.</span>remove(list<span class=3D"pl=
-k">.</span>size() <span class=3D"pl-k">-</span> <span class=3D"p=
l-c1">1</span>);=0A         }=0A     }=0A }</pre></div><p>=E5=90=AB=
=E6=9C=89=E7=9B=B8=E5=90=8C=E5=85=83=E7=B4=A0=E7=9A=84=E6=B1=82=E7=
=BB=84=E5=90=88=E6=B1=82=E5=92=8C</p><p><a href=3D"https://leetco=
de.com/problems/combination-sum-ii/description/" target=3D"_blank=
">Leetcode : 40. Combination Sum II (Medium)</a></p><div class=3D=
"highlight highlight-text-html-basic"><pre>For example, given can=
didate set [10, 1, 2, 7, 6, 1, 5] and target 8, =0AA solution set=
 is: =0A[=0A  [1, 7],=0A  [1, 2, 5],=0A  [2, 6],=0A  [1, 1, 6]=0A=
]</pre></div><div class=3D"highlight highlight-source-java"><pre>=
<span class=3D"pl-k">private</span> <span class=3D"pl-k">List&lt;=
<span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span=
>&gt;</span>&gt;</span> ret;=0A=0A<span class=3D"pl-k">public</sp=
an> <span class=3D"pl-k">List&lt;<span class=3D"pl-k">List&lt;<sp=
an class=3D"pl-smi">Integer</span>&gt;</span>&gt;</span> combinat=
ionSum2(<span class=3D"pl-k">int</span>[] candidates, <span class=
=3D"pl-k">int</span> target) {=0A    ret <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-k">new</span> <span class=3D"pl-k">Arra=
yList&lt;&gt;</span>();=0A    <span class=3D"pl-smi">Arrays</span=
><span class=3D"pl-k">.</span>sort(candidates);=0A    doCombinati=
on(candidates, target, <span class=3D"pl-c1">0</span>, <span clas=
s=3D"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</spa=
n>(), <span class=3D"pl-k">new</span> <span class=3D"pl-smi">bool=
ean</span>[candidates<span class=3D"pl-k">.</span>length]);=0A  =20=
 <span class=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D"=
pl-k">private</span> <span class=3D"pl-k">void</span> doCombinati=
on(<span class=3D"pl-k">int</span>[] candidates, <span class=3D"p=
l-k">int</span> target, <span class=3D"pl-k">int</span> start, <s=
pan class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&=
gt;</span> list, <span class=3D"pl-k">boolean</span>[] visited) {=
=0A    <span class=3D"pl-k">if</span> (target <span class=3D"pl-k=
">=3D=3D</span> <span class=3D"pl-c1">0</span>) {=0A        ret<s=
pan class=3D"pl-k">.</span>add(<span class=3D"pl-k">new</span> <s=
pan class=3D"pl-k">ArrayList&lt;&gt;</span>(list));=0A        <sp=
an class=3D"pl-k">return</span>;=0A    }=0A    <span class=3D"pl-=
k">for</span> (<span class=3D"pl-k">int</span> i <span class=3D"p=
l-k">=3D</span> start; i <span class=3D"pl-k">&lt;</span> candida=
tes<span class=3D"pl-k">.</span>length; i<span class=3D"pl-k">++<=
/span>) {=0A        <span class=3D"pl-k">if</span> (i <span class=
=3D"pl-k">!=3D</span> <span class=3D"pl-c1">0</span> <span class=3D=
"pl-k">&amp;&amp;</span> candidates[i] <span class=3D"pl-k">=3D=3D=
</span> candidates[i <span class=3D"pl-k">-</span> <span class=3D=
"pl-c1">1</span>] <span class=3D"pl-k">&amp;&amp;</span> <span cl=
ass=3D"pl-k">!</span>visited[i <span class=3D"pl-k">-</span> <spa=
n class=3D"pl-c1">1</span>]) <span class=3D"pl-k">continue</span>=
;=0A        <span class=3D"pl-k">if</span> (candidates[i] <span c=
lass=3D"pl-k">&lt;=3D</span> target) {=0A            list<span cl=
ass=3D"pl-k">.</span>add(candidates[i]);=0A            visited[i]=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">true</span=
>;=0A            doCombination(candidates, target <span class=3D"=
pl-k">-</span> candidates[i], i <span class=3D"pl-k">+</span> <sp=
an class=3D"pl-c1">1</span>, list, visited);=0A            visite=
d[i] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">false<=
/span>;=0A            list<span class=3D"pl-k">.</span>remove(lis=
t<span class=3D"pl-k">.</span>size() <span class=3D"pl-k">-</span=
> <span class=3D"pl-c1">1</span>);=0A        }=0A    }=0A}</pre><=
/div><p>=E5=AD=90=E9=9B=86</p><p><a href=3D"https://leetcode.com/=
problems/subsets/description/" target=3D"_blank">Leetcode : 78. S=
ubsets (Medium)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=
=BC=9A=E6=89=BE=E5=87=BA=E9=9B=86=E5=90=88=E7=9A=84=E6=89=80=E6=9C=
=89=E5=AD=90=E9=9B=86=EF=BC=8C=E5=AD=90=E9=9B=86=E4=B8=8D=E8=83=BD=
=E9=87=8D=E5=A4=8D=EF=BC=8C[1, 2] =E5=92=8C [2, 1] =E8=BF=99=E7=A7=
=8D=E5=AD=90=E9=9B=86=E7=AE=97=E9=87=8D=E5=A4=8D</p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">priva=
te</span> <span class=3D"pl-k">List&lt;<span class=3D"pl-k">List&=
lt;<span class=3D"pl-smi">Integer</span>&gt;</span>&gt;</span> re=
t;=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k">Lis=
t&lt;<span class=3D"pl-smi">Integer</span>&gt;</span> subsetList;=
=0A=0A<span class=3D"pl-k">public</span> <span class=3D"pl-k">Lis=
t&lt;<span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer<=
/span>&gt;</span>&gt;</span> subsets(<span class=3D"pl-k">int</sp=
an>[] nums) {=0A    ret <span class=3D"pl-k">=3D</span> <span cla=
ss=3D"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</sp=
an>();=0A    subsetList <span class=3D"pl-k">=3D</span> <span cla=
ss=3D"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</sp=
an>();=0A    <span class=3D"pl-k">for</span> (<span class=3D"pl-k=
">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-=
c1">0</span>; i <span class=3D"pl-k">&lt;=3D</span> nums<span cla=
ss=3D"pl-k">.</span>length; i<span class=3D"pl-k">++</span>) {=0A=
        backtracking(<span class=3D"pl-c1">0</span>, i, nums);=0A=
    }=0A    <span class=3D"pl-k">return</span> ret;=0A}=0A=0A<spa=
n class=3D"pl-k">private</span> <span class=3D"pl-k">void</span>=20=
backtracking(<span class=3D"pl-k">int</span> startIdx, <span clas=
s=3D"pl-k">int</span> size, <span class=3D"pl-k">int</span>[] num=
s) {=0A    <span class=3D"pl-k">if</span> (subsetList<span class=3D=
"pl-k">.</span>size() <span class=3D"pl-k">=3D=3D</span> size) {=0A=
        ret<span class=3D"pl-k">.</span>add(<span class=3D"pl-k">=
new</span> <span class=3D"pl-smi">ArrayList</span>(subsetList));=0A=
        <span class=3D"pl-k">return</span>;=0A    }=0A=0A    <spa=
n class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <s=
pan class=3D"pl-k">=3D</span> startIdx; i <span class=3D"pl-k">&l=
t;</span> nums<span class=3D"pl-k">.</span>length; i<span class=3D=
"pl-k">++</span>) {=0A        subsetList<span class=3D"pl-k">.</s=
pan>add(nums[i]);=0A        backtracking(i <span class=3D"pl-k">+=
</span> <span class=3D"pl-c1">1</span>, size, nums); <span class=3D=
"pl-c"><span class=3D"pl-c">//</span> startIdx =E8=AE=BE=E4=B8=BA=
=E4=B8=8B=E4=B8=80=E4=B8=AA=E5=85=83=E7=B4=A0=EF=BC=8C=E4=BD=BF s=
ubset =E4=B8=AD=E7=9A=84=E5=85=83=E7=B4=A0=E9=83=BD=E9=80=92=E5=A2=
=9E=E6=8E=92=E5=BA=8F</span>=0A        subsetList<span class=3D"p=
l-k">.</span>remove(subsetList<span class=3D"pl-k">.</span>size()=
 <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>);=0A=
    }=0A}</pre></div><p>=E5=90=AB=E6=9C=89=E7=9B=B8=E5=90=8C=E5=85=
=83=E7=B4=A0=E6=B1=82=E5=AD=90=E9=9B=86</p><p><a href=3D"https://=
leetcode.com/problems/subsets-ii/description/" target=3D"_blank">=
Leetcode : 90. Subsets II (Medium)</a></p><div class=3D"highlight=
 highlight-text-html-basic"><pre>For example,=0AIf nums =3D [1,2,=
2], a solution is:=0A=0A[=0A  [2],=0A  [1],=0A  [1,2,2],=0A  [2,2=
],=0A  [1,2],=0A  []=0A]</pre></div><div class=3D"highlight highl=
ight-source-java"><pre><span class=3D"pl-k">private</span> <span=20=
class=3D"pl-k">List&lt;<span class=3D"pl-k">List&lt;<span class=3D=
"pl-smi">Integer</span>&gt;</span>&gt;</span> ret;=0A<span class=3D=
"pl-k">private</span> <span class=3D"pl-k">List&lt;<span class=3D=
"pl-smi">Integer</span>&gt;</span> subsetList;=0A<span class=3D"p=
l-k">private</span> <span class=3D"pl-k">boolean</span>[] visited=
;=0A=0A<span class=3D"pl-k">public</span> <span class=3D"pl-k">Li=
st&lt;<span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer=
</span>&gt;</span>&gt;</span> subsetsWithDup(<span class=3D"pl-k"=
>int</span>[] nums) {=0A    ret <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;=
&gt;</span>();=0A    subsetList <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-k">new</span> <span class=3D"pl-k">ArrayList&lt;=
&gt;</span>();=0A    visited <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-k">new</span> <span class=3D"pl-smi">boolean</span>=
[nums<span class=3D"pl-k">.</span>length];=0A    <span class=3D"p=
l-smi">Arrays</span><span class=3D"pl-k">.</span>sort(nums);=0A =20=
  <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span=
> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span=
>; i <span class=3D"pl-k">&lt;=3D</span> nums<span class=3D"pl-k"=
>.</span>length; i<span class=3D"pl-k">++</span>) {=0A        bac=
ktracking(<span class=3D"pl-c1">0</span>, i, nums);=0A    }=0A  =20=
 <span class=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D"=
pl-k">private</span> <span class=3D"pl-k">void</span> backtrackin=
g(<span class=3D"pl-k">int</span> startIdx, <span class=3D"pl-k">=
int</span> size, <span class=3D"pl-k">int</span>[] nums) {=0A   =20=
<span class=3D"pl-k">if</span> (subsetList<span class=3D"pl-k">.<=
/span>size() <span class=3D"pl-k">=3D=3D</span> size) {=0A      =20=
 ret<span class=3D"pl-k">.</span>add(<span class=3D"pl-k">new</sp=
an> <span class=3D"pl-smi">ArrayList</span>(subsetList));=0A    =20=
   <span class=3D"pl-k">return</span>;=0A    }=0A=0A    <span cla=
ss=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <span c=
lass=3D"pl-k">=3D</span> startIdx; i <span class=3D"pl-k">&lt;</s=
pan> nums<span class=3D"pl-k">.</span>length; i<span class=3D"pl-=
k">++</span>) {=0A        <span class=3D"pl-k">if</span> (i <span=
 class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">0</span> <span=20=
class=3D"pl-k">&amp;&amp;</span> nums[i] <span class=3D"pl-k">=3D=
=3D</span> nums[i <span class=3D"pl-k">-</span> <span class=3D"pl=
-c1">1</span>] <span class=3D"pl-k">&amp;&amp;</span> <span class=
=3D"pl-k">!</span>visited[i <span class=3D"pl-k">-</span> <span c=
lass=3D"pl-c1">1</span>]) <span class=3D"pl-k">continue</span>;=0A=
        subsetList<span class=3D"pl-k">.</span>add(nums[i]);=0A =20=
      visited[i] <span class=3D"pl-k">=3D</span> <span class=3D"p=
l-c1">true</span>;=0A        backtracking(i <span class=3D"pl-k">=
+</span> <span class=3D"pl-c1">1</span>, size, nums);=0A        v=
isited[i] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">f=
alse</span>;=0A        subsetList<span class=3D"pl-k">.</span>rem=
ove(subsetList<span class=3D"pl-k">.</span>size() <span class=3D"=
pl-k">-</span> <span class=3D"pl-c1">1</span>);=0A    }=0A}</pre>=
</div><p>=E5=88=86=E5=89=B2=E5=AD=97=E7=AC=A6=E4=B8=B2=E4=BD=BF=E5=
=BE=97=E6=AF=8F=E9=83=A8=E5=88=86=E9=83=BD=E6=98=AF=E5=9B=9E=E6=96=
=87=E6=95=B0</p><p><a href=3D"https://leetcode.com/problems/palin=
drome-partitioning/description/" target=3D"_blank">Leetcode : 131=
. Palindrome Partitioning (Medium)</a></p><div class=3D"highlight=
 highlight-source-java"><pre><span class=3D"pl-k">private</span>=20=
<span class=3D"pl-k">List&lt;<span class=3D"pl-k">List&lt;<span c=
lass=3D"pl-smi">String</span>&gt;</span>&gt;</span> ret;=0A=0A<sp=
an class=3D"pl-k">public</span> <span class=3D"pl-k">List&lt;<spa=
n class=3D"pl-k">List&lt;<span class=3D"pl-smi">String</span>&gt;=
</span>&gt;</span> partition(<span class=3D"pl-smi">String</span>=
 s) {=0A    ret <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-k">new</span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A=
    doPartion(<span class=3D"pl-k">new</span> <span class=3D"pl-k=
">ArrayList&lt;&gt;</span>(), s);=0A    <span class=3D"pl-k">retu=
rn</span> ret;=0A}=0A=0A<span class=3D"pl-k">private</span> <span=
 class=3D"pl-k">void</span> doPartion(<span class=3D"pl-k">List&l=
t;<span class=3D"pl-smi">String</span>&gt;</span> list, <span cla=
ss=3D"pl-smi">String</span> s) {=0A    <span class=3D"pl-k">if</s=
pan> (s<span class=3D"pl-k">.</span>length() <span class=3D"pl-k"=
>=3D=3D</span> <span class=3D"pl-c1">0</span>) {=0A        ret<sp=
an class=3D"pl-k">.</span>add(<span class=3D"pl-k">new</span> <sp=
an class=3D"pl-k">ArrayList&lt;&gt;</span>(list));=0A        <spa=
n class=3D"pl-k">return</span>;=0A    }=0A    <span class=3D"pl-k=
">for</span> (<span class=3D"pl-k">int</span> i <span class=3D"pl=
-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D"p=
l-k">&lt;</span> s<span class=3D"pl-k">.</span>length(); i<span c=
lass=3D"pl-k">++</span>) {=0A        <span class=3D"pl-k">if</spa=
n> (isPalindrome(s, <span class=3D"pl-c1">0</span>, i)) {=0A    =20=
       list<span class=3D"pl-k">.</span>add(s<span class=3D"pl-k"=
>.</span>substring(<span class=3D"pl-c1">0</span>, i <span class=3D=
"pl-k">+</span> <span class=3D"pl-c1">1</span>));=0A            d=
oPartion(list, s<span class=3D"pl-k">.</span>substring(i <span cl=
ass=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>));=0A      =20=
     list<span class=3D"pl-k">.</span>remove(list<span class=3D"p=
l-k">.</span>size() <span class=3D"pl-k">-</span> <span class=3D"=
pl-c1">1</span>);=0A        }=0A    }=0A}=0A=0A<span class=3D"pl-=
k">private</span> <span class=3D"pl-k">boolean</span> isPalindrom=
e(<span class=3D"pl-smi">String</span> s, <span class=3D"pl-k">in=
t</span> begin, <span class=3D"pl-k">int</span> end) {=0A    <spa=
n class=3D"pl-k">while</span> (begin <span class=3D"pl-k">&lt;</s=
pan> end) {=0A        <span class=3D"pl-k">if</span> (s<span clas=
s=3D"pl-k">.</span>charAt(begin<span class=3D"pl-k">++</span>) <s=
pan class=3D"pl-k">!=3D</span> s<span class=3D"pl-k">.</span>char=
At(end<span class=3D"pl-k">--</span>)) <span class=3D"pl-k">retur=
n</span> <span class=3D"pl-c1">false</span>;=0A    }=0A    <span=20=
class=3D"pl-k">return</span> <span class=3D"pl-c1">true</span>;=0A=
}</pre></div><p>=E6=95=B0=E7=8B=AC</p><p><a href=3D"https://leetc=
ode.com/problems/sudoku-solver/description/" target=3D"_blank">Le=
etcode : 37. Sudoku Solver (Hard)</a></p><p><a href=3D"https://gi=
thub.com/CyC2018/InterviewNotes/blob/master/pics/1ca52246-c443-48=
ae-b1f8-1cafc09ec75c.png" target=3D"_blank"><img src=3D"D:\=E6=96=
=87=E6=A1=A3\My Knowledge\temp\969fb8f2-eb58-4891-86ea-51bce0e900=
52\128\index_files\0.012788783902222267.png" alt=3D""></a></p><di=
v class=3D"highlight highlight-source-java"><pre><span class=3D"p=
l-k">private</span> <span class=3D"pl-k">boolean</span>[][] rowsU=
sed <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</spa=
n> <span class=3D"pl-smi">boolean</span>[<span class=3D"pl-c1">9<=
/span>][<span class=3D"pl-c1">10</span>];=0A<span class=3D"pl-k">=
private</span> <span class=3D"pl-k">boolean</span>[][] colsUsed <=
span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <s=
pan class=3D"pl-smi">boolean</span>[<span class=3D"pl-c1">9</span=
>][<span class=3D"pl-c1">10</span>];=0A<span class=3D"pl-k">priva=
te</span> <span class=3D"pl-k">boolean</span>[][] cubesUsed <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span=20=
class=3D"pl-smi">boolean</span>[<span class=3D"pl-c1">9</span>][<=
span class=3D"pl-c1">10</span>];=0A<span class=3D"pl-k">private</=
span> <span class=3D"pl-k">char</span>[][] board;=0A=0A<span clas=
s=3D"pl-k">public</span> <span class=3D"pl-k">void</span> solveSu=
doku(<span class=3D"pl-k">char</span>[][] board) {=0A    <span cl=
ass=3D"pl-c1">this</span><span class=3D"pl-k">.</span>board <span=
 class=3D"pl-k">=3D</span> board;=0A    <span class=3D"pl-k">for<=
/span> (<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&l=
t;</span> <span class=3D"pl-c1">9</span>; i<span class=3D"pl-k">+=
+</span>) {=0A        <span class=3D"pl-k">for</span> (<span clas=
s=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> <span cla=
ss=3D"pl-c1">0</span>; j <span class=3D"pl-k">&lt;</span> <span c=
lass=3D"pl-c1">9</span>; j<span class=3D"pl-k">++</span>) {=0A  =20=
         <span class=3D"pl-k">if</span> (board[i][j] <span class=3D=
"pl-k">=3D=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">=
'</span>.<span class=3D"pl-pds">'</span></span>) <span class=3D"p=
l-k">continue</span>;=0A            <span class=3D"pl-k">int</spa=
n> num <span class=3D"pl-k">=3D</span> board[i][j] <span class=3D=
"pl-k">-</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</sp=
an>0<span class=3D"pl-pds">'</span></span>;=0A            rowsUse=
d[i][num] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">t=
rue</span>;=0A            colsUsed[j][num] <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-c1">true</span>;=0A            cubesUse=
d[cubeNum(i, j)][num] <span class=3D"pl-k">=3D</span> <span class=
=3D"pl-c1">true</span>;=0A        }=0A    }=0A    <span class=3D"=
pl-k">for</span> (<span class=3D"pl-k">int</span> i <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D=
"pl-k">&lt;</span> <span class=3D"pl-c1">9</span>; i<span class=3D=
"pl-k">++</span>) {=0A        <span class=3D"pl-k">for</span> (<s=
pan class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-c1">0</span>; j <span class=3D"pl-k">&lt;</span>=
 <span class=3D"pl-c1">9</span>; j<span class=3D"pl-k">++</span>)=
 {=0A            backtracking(i, j);=0A        }=0A    }=0A}=0A=0A=
<span class=3D"pl-k">private</span> <span class=3D"pl-k">boolean<=
/span> backtracking(<span class=3D"pl-k">int</span> row, <span cl=
ass=3D"pl-k">int</span> col) {=0A    <span class=3D"pl-k">while</=
span> (row <span class=3D"pl-k">&lt;</span> <span class=3D"pl-c1"=
>9</span> <span class=3D"pl-k">&amp;&amp;</span> board[row][col]=20=
<span class=3D"pl-k">!=3D</span> <span class=3D"pl-s"><span class=
=3D"pl-pds">'</span>.<span class=3D"pl-pds">'</span></span>) {=0A=
        row <span class=3D"pl-k">=3D</span> col <span class=3D"pl=
-k">=3D=3D</span> <span class=3D"pl-c1">8</span> <span class=3D"p=
l-k">?</span> row <span class=3D"pl-k">+</span> <span class=3D"pl=
-c1">1</span> <span class=3D"pl-k">:</span> row;=0A        col <s=
pan class=3D"pl-k">=3D</span> col <span class=3D"pl-k">=3D=3D</sp=
an> <span class=3D"pl-c1">8</span> <span class=3D"pl-k">?</span>=20=
<span class=3D"pl-c1">0</span> <span class=3D"pl-k">:</span> col=20=
<span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>;=0A=20=
   }=0A    <span class=3D"pl-k">if</span> (row <span class=3D"pl-=
k">=3D=3D</span> <span class=3D"pl-c1">9</span>) {=0A        <spa=
n class=3D"pl-k">return</span> <span class=3D"pl-c1">true</span>;=
=0A    }=0A    <span class=3D"pl-k">for</span> (<span class=3D"pl=
-k">int</span> num <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">1</span>; num <span class=3D"pl-k">&lt;=3D</span> <span c=
lass=3D"pl-c1">9</span>; num<span class=3D"pl-k">++</span>) {=0A=20=
       <span class=3D"pl-k">if</span> (rowsUsed[row][num] <span c=
lass=3D"pl-k">||</span> colsUsed[col][num] <span class=3D"pl-k">|=
|</span> cubesUsed[cubeNum(row, col)][num]) <span class=3D"pl-k">=
continue</span>;=0A        rowsUsed[row][num] <span class=3D"pl-k=
">=3D</span> colsUsed[col][num] <span class=3D"pl-k">=3D</span> c=
ubesUsed[cubeNum(row, col)][num] <span class=3D"pl-k">=3D</span>=20=
<span class=3D"pl-c1">true</span>;=0A        board[row][col] <spa=
n class=3D"pl-k">=3D</span> (<span class=3D"pl-k">char</span>) (n=
um <span class=3D"pl-k">+</span> <span class=3D"pl-s"><span class=
=3D"pl-pds">'</span>0<span class=3D"pl-pds">'</span></span>);=0A=20=
       <span class=3D"pl-k">if</span> (backtracking(row, col)) <s=
pan class=3D"pl-k">return</span> <span class=3D"pl-c1">true</span=
>;=0A        board[row][col] <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-s"><span class=3D"pl-pds">'</span>.<span class=3D"p=
l-pds">'</span></span>;=0A        rowsUsed[row][num] <span class=3D=
"pl-k">=3D</span> colsUsed[col][num] <span class=3D"pl-k">=3D</sp=
an> cubesUsed[cubeNum(row, col)][num] <span class=3D"pl-k">=3D</s=
pan> <span class=3D"pl-c1">false</span>;=0A    }=0A    <span clas=
s=3D"pl-k">return</span> <span class=3D"pl-c1">false</span>;=0A}=0A=
=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k">int</=
span> cubeNum(<span class=3D"pl-k">int</span> i, <span class=3D"p=
l-k">int</span> j) {=0A    <span class=3D"pl-k">int</span> r <spa=
n class=3D"pl-k">=3D</span> i <span class=3D"pl-k">/</span> <span=
 class=3D"pl-c1">3</span>;=0A    <span class=3D"pl-k">int</span>=20=
c <span class=3D"pl-k">=3D</span> j <span class=3D"pl-k">/</span>=
 <span class=3D"pl-c1">3</span>;=0A    <span class=3D"pl-k">retur=
n</span> r <span class=3D"pl-k">*</span> <span class=3D"pl-c1">3<=
/span> <span class=3D"pl-k">+</span> c;=0A}</pre></div><h2>=E5=88=
=86=E6=B2=BB</h2><p>=E7=BB=99=E8=A1=A8=E8=BE=BE=E5=BC=8F=E5=8A=A0=
=E6=8B=AC=E5=8F=B7</p><p><a href=3D"https://leetcode.com/problems=
/different-ways-to-add-parentheses/description/" target=3D"_blank=
">Leetcode : 241. Different Ways to Add Parentheses (Medium)</a><=
/p><div class=3D"highlight highlight-text-html-basic"><pre>Input:=
 "2-1-1".=0A=0A((2-1)-1) =3D 0=0A(2-(1-1)) =3D 2=0A=0AOutput : [0=
, 2]</pre></div><div class=3D"highlight highlight-source-java"><p=
re><span class=3D"pl-k">public</span> <span class=3D"pl-k">List&l=
t;<span class=3D"pl-smi">Integer</span>&gt;</span> diffWaysToComp=
ute(<span class=3D"pl-smi">String</span> input) {=0A    <span cla=
ss=3D"pl-k">int</span> n <span class=3D"pl-k">=3D</span> input<sp=
an class=3D"pl-k">.</span>length();=0A    <span class=3D"pl-k">Li=
st&lt;<span class=3D"pl-smi">Integer</span>&gt;</span> ret <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span c=
lass=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <span class=3D"pl=
-k">for</span> (<span class=3D"pl-k">int</span> i <span class=3D"=
pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D=
"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span>) {=0A     =20=
  <span class=3D"pl-k">char</span> c <span class=3D"pl-k">=3D</sp=
an> input<span class=3D"pl-k">.</span>charAt(i);=0A        <span=20=
class=3D"pl-k">if</span> (c <span class=3D"pl-k">=3D=3D</span> <s=
pan class=3D"pl-s"><span class=3D"pl-pds">'</span>+<span class=3D=
"pl-pds">'</span></span> <span class=3D"pl-k">||</span> c <span c=
lass=3D"pl-k">=3D=3D</span> <span class=3D"pl-s"><span class=3D"p=
l-pds">'</span>-<span class=3D"pl-pds">'</span></span> <span clas=
s=3D"pl-k">||</span> c <span class=3D"pl-k">=3D=3D</span> <span c=
lass=3D"pl-s"><span class=3D"pl-pds">'</span>*<span class=3D"pl-p=
ds">'</span></span>) {=0A            <span class=3D"pl-k">List&lt=
;<span class=3D"pl-smi">Integer</span>&gt;</span> left <span clas=
s=3D"pl-k">=3D</span> diffWaysToCompute(input<span class=3D"pl-k"=
>.</span>substring(<span class=3D"pl-c1">0</span>, i));=0A      =20=
     <span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer<=
/span>&gt;</span> right <span class=3D"pl-k">=3D</span> diffWaysT=
oCompute(input<span class=3D"pl-k">.</span>substring(i <span clas=
s=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>));=0A        =20=
   <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int</spa=
n> l <span class=3D"pl-k">:</span> left) {=0A                <spa=
n class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> r <s=
pan class=3D"pl-k">:</span> right) {=0A                    <span=20=
class=3D"pl-k">switch</span> (c) {=0A                        <spa=
n class=3D"pl-k">case</span> <span class=3D"pl-s"><span class=3D"=
pl-pds">'</span>+<span class=3D"pl-pds">'</span></span><span clas=
s=3D"pl-k">:</span> ret<span class=3D"pl-k">.</span>add(l <span c=
lass=3D"pl-k">+</span> r); <span class=3D"pl-k">break</span>;=0A=20=
                       <span class=3D"pl-k">case</span> <span cla=
ss=3D"pl-s"><span class=3D"pl-pds">'</span>-<span class=3D"pl-pds=
">'</span></span><span class=3D"pl-k">:</span> ret<span class=3D"=
pl-k">.</span>add(l <span class=3D"pl-k">-</span> r); <span class=
=3D"pl-k">break</span>;=0A                        <span class=3D"=
pl-k">case</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</=
span>*<span class=3D"pl-pds">'</span></span><span class=3D"pl-k">=
:</span> ret<span class=3D"pl-k">.</span>add(l <span class=3D"pl-=
k">*</span> r); <span class=3D"pl-k">break</span>;=0A           =20=
        }=0A                }=0A            }=0A        }=0A    }=
=0A    <span class=3D"pl-k">if</span> (ret<span class=3D"pl-k">.<=
/span>size() <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl=
-c1">0</span>) ret<span class=3D"pl-k">.</span>add(<span class=3D=
"pl-smi">Integer</span><span class=3D"pl-k">.</span>valueOf(input=
));=0A    <span class=3D"pl-k">return</span> ret;=0A}</pre></div>=
<h2>=E5=8A=A8=E6=80=81=E8=A7=84=E5=88=92</h2><p>=E9=80=92=E5=BD=92=
=E5=92=8C=E5=8A=A8=E6=80=81=E8=A7=84=E5=88=92=E9=83=BD=E6=98=AF=E5=
=B0=86=E5=8E=9F=E9=97=AE=E9=A2=98=E6=8B=86=E6=88=90=E5=A4=9A=E4=B8=
=AA=E5=AD=90=E9=97=AE=E9=A2=98=E7=84=B6=E5=90=8E=E6=B1=82=E8=A7=A3=
=EF=BC=8C=E4=BB=96=E4=BB=AC=E4=B9=8B=E9=97=B4=E6=9C=80=E6=9C=AC=E8=
=B4=A8=E7=9A=84=E5=8C=BA=E5=88=AB=E6=98=AF=EF=BC=8C=E5=8A=A8=E6=80=
=81=E8=A7=84=E5=88=92=E4=BF=9D=E5=AD=98=E4=BA=86=E5=AD=90=E9=97=AE=
=E9=A2=98=E7=9A=84=E8=A7=A3=E3=80=82</p><h3>=E5=88=86=E5=89=B2=E6=
=95=B4=E6=95=B0</h3><p>=E5=88=86=E5=89=B2=E6=95=B4=E6=95=B0=E7=9A=
=84=E6=9C=80=E5=A4=A7=E4=B9=98=E7=A7=AF</p><p><a href=3D"https://=
leetcode.com/problems/integer-break/description/" target=3D"_blan=
k">Leetcode : 343. Integer Break (Medim)</a></p><p>=E9=A2=98=E7=9B=
=AE=E6=8F=8F=E8=BF=B0=EF=BC=9AFor example, given n =3D 2, return=20=
1 (2 =3D 1 + 1); given n =3D 10, return 36 (10 =3D 3 + 3 + 4).</p=
><div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> integerBreak=
(<span class=3D"pl-k">int</span> n) {=0A    <span class=3D"pl-k">=
int</span>[] dp <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-k">new</span> <span class=3D"pl-smi">int</span>[n <span class=3D=
"pl-k">+</span> <span class=3D"pl-c1">1</span>];=0A    dp[<span c=
lass=3D"pl-c1">1</span>] <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-c1">1</span>;=0A    <span class=3D"pl-k">for</span>(<sp=
an class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <s=
pan class=3D"pl-c1">2</span>; i <span class=3D"pl-k">&lt;=3D</spa=
n> n; i<span class=3D"pl-k">++</span>) {=0A        <span class=3D=
"pl-k">for</span>(<span class=3D"pl-k">int</span> j <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">1</span>; j <span class=3D=
"pl-k">&lt;=3D</span> i <span class=3D"pl-k">-</span> <span class=
=3D"pl-c1">1</span>; j<span class=3D"pl-k">++</span>) {=0A      =20=
     dp[i] <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi"=
>Math</span><span class=3D"pl-k">.</span>max(dp[i], <span class=3D=
"pl-smi">Math</span><span class=3D"pl-k">.</span>max(j <span clas=
s=3D"pl-k">*</span> dp[i <span class=3D"pl-k">-</span> j], j <spa=
n class=3D"pl-k">*</span> (i <span class=3D"pl-k">-</span> j)));=0A=
        }=0A    }=0A    <span class=3D"pl-k">return</span> dp[n];=
=0A}</pre></div><p>=E6=8C=89=E5=B9=B3=E6=96=B9=E6=95=B0=E6=9D=A5=E5=
=88=86=E5=89=B2=E6=95=B4=E6=95=B0</p><p><a href=3D"https://leetco=
de.com/problems/perfect-squares/description/" target=3D"_blank">L=
eetcode : 279. Perfect Squares(Medium)</a></p><p>=E9=A2=98=E7=9B=AE=
=E6=8F=8F=E8=BF=B0=EF=BC=9AFor example, given n =3D 12, return 3=20=
because 12 =3D 4 + 4 + 4; given n =3D 13, return 2 because 13 =3D=
 4 + 9.</p><div class=3D"highlight highlight-source-java"><pre><s=
pan class=3D"pl-k">public</span> <span class=3D"pl-k">int</span>=20=
numSquares(<span class=3D"pl-k">int</span> n) {=0A    <span class=
=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</span>&gt;</span=
> squares <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">ne=
w</span> <span class=3D"pl-k">ArrayList&lt;&gt;</span>(); <span c=
lass=3D"pl-c"><span class=3D"pl-c">//</span> =E5=AD=98=E5=82=A8=E5=
=B0=8F=E4=BA=8E n =E7=9A=84=E5=B9=B3=E6=96=B9=E6=95=B0</span>=0A=20=
   <span class=3D"pl-k">int</span> diff <span class=3D"pl-k">=3D<=
/span> <span class=3D"pl-c1">3</span>;=0A    <span class=3D"pl-k"=
>while</span>(square <span class=3D"pl-k">&lt;=3D</span> n) {=0A=20=
       squares<span class=3D"pl-k">.</span>add(square);=0A      =20=
 square <span class=3D"pl-k">+=3D</span> diff;=0A        diff <sp=
an class=3D"pl-k">+=3D</span> <span class=3D"pl-c1">2</span>;=0A=20=
   }=0A    <span class=3D"pl-k">int</span>[] dp <span class=3D"pl=
-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl-=
smi">int</span>[n <span class=3D"pl-k">+</span> <span class=3D"pl=
-c1">1</span>];=0A    <span class=3D"pl-k">for</span>(<span class=
=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span clas=
s=3D"pl-c1">1</span>; i <span class=3D"pl-k">&lt;=3D</span> n; i<=
span class=3D"pl-k">++</span>) {=0A        <span class=3D"pl-k">i=
nt</span> max <span class=3D"pl-k">=3D</span> <span class=3D"pl-s=
mi">Integer</span><span class=3D"pl-c1"><span class=3D"pl-k">.</s=
pan>MAX_VALUE</span>;=0A        <span class=3D"pl-k">for</span>(<=
span class=3D"pl-k">int</span> s <span class=3D"pl-k">:</span> sq=
uares) {=0A            <span class=3D"pl-k">if</span>(s <span cla=
ss=3D"pl-k">&gt;</span> i) <span class=3D"pl-k">break</span>;=0A=20=
           max <span class=3D"pl-k">=3D</span> <span class=3D"pl-=
smi">Math</span><span class=3D"pl-k">.</span>min(max, dp[i <span=20=
class=3D"pl-k">-</span> s] <span class=3D"pl-k">+</span> <span cl=
ass=3D"pl-c1">1</span>);=0A        }=0A        dp[i] <span class=3D=
"pl-k">=3D</span> max;=0A    }=0A    <span class=3D"pl-k">return<=
/span> dp[n];=0A}</pre></div><p>=E5=88=86=E5=89=B2=E6=95=B4=E6=95=
=B0=E6=9E=84=E6=88=90=E5=AD=97=E6=AF=8D=E5=AD=97=E7=AC=A6=E4=B8=B2=
</p><p><a href=3D"https://leetcode.com/problems/decode-ways/descr=
iption/" target=3D"_blank">Leetcode : 91. Decode Ways (Medium)</a=
></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9AGiven encode=
d message "12", it could be decoded as "AB" (1 2) or "L" (12).</p=
><div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> numDecodings=
(<span class=3D"pl-smi">String</span> s) {=0A    <span class=3D"p=
l-k">if</span>(s <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">null</span> <span class=3D"pl-k">||</span> s<span class=3D=
"pl-k">.</span>length() <span class=3D"pl-k">=3D=3D</span> <span=20=
class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> <spa=
n class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</span>=
 n <span class=3D"pl-k">=3D</span> s<span class=3D"pl-k">.</span>=
length();=0A    <span class=3D"pl-k">int</span>[] dp <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"=
pl-smi">int</span>[n <span class=3D"pl-k">+</span> <span class=3D=
"pl-c1">1</span>];=0A    dp[<span class=3D"pl-c1">0</span>] <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span>;=0A   =20=
dp[<span class=3D"pl-c1">1</span>] <span class=3D"pl-k">=3D</span=
> s<span class=3D"pl-k">.</span>charAt(<span class=3D"pl-c1">0</s=
pan>) <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-s"><sp=
an class=3D"pl-pds">'</span>0<span class=3D"pl-pds">'</span></spa=
n> <span class=3D"pl-k">?</span> <span class=3D"pl-c1">0</span> <=
span class=3D"pl-k">:</span> <span class=3D"pl-c1">1</span>;=0A =20=
  <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</span>=
 i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">2</span>=
; i <span class=3D"pl-k">&lt;=3D</span> n; i<span class=3D"pl-k">=
++</span>) {=0A        <span class=3D"pl-k">int</span> one <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Integer</span><s=
pan class=3D"pl-k">.</span>valueOf(s<span class=3D"pl-k">.</span>=
substring(i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1=
</span>, i));=0A        <span class=3D"pl-k">if</span>(one <span=20=
class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">0</span>) dp[i]=20=
<span class=3D"pl-k">+=3D</span> dp[i <span class=3D"pl-k">-</spa=
n> <span class=3D"pl-c1">1</span>];=0A        <span class=3D"pl-k=
">if</span>(s<span class=3D"pl-k">.</span>charAt(i <span class=3D=
"pl-k">-</span> <span class=3D"pl-c1">2</span>) <span class=3D"pl=
-k">=3D=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</=
span>0<span class=3D"pl-pds">'</span></span>) <span class=3D"pl-k=
">continue</span>;=0A        <span class=3D"pl-k">int</span> two=20=
<span class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Integer</s=
pan><span class=3D"pl-k">.</span>valueOf(s<span class=3D"pl-k">.<=
/span>substring(i <span class=3D"pl-k">-</span> <span class=3D"pl=
-c1">2</span>, i));=0A        <span class=3D"pl-k">if</span>(two=20=
<span class=3D"pl-k">&lt;=3D</span> <span class=3D"pl-c1">26</spa=
n>) dp[i] <span class=3D"pl-k">+=3D</span> dp[i <span class=3D"pl=
-k">-</span> <span class=3D"pl-c1">2</span>];=0A    }=0A    <span=
 class=3D"pl-k">return</span> dp[n];=0A}</pre></div><h3>=E7=9F=A9=
=E9=98=B5=E8=B7=AF=E5=BE=84</h3><p>=E7=9F=A9=E9=98=B5=E7=9A=84=E6=
=80=BB=E8=B7=AF=E5=BE=84=E6=95=B0</p><p><a href=3D"https://leetco=
de.com/problems/unique-paths/description/" target=3D"_blank">Leet=
code : 62. Unique Paths (Medium)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=
=8F=E8=BF=B0=EF=BC=9A=E7=BB=9F=E8=AE=A1=E4=BB=8E=E7=9F=A9=E9=98=B5=
=E5=B7=A6=E4=B8=8A=E8=A7=92=E5=88=B0=E5=8F=B3=E4=B8=8B=E8=A7=92=E7=
=9A=84=E8=B7=AF=E5=BE=84=E6=80=BB=E6=95=B0=EF=BC=8C=E6=AF=8F=E6=AC=
=A1=E5=8F=AA=E8=83=BD=E5=90=91=E5=B7=A6=E5=92=8C=E5=90=91=E4=B8=8B=
=E7=A7=BB=E5=8A=A8=E3=80=82</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">public</span> <span class=3D=
"pl-k">int</span> uniquePaths(<span class=3D"pl-k">int</span> m,=20=
<span class=3D"pl-k">int</span> n) {=0A    <span class=3D"pl-k">i=
nt</span>[] dp <span class=3D"pl-k">=3D</span> <span class=3D"pl-=
k">new</span> <span class=3D"pl-smi">int</span>[n];=0A    <span c=
lass=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <spa=
n class=3D"pl-k">&lt;</span> m; i<span class=3D"pl-k">++</span>)=20=
{=0A        <span class=3D"pl-k">for</span> (<span class=3D"pl-k"=
>int</span> j <span class=3D"pl-k">=3D</span> <span class=3D"pl-c=
1">0</span>; j <span class=3D"pl-k">&lt;</span> n; j<span class=3D=
"pl-k">++</span>) {=0A            <span class=3D"pl-k">if</span>(=
i <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</spa=
n>) dp[j] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1=
</span>;=0A            <span class=3D"pl-k">else</span> <span cla=
ss=3D"pl-k">if</span>(j <span class=3D"pl-k">!=3D</span> <span cl=
ass=3D"pl-c1">0</span>) dp[j] <span class=3D"pl-k">=3D</span> dp[=
j] <span class=3D"pl-k">+</span> dp[j <span class=3D"pl-k">-</spa=
n> <span class=3D"pl-c1">1</span>];=0A        }=0A    }=0A    <sp=
an class=3D"pl-k">return</span> dp[n <span class=3D"pl-k">-</span=
> <span class=3D"pl-c1">1</span>];=0A}</pre></div><p>=E7=9F=A9=E9=
=98=B5=E7=9A=84=E6=9C=80=E5=B0=8F=E8=B7=AF=E5=BE=84=E5=92=8C</p><=
p><a href=3D"https://leetcode.com/problems/minimum-path-sum/descr=
iption/" target=3D"_blank">Leetcode : 64. Minimum Path Sum (Mediu=
m)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E6=B1=82=
=E4=BB=8E=E7=9F=A9=E9=98=B5=E7=9A=84=E5=B7=A6=E4=B8=8A=E8=A7=92=E5=
=88=B0=E5=8F=B3=E4=B8=8B=E8=A7=92=E7=9A=84=E6=9C=80=E5=B0=8F=E8=B7=
=AF=E5=BE=84=E5=92=8C=EF=BC=8C=E6=AF=8F=E6=AC=A1=E5=8F=AA=E8=83=BD=
=E5=90=91=E5=B7=A6=E5=92=8C=E5=90=91=E4=B8=8B=E7=A7=BB=E5=8A=A8=E3=
=80=82</p><div class=3D"highlight highlight-source-java"><pre><sp=
an class=3D"pl-k">public</span> <span class=3D"pl-k">int</span> m=
inPathSum(<span class=3D"pl-k">int</span>[][] grid) {=0A    <span=
 class=3D"pl-k">if</span>(grid<span class=3D"pl-k">.</span>length=
 <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span=
> <span class=3D"pl-k">||</span> grid[<span class=3D"pl-c1">0</sp=
an>]<span class=3D"pl-k">.</span>length <span class=3D"pl-k">=3D=3D=
</span> <span class=3D"pl-c1">0</span>) <span class=3D"pl-k">retu=
rn</span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl=
-k">int</span> m <span class=3D"pl-k">=3D</span> grid<span class=3D=
"pl-k">.</span>length, n <span class=3D"pl-k">=3D</span> grid[<sp=
an class=3D"pl-c1">0</span>]<span class=3D"pl-k">.</span>length;=0A=
    <span class=3D"pl-k">int</span>[] dp <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">in=
t</span>[n];=0A    <span class=3D"pl-k">for</span>(<span class=3D=
"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> m; i<span cl=
ass=3D"pl-k">++</span>) {=0A        <span class=3D"pl-k">for</spa=
n>(<span class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</sp=
an> <span class=3D"pl-c1">0</span>; j <span class=3D"pl-k">&lt;</=
span> n; j<span class=3D"pl-k">++</span>) {=0A            <span c=
lass=3D"pl-k">if</span>(j <span class=3D"pl-k">=3D=3D</span> <spa=
n class=3D"pl-c1">0</span>) dp[<span class=3D"pl-c1">0</span>] <s=
pan class=3D"pl-k">=3D</span> dp[<span class=3D"pl-c1">0</span>]=20=
<span class=3D"pl-k">+</span> grid[i][<span class=3D"pl-c1">0</sp=
an>];=0A            <span class=3D"pl-k">else</span> <span class=3D=
"pl-k">if</span>(i <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">0</span>) dp[j] <span class=3D"pl-k">=3D</span> dp[j <=
span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>] <spa=
n class=3D"pl-k">+</span> grid[<span class=3D"pl-c1">0</span>][j]=
;=0A            <span class=3D"pl-k">else</span> dp[j] <span clas=
s=3D"pl-k">=3D</span> <span class=3D"pl-smi">Math</span><span cla=
ss=3D"pl-k">.</span>min(dp[j <span class=3D"pl-k">-</span> <span=20=
class=3D"pl-c1">1</span>], dp[j]) <span class=3D"pl-k">+</span> g=
rid[i][j];=0A        }=0A    }=0A    <span class=3D"pl-k">return<=
/span> dp[n <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1=
</span>];=0A}</pre></div><h3>=E6=96=90=E6=B3=A2=E9=82=A3=E5=A5=91=
=E6=95=B0=E5=88=97</h3><p>=E7=88=AC=E6=A5=BC=E6=A2=AF</p><p><a hr=
ef=3D"https://leetcode.com/problems/climbing-stairs/description/"=
 target=3D"_blank">Leetcode : 70. Climbing Stairs (Easy)</a></p><=
p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E6=9C=89 N =E9=98=
=B6=E6=A5=BC=E6=A2=AF=EF=BC=8C=E6=AF=8F=E6=AC=A1=E5=8F=AF=E4=BB=A5=
=E4=B8=8A=E4=B8=80=E9=98=B6=E6=88=96=E8=80=85=E4=B8=A4=E9=98=B6=EF=
=BC=8C=E6=B1=82=E6=9C=89=E5=A4=9A=E5=B0=91=E7=A7=8D=E4=B8=8A=E6=A5=
=BC=E6=A2=AF=E7=9A=84=E6=96=B9=E6=B3=95=E3=80=82</p><p>=E5=AE=9A=E4=
=B9=89=E4=B8=80=E4=B8=AA=E6=95=B0=E7=BB=84 dp =E5=AD=98=E5=82=A8=E4=
=B8=8A=E6=A5=BC=E6=A2=AF=E7=9A=84=E6=96=B9=E6=B3=95=E6=95=B0=EF=BC=
=88=E4=B8=BA=E4=BA=86=E6=96=B9=E4=BE=BF=E8=AE=A8=E8=AE=BA=EF=BC=8C=
=E6=95=B0=E7=BB=84=E4=B8=8B=E6=A0=87=E4=BB=8E 1 =E5=BC=80=E5=A7=8B=
=EF=BC=89=EF=BC=8Cdp[i] =E8=A1=A8=E7=A4=BA=E8=B5=B0=E5=88=B0=E7=AC=
=AC i =E4=B8=AA=E6=A5=BC=E6=A2=AF=E7=9A=84=E6=96=B9=E6=B3=95=E6=95=
=B0=E7=9B=AE=E3=80=82=E7=AC=AC i =E4=B8=AA=E6=A5=BC=E6=A2=AF=E5=8F=
=AF=E4=BB=A5=E4=BB=8E=E7=AC=AC i-1 =E5=92=8C i-2 =E4=B8=AA=E6=A5=BC=
=E6=A2=AF=E5=86=8D=E8=B5=B0=E4=B8=80=E6=AD=A5=E5=88=B0=E8=BE=BE=EF=
=BC=8C=E8=B5=B0=E5=88=B0=E7=AC=AC i =E4=B8=AA=E6=A5=BC=E6=A2=AF=E7=
=9A=84=E6=96=B9=E6=B3=95=E6=95=B0=E4=B8=BA=E8=B5=B0=E5=88=B0=E7=AC=
=AC i-1 =E5=92=8C=E7=AC=AC i-2 =E4=B8=AA=E6=A5=BC=E6=A2=AF=E7=9A=84=
=E6=96=B9=E6=B3=95=E6=95=B0=E4=B9=8B=E5=92=8C=E3=80=82</p><p><a h=
ref=3D"https://camo.githubusercontent.com/1d5e84c8ddf95dbf139a3ba=
fda3ba7bb377f3276/687474703a2f2f6c617465782e636f6465636f67732e636=
f6d2f6769662e6c617465783f2535432535436470253542692535443d64702535=
42692d312535442b6470253542692d32253544" target=3D"_blank"><img sr=
c=3D"0.4896489623149012.png" alt=3D""></a></p><p>dp[N] =E5=8D=B3=E4=
=B8=BA=E6=89=80=E6=B1=82=E3=80=82</p><p>=E8=80=83=E8=99=91=E5=88=B0=
 dp[i] =E5=8F=AA=E4=B8=8E dp[i - 1] =E5=92=8C dp[i - 2] =E6=9C=89=
=E5=85=B3=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=8F=AF=E4=BB=A5=E5=8F=AA=E7=
=94=A8=E4=B8=A4=E4=B8=AA=E5=8F=98=E9=87=8F=E6=9D=A5=E5=AD=98=E5=82=
=A8 dp[i - 1] =E5=92=8C dp[i - 2] =E5=8D=B3=E5=8F=AF=EF=BC=8C=E4=BD=
=BF=E5=BE=97=E5=8E=9F=E6=9D=A5=E7=9A=84 O(n) =E7=A9=BA=E9=97=B4=E5=
=A4=8D=E6=9D=82=E5=BA=A6=E4=BC=98=E5=8C=96=E4=B8=BA O(1) =E5=A4=8D=
=E6=9D=82=E5=BA=A6=E3=80=82</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">public</span> <span class=3D=
"pl-k">int</span> climbStairs(<span class=3D"pl-k">int</span> n)=20=
{=0A    <span class=3D"pl-k">if</span>(n <span class=3D"pl-k">=3D=
=3D</span> <span class=3D"pl-c1">1</span>) <span class=3D"pl-k">r=
eturn</span> <span class=3D"pl-c1">1</span>;=0A    <span class=3D=
"pl-k">if</span>(n <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">2</span>) <span class=3D"pl-k">return</span> <span cla=
ss=3D"pl-c1">2</span>;=0A    <span class=3D"pl-c"><span class=3D"=
pl-c">//</span> =E5=89=8D=E4=B8=80=E4=B8=AA=E6=A5=BC=E6=A2=AF=E3=80=
=81=E5=90=8E=E4=B8=80=E4=B8=AA=E6=A5=BC=E6=A2=AF</span>=0A    <sp=
an class=3D"pl-k">int</span> pre1 <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-c1">2</span>, pre2 <span class=3D"pl-k">=3D</s=
pan> <span class=3D"pl-c1">1</span>;=0A    <span class=3D"pl-k">f=
or</span>(<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=
=3D</span> <span class=3D"pl-c1">2</span>; i <span class=3D"pl-k"=
>&lt;</span> n; i<span class=3D"pl-k">++</span>){=0A        <span=
 class=3D"pl-k">int</span> cur <span class=3D"pl-k">=3D</span> pr=
e1 <span class=3D"pl-k">+</span> pre2;=0A        pre2 <span class=
=3D"pl-k">=3D</span> pre1;=0A        pre1 <span class=3D"pl-k">=3D=
</span> cur;=0A    }=0A    <span class=3D"pl-k">return</span> pre=
1;=0A}</pre></div><p>=E6=AF=8D=E7=89=9B=E7=94=9F=E4=BA=A7</p><p><=
a href=3D"https://github.com/CyC2018/InterviewNotes/blob/master/n=
otes/Leetcode%20%E9%A2%98%E8%A7%A3.md#" target=3D"_blank">=E7=A8=8B=
=E5=BA=8F=E5=91=98=E4=BB=A3=E7=A0=81=E9=9D=A2=E8=AF=95=E6=8C=87=E5=
=8D=97-P181</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=
=E5=81=87=E8=AE=BE=E5=86=9C=E5=9C=BA=E4=B8=AD=E6=88=90=E7=86=9F=E7=
=9A=84=E6=AF=8D=E7=89=9B=E6=AF=8F=E5=B9=B4=E9=83=BD=E4=BC=9A=E7=94=
=9F 1 =E5=A4=B4=E5=B0=8F=E6=AF=8D=E7=89=9B=EF=BC=8C=E5=B9=B6=E4=B8=
=94=E6=B0=B8=E8=BF=9C=E4=B8=8D=E4=BC=9A=E6=AD=BB=E3=80=82=E7=AC=AC=
=E4=B8=80=E5=B9=B4=E6=9C=89 1 =E5=8F=AA=E5=B0=8F=E6=AF=8D=E7=89=9B=
=EF=BC=8C=E4=BB=8E=E7=AC=AC=E4=BA=8C=E5=B9=B4=E5=BC=80=E5=A7=8B=EF=
=BC=8C=E6=AF=8D=E7=89=9B=E5=BC=80=E5=A7=8B=E7=94=9F=E5=B0=8F=E6=AF=
=8D=E7=89=9B=E3=80=82=E6=AF=8F=E5=8F=AA=E5=B0=8F=E6=AF=8D=E7=89=9B=
 3 =E5=B9=B4=E4=B9=8B=E5=90=8E=E6=88=90=E7=86=9F=E5=8F=88=E5=8F=AF=
=E4=BB=A5=E7=94=9F=E5=B0=8F=E6=AF=8D=E7=89=9B=E3=80=82=E7=BB=99=E5=
=AE=9A=E6=95=B4=E6=95=B0 N=EF=BC=8C=E6=B1=82 N =E5=B9=B4=E5=90=8E=
=E7=89=9B=E7=9A=84=E6=95=B0=E9=87=8F=E3=80=82</p><p>=E7=AC=AC i =E5=
=B9=B4=E6=88=90=E7=86=9F=E7=9A=84=E7=89=9B=E7=9A=84=E6=95=B0=E9=87=
=8F=E4=B8=BA=EF=BC=9A</p><p><a href=3D"https://camo.githubusercon=
tent.com/c38d3197aa6ffb3c0cab36fd93565dcf9202e5e2/687474703a2f2f6=
c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354325=
35436470253542692535443d6470253542692d312535442b6470253542692d332=
53544" target=3D"_blank"><img src=3D"0.5665683119959621.png" alt=3D=
""></a></p><p>=E5=BC=BA=E7=9B=97=E6=8A=A2=E5=8A=AB</p><p><a href=3D=
"https://leetcode.com/problems/house-robber/description/" target=3D=
"_blank">Leetcode : 198. House Robber (Easy)</a></p><p>=E9=A2=98=E7=
=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E6=8A=A2=E5=8A=AB=E4=B8=80=E6=8E=
=92=E4=BD=8F=E6=88=B7=EF=BC=8C=E4=BD=86=E6=98=AF=E4=B8=8D=E8=83=BD=
=E6=8A=A2=E9=82=BB=E8=BF=91=E7=9A=84=E4=BD=8F=E6=88=B7=EF=BC=8C=E6=
=B1=82=E6=9C=80=E5=A4=A7=E6=8A=A2=E5=8A=AB=E9=87=8F=E3=80=82</p><=
p>=E5=AE=9A=E4=B9=89 dp =E6=95=B0=E7=BB=84=E7=94=A8=E6=9D=A5=E5=AD=
=98=E5=82=A8=E6=9C=80=E5=A4=A7=E7=9A=84=E6=8A=A2=E5=8A=AB=E9=87=8F=
=EF=BC=8C=E5=85=B6=E4=B8=AD dp[i] =E8=A1=A8=E7=A4=BA=E6=8A=A2=E5=88=
=B0=E7=AC=AC i =E4=B8=AA=E4=BD=8F=E6=88=B7=E6=97=B6=E7=9A=84=E6=9C=
=80=E5=A4=A7=E6=8A=A2=E5=8A=AB=E9=87=8F=E3=80=82=E7=94=B1=E4=BA=8E=
=E4=B8=8D=E8=83=BD=E6=8A=A2=E5=8A=AB=E9=82=BB=E8=BF=91=E4=BD=8F=E6=
=88=B7=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=A6=82=E6=9E=9C=E6=8A=A2=E5=8A=
=AB=E4=BA=86=E7=AC=AC i =E4=B8=AA=E4=BD=8F=E6=88=B7=E9=82=A3=E4=B9=
=88=E5=8F=AA=E8=83=BD=E6=8A=A2=E5=8A=AB i - 2 =E5=92=8C i - 3 =E7=
=9A=84=E4=BD=8F=E6=88=B7=EF=BC=8C=E6=89=80=E4=BB=A5</p><p><a href=
=3D"https://camo.githubusercontent.com/5bc6574a337f3ef653d9982594=
8f8e96beb43757/687474703a2f2f6c617465782e636f6465636f67732e636f6d=
2f6769662e6c617465783f2535432535436470253542692535443d6d617828647=
0253542692d322535442c6470253542692d33253544292b6e756d732535426925=
3544" target=3D"_blank"><img src=3D"0.8593750573836176.png" alt=3D=
""></a></p><p>O(n) =E7=A9=BA=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E5=
=AE=9E=E7=8E=B0=E6=96=B9=E6=B3=95=EF=BC=9A</p><div class=3D"highl=
ight highlight-source-java"><pre><span class=3D"pl-k">public</spa=
n> <span class=3D"pl-k">int</span> rob(<span class=3D"pl-k">int</=
span>[] nums) {=0A    <span class=3D"pl-k">int</span> n <span cla=
ss=3D"pl-k">=3D</span> nums<span class=3D"pl-k">.</span>length;=0A=
    <span class=3D"pl-k">if</span>(n <span class=3D"pl-k">=3D=3D<=
/span> <span class=3D"pl-c1">0</span>) <span class=3D"pl-k">retur=
n</span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-=
k">if</span>(n <span class=3D"pl-k">=3D=3D</span> <span class=3D"=
pl-c1">1</span>) <span class=3D"pl-k">return</span> nums[<span cl=
ass=3D"pl-c1">0</span>];=0A    <span class=3D"pl-k">if</span>(n <=
span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">2</span>)=
 <span class=3D"pl-k">return</span> <span class=3D"pl-smi">Math</=
span><span class=3D"pl-k">.</span>max(nums[<span class=3D"pl-c1">=
0</span>], nums[<span class=3D"pl-c1">1</span>]);=0A    <span cla=
ss=3D"pl-k">int</span>[] dp <span class=3D"pl-k">=3D</span> <span=
 class=3D"pl-k">new</span> <span class=3D"pl-smi">int</span>[n];=0A=
    dp[<span class=3D"pl-c1">0</span>] <span class=3D"pl-k">=3D</=
span> nums[<span class=3D"pl-c1">0</span>];=0A    dp[<span class=3D=
"pl-c1">1</span>] <span class=3D"pl-k">=3D</span> nums[<span clas=
s=3D"pl-c1">1</span>];=0A    dp[<span class=3D"pl-c1">2</span>] <=
span class=3D"pl-k">=3D</span> nums[<span class=3D"pl-c1">0</span=
>] <span class=3D"pl-k">+</span> nums[<span class=3D"pl-c1">2</sp=
an>];=0A    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">=
int</span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1=
">3</span>; i <span class=3D"pl-k">&lt;</span> n; i<span class=3D=
"pl-k">++</span>){=0A        dp[i] <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>=
max(dp[i <span class=3D"pl-k">-</span><span class=3D"pl-c1">2</sp=
an>], dp[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">3<=
/span>]) <span class=3D"pl-k">+</span> nums[i];=0A    }=0A    <sp=
an class=3D"pl-k">return</span> <span class=3D"pl-smi">Math</span=
><span class=3D"pl-k">.</span>max(dp[n <span class=3D"pl-k">-</sp=
an> <span class=3D"pl-c1">1</span>], dp[n <span class=3D"pl-k">-<=
/span> <span class=3D"pl-c1">2</span>]);=0A}</pre></div><p>O(1) =E7=
=A9=BA=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E5=AE=9E=E7=8E=B0=E6=96=
=B9=E6=B3=95=EF=BC=9A</p><div class=3D"highlight highlight-source=
-java"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-=
k">int</span> rob(<span class=3D"pl-k">int</span>[] nums) {=0A  =20=
 <span class=3D"pl-k">int</span> n <span class=3D"pl-k">=3D</span=
> nums<span class=3D"pl-k">.</span>length;=0A    <span class=3D"p=
l-k">if</span>(n <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">0</span>) <span class=3D"pl-k">return</span> <span class=3D=
"pl-c1">0</span>;=0A    <span class=3D"pl-k">if</span>(n <span cl=
ass=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">1</span>) <span=20=
class=3D"pl-k">return</span> nums[<span class=3D"pl-c1">0</span>]=
;=0A    <span class=3D"pl-k">if</span>(n <span class=3D"pl-k">=3D=
=3D</span> <span class=3D"pl-c1">2</span>) <span class=3D"pl-k">r=
eturn</span> <span class=3D"pl-smi">Math</span><span class=3D"pl-=
k">.</span>max(nums[<span class=3D"pl-c1">0</span>], nums[<span c=
lass=3D"pl-c1">1</span>]);=0A    <span class=3D"pl-k">int</span>=20=
pre3 <span class=3D"pl-k">=3D</span> nums[<span class=3D"pl-c1">0=
</span>], pre2 <span class=3D"pl-k">=3D</span> nums[<span class=3D=
"pl-c1">1</span>], pre1 <span class=3D"pl-k">=3D</span> nums[<spa=
n class=3D"pl-c1">2</span>] <span class=3D"pl-k">+</span> nums[<s=
pan class=3D"pl-c1">0</span>];=0A    <span class=3D"pl-k">for</sp=
an>(<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</s=
pan> <span class=3D"pl-c1">3</span>; i <span class=3D"pl-k">&lt;<=
/span> n; i<span class=3D"pl-k">++</span>){=0A        <span class=
=3D"pl-k">int</span> cur <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>max(pre2,=20=
pre3) <span class=3D"pl-k">+</span> nums[i];=0A        pre3 <span=
 class=3D"pl-k">=3D</span> pre2;=0A        pre2 <span class=3D"pl=
-k">=3D</span> pre1;=0A        pre1 <span class=3D"pl-k">=3D</spa=
n> cur;=0A    }=0A    <span class=3D"pl-k">return</span> <span cl=
ass=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>max(pre1,=20=
pre2);=0A}</pre></div><p>=E5=BC=BA=E7=9B=97=E5=9C=A8=E7=8E=AF=E5=BD=
=A2=E8=A1=97=E5=8C=BA=E6=8A=A2=E5=8A=AB</p><p><a href=3D"https://=
leetcode.com/problems/house-robber-ii/description/" target=3D"_bl=
ank">Leetcode : 213. House Robber II (Medium)</a></p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">publi=
c</span> <span class=3D"pl-k">int</span> rob(<span class=3D"pl-k"=
>int</span>[] nums) {=0A    <span class=3D"pl-k">if</span>(nums <=
span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</spa=
n> <span class=3D"pl-k">||</span> nums<span class=3D"pl-k">.</spa=
n>length <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1"=
>0</span>) <span class=3D"pl-k">return</span> <span class=3D"pl-c=
1">0</span>;=0A    <span class=3D"pl-k">int</span> n <span class=3D=
"pl-k">=3D</span> nums<span class=3D"pl-k">.</span>length;=0A   =20=
<span class=3D"pl-k">if</span>(n <span class=3D"pl-k">=3D=3D</spa=
n> <span class=3D"pl-c1">1</span>) <span class=3D"pl-k">return</s=
pan> nums[<span class=3D"pl-c1">0</span>];=0A    <span class=3D"p=
l-k">return</span> <span class=3D"pl-smi">Math</span><span class=3D=
"pl-k">.</span>max(rob(nums, <span class=3D"pl-c1">0</span>, n <s=
pan class=3D"pl-k">-</span> <span class=3D"pl-c1">2</span>), rob(=
nums, <span class=3D"pl-c1">1</span>, n <span class=3D"pl-k">-</s=
pan> <span class=3D"pl-c1">1</span>));=0A}=0A=0A<span class=3D"pl=
-k">private</span> <span class=3D"pl-k">int</span> rob(<span clas=
s=3D"pl-k">int</span>[] nums, <span class=3D"pl-k">int</span> s,=20=
<span class=3D"pl-k">int</span> e) {=0A    <span class=3D"pl-k">i=
nt</span> n <span class=3D"pl-k">=3D</span> nums<span class=3D"pl=
-k">.</span>length;=0A    <span class=3D"pl-k">if</span>(e <span=20=
class=3D"pl-k">-</span> s <span class=3D"pl-k">=3D=3D</span> <spa=
n class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> nu=
ms[s];=0A    <span class=3D"pl-k">if</span>(e <span class=3D"pl-k=
">-</span> s <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl=
-c1">1</span>) <span class=3D"pl-k">return</span> <span class=3D"=
pl-smi">Math</span><span class=3D"pl-k">.</span>max(nums[s], nums=
[s <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>])=
;=0A    <span class=3D"pl-k">int</span>[] dp <span class=3D"pl-k"=
>=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl-smi=
">int</span>[n];=0A    dp[s] <span class=3D"pl-k">=3D</span> nums=
[s];=0A    dp[s <span class=3D"pl-k">+</span> <span class=3D"pl-c=
1">1</span>] <span class=3D"pl-k">=3D</span> nums[s <span class=3D=
"pl-k">+</span> <span class=3D"pl-c1">1</span>];=0A    dp[s <span=
 class=3D"pl-k">+</span> <span class=3D"pl-c1">2</span>] <span cl=
ass=3D"pl-k">=3D</span> nums[s] <span class=3D"pl-k">+</span> num=
s[s <span class=3D"pl-k">+</span> <span class=3D"pl-c1">2</span>]=
;=0A    <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int=
</span> i <span class=3D"pl-k">=3D</span> s <span class=3D"pl-k">=
+</span> <span class=3D"pl-c1">3</span>; i <span class=3D"pl-k">&=
lt;=3D</span> e; i<span class=3D"pl-k">++</span>) {=0A        dp[=
i] <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Math</s=
pan><span class=3D"pl-k">.</span>max(dp[i <span class=3D"pl-k">-<=
/span> <span class=3D"pl-c1">2</span>], dp[i <span class=3D"pl-k"=
>-</span> <span class=3D"pl-c1">3</span>]) <span class=3D"pl-k">+=
</span> nums[i];=0A    }=0A    <span class=3D"pl-k">return</span>=
 <span class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>m=
ax(dp[e], dp[e <span class=3D"pl-k">-</span> <span class=3D"pl-c1=
">1</span>]);=0A}</pre></div><p>=E4=BF=A1=E4=BB=B6=E9=94=99=E6=8E=
=92</p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E6=9C=89=20=
N =E4=B8=AA =E4=BF=A1 =E5=92=8C =E4=BF=A1=E5=B0=81=EF=BC=8C=E5=AE=
=83=E4=BB=AC=E8=A2=AB=E6=89=93=E4=B9=B1=EF=BC=8C=E6=B1=82=E9=94=99=
=E8=AF=AF=E8=A3=85=E4=BF=A1=E7=9A=84=E6=96=B9=E5=BC=8F=E6=95=B0=E9=
=87=8F=E3=80=82</p><p>=E5=AE=9A=E4=B9=89=E4=B8=80=E4=B8=AA=E6=95=B0=
=E7=BB=84 dp =E5=AD=98=E5=82=A8=E9=94=99=E8=AF=AF=E6=96=B9=E5=BC=8F=
=E6=95=B0=E9=87=8F=EF=BC=8Cdp[i] =E8=A1=A8=E7=A4=BA=E5=89=8D i =E4=
=B8=AA=E4=BF=A1=E5=92=8C=E4=BF=A1=E5=B0=81=E7=9A=84=E9=94=99=E8=AF=
=AF=E6=96=B9=E5=BC=8F=E6=95=B0=E9=87=8F=E3=80=82=E5=81=87=E8=AE=BE=
=E7=AC=AC i =E4=B8=AA=E4=BF=A1=E8=A3=85=E5=88=B0=E7=AC=AC j =E4=B8=
=AA=E4=BF=A1=E5=B0=81=E9=87=8C=E9=9D=A2=EF=BC=8C=E8=80=8C=E7=AC=AC=
 j =E4=B8=AA=E4=BF=A1=E8=A3=85=E5=88=B0=E7=AC=AC k =E4=B8=AA=E4=BF=
=A1=E5=B0=81=E9=87=8C=E9=9D=A2=E3=80=82=E6=A0=B9=E6=8D=AE i =E5=92=
=8C k =E6=98=AF=E5=90=A6=E7=9B=B8=E7=AD=89=EF=BC=8C=E6=9C=89=E4=B8=
=A4=E7=A7=8D=E6=83=85=E5=86=B5=EF=BC=9A</p><p>=E2=91=A0 i=3D=3Dk=EF=
=BC=8C=E4=BA=A4=E6=8D=A2 i =E5=92=8C k =E7=9A=84=E4=BF=A1=E5=90=8E=
=EF=BC=8C=E5=AE=83=E4=BB=AC=E7=9A=84=E4=BF=A1=E5=92=8C=E4=BF=A1=E5=
=B0=81=E5=9C=A8=E6=AD=A3=E7=A1=AE=E7=9A=84=E4=BD=8D=E7=BD=AE=EF=BC=
=8C=E4=BD=86=E6=98=AF=E5=85=B6=E4=BD=99 i-2 =E5=B0=81=E4=BF=A1=E6=
=9C=89 dp[i-2] =E7=A7=8D=E9=94=99=E8=AF=AF=E8=A3=85=E4=BF=A1=E7=9A=
=84=E6=96=B9=E5=BC=8F=E3=80=82=E7=94=B1=E4=BA=8E j =E6=9C=89 i-1=20=
=E7=A7=8D=E5=8F=96=E5=80=BC=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=85=B1=E6=
=9C=89 (i-1)*dp[i-2] =E7=A7=8D=E9=94=99=E8=AF=AF=E8=A3=85=E4=BF=A1=
=E6=96=B9=E5=BC=8F=E3=80=82</p><p>=E2=91=A1 i !=3D k=EF=BC=8C=E4=BA=
=A4=E6=8D=A2 i =E5=92=8C j =E7=9A=84=E4=BF=A1=E5=90=8E=EF=BC=8C=E7=
=AC=AC i =E4=B8=AA=E4=BF=A1=E5=92=8C=E4=BF=A1=E5=B0=81=E5=9C=A8=E6=
=AD=A3=E7=A1=AE=E7=9A=84=E4=BD=8D=E7=BD=AE=EF=BC=8C=E5=85=B6=E4=BD=
=99 i-1 =E5=B0=81=E4=BF=A1=E6=9C=89 dp[i-1] =E7=A7=8D=E9=94=99=E8=
=AF=AF=E8=A3=85=E4=BF=A1=E6=96=B9=E5=BC=8F=E3=80=82=E7=94=B1=E4=BA=
=8E j =E6=9C=89 i-1 =E7=A7=8D=E5=8F=96=E5=80=BC=EF=BC=8C=E5=9B=A0=
=E6=AD=A4=E5=85=B1=E6=9C=89 (n-1)*dp[i-1] =E7=A7=8D=E9=94=99=E8=AF=
=AF=E8=A3=85=E4=BF=A1=E6=96=B9=E5=BC=8F=E3=80=82</p><p>=E7=BB=BC=E4=
=B8=8A=E6=89=80=E8=BF=B0=EF=BC=8C=E9=94=99=E8=AF=AF=E8=A3=85=E4=BF=
=A1=E6=95=B0=E9=87=8F=E6=96=B9=E5=BC=8F=E6=95=B0=E9=87=8F=E4=B8=BA=
=EF=BC=9A</p><p><a href=3D"https://camo.githubusercontent.com/a5b=
7c7515c4094d296fbaee110377b8d29d7127a/687474703a2f2f6c617465782e6=
36f6465636f67732e636f6d2f6769662e6c617465783f25354325354364702535=
42692535443d28692d31292a6470253542692d322535442b28692d31292a64702=
53542692d31253544" target=3D"_blank"><img src=3D"0.80653968125458=
18.png" alt=3D""></a></p><p>dp[N] =E5=8D=B3=E4=B8=BA=E6=89=80=E6=B1=
=82=E3=80=82</p><p>=E5=92=8C=E4=B8=8A=E6=A5=BC=E6=A2=AF=E9=97=AE=E9=
=A2=98=E4=B8=80=E6=A0=B7=EF=BC=8Cdp[i] =E5=8F=AA=E4=B8=8E dp[i-1]=
 =E5=92=8C dp[i-2] =E6=9C=89=E5=85=B3=EF=BC=8C=E5=9B=A0=E6=AD=A4=E4=
=B9=9F=E5=8F=AF=E4=BB=A5=E5=8F=AA=E7=94=A8=E4=B8=A4=E4=B8=AA=E5=8F=
=98=E9=87=8F=E6=9D=A5=E5=AD=98=E5=82=A8 dp[i-1] =E5=92=8C dp[i-2]=
=E3=80=82</p><h3>=E6=9C=80=E9=95=BF=E9=80=92=E5=A2=9E=E5=AD=90=E5=
=BA=8F=E5=88=97</h3><p>=E5=B7=B2=E7=9F=A5=E4=B8=80=E4=B8=AA=E5=BA=
=8F=E5=88=97 {S1, S2,...,Sn} =EF=BC=8C=E5=8F=96=E5=87=BA=E8=8B=A5=
=E5=B9=B2=E6=95=B0=E7=BB=84=E6=88=90=E6=96=B0=E7=9A=84=E5=BA=8F=E5=
=88=97 {Si1, Si2,..., Sim}=EF=BC=8C=E5=85=B6=E4=B8=AD i1=E3=80=81=
i2 ... im =E4=BF=9D=E6=8C=81=E9=80=92=E5=A2=9E=EF=BC=8C=E5=8D=B3=E6=
=96=B0=E5=BA=8F=E5=88=97=E4=B8=AD=E5=90=84=E4=B8=AA=E6=95=B0=E4=BB=
=8D=E7=84=B6=E4=BF=9D=E6=8C=81=E5=8E=9F=E6=95=B0=E5=88=97=E4=B8=AD=
=E7=9A=84=E5=85=88=E5=90=8E=E9=A1=BA=E5=BA=8F=EF=BC=8C=E7=A7=B0=E6=
=96=B0=E5=BA=8F=E5=88=97=E4=B8=BA=E5=8E=9F=E5=BA=8F=E5=88=97=E7=9A=
=84=E4=B8=80=E4=B8=AA=E5=AD=90=E5=BA=8F=E5=88=97=E3=80=82</p><p>=E5=
=A6=82=E6=9E=9C=E5=9C=A8=E5=AD=90=E5=BA=8F=E5=88=97=E4=B8=AD=EF=BC=
=8C=E5=BD=93=E4=B8=8B=E6=A0=87 ix &gt; iy =E6=97=B6=EF=BC=8CSix<s=
pan class=3D"Apple-converted-space">&nbsp;</span>&gt; Siy=EF=BC=8C=
=E7=A7=B0=E5=AD=90=E5=BA=8F=E5=88=97=E4=B8=BA=E5=8E=9F=E5=BA=8F=E5=
=88=97=E7=9A=84=E4=B8=80=E4=B8=AA=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=
=8F=E5=88=97=E3=80=82</p><p>=E5=AE=9A=E4=B9=89=E4=B8=80=E4=B8=AA=E6=
=95=B0=E7=BB=84 dp =E5=AD=98=E5=82=A8=E6=9C=80=E9=95=BF=E9=80=92=E5=
=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=E7=9A=84=E9=95=BF=E5=BA=A6=EF=BC=
=8Cdp[n] =E8=A1=A8=E7=A4=BA=E4=BB=A5 Sn<span class=3D"Apple-conve=
rted-space">&nbsp;</span>=E7=BB=93=E5=B0=BE=E7=9A=84=E5=BA=8F=E5=88=
=97=E7=9A=84=E6=9C=80=E9=95=BF=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=
=E5=88=97=E9=95=BF=E5=BA=A6=E3=80=82=E5=AF=B9=E4=BA=8E=E4=B8=80=E4=
=B8=AA=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97 {Si1, Si2,...=
,Sim}=EF=BC=8C=E5=A6=82=E6=9E=9C im &lt; n =E5=B9=B6=E4=B8=94 Sim=
<span class=3D"Apple-converted-space">&nbsp;</span>&lt; Sn<span c=
lass=3D"Apple-converted-space">&nbsp;</span>=EF=BC=8C=E6=AD=A4=E6=
=97=B6 {Si1, Si2,..., Sim, Sn} =E4=B8=BA=E4=B8=80=E4=B8=AA=E9=80=92=
=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=EF=BC=8C=E9=80=92=E5=A2=9E=E5=
=AD=90=E5=BA=8F=E5=88=97=E7=9A=84=E9=95=BF=E5=BA=A6=E5=A2=9E=E5=8A=
=A0 1=E3=80=82=E6=BB=A1=E8=B6=B3=E4=B8=8A=E8=BF=B0=E6=9D=A1=E4=BB=
=B6=E7=9A=84=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=E4=B8=AD=
=EF=BC=8C=E9=95=BF=E5=BA=A6=E6=9C=80=E9=95=BF=E7=9A=84=E9=82=A3=E4=
=B8=AA=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=E5=B0=B1=E6=98=
=AF=E8=A6=81=E6=89=BE=E7=9A=84=EF=BC=8C=E5=9C=A8=E9=95=BF=E5=BA=A6=
=E6=9C=80=E9=95=BF=E7=9A=84=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=
=88=97=E4=B8=8A=E5=8A=A0=E4=B8=8A Sn<span class=3D"Apple-converte=
d-space">&nbsp;</span>=E5=B0=B1=E6=9E=84=E6=88=90=E4=BA=86=E4=BB=A5=
 Sn<span class=3D"Apple-converted-space">&nbsp;</span>=E4=B8=BA=E7=
=BB=93=E5=B0=BE=E7=9A=84=E6=9C=80=E9=95=BF=E9=80=92=E5=A2=9E=E5=AD=
=90=E5=BA=8F=E5=88=97=E3=80=82=E5=9B=A0=E6=AD=A4 dp[n] =3D max{ d=
p[i]+1 | Si<span class=3D"Apple-converted-space">&nbsp;</span>&lt=
; Sn<span class=3D"Apple-converted-space">&nbsp;</span>&amp;&amp;=
 i &lt; n} =E3=80=82</p><p>=E5=9B=A0=E4=B8=BA=E5=9C=A8=E6=B1=82 d=
p[n] =E6=97=B6=E5=8F=AF=E8=83=BD=E6=97=A0=E6=B3=95=E6=89=BE=E5=88=
=B0=E4=B8=80=E4=B8=AA=E6=BB=A1=E8=B6=B3=E6=9D=A1=E4=BB=B6=E7=9A=84=
=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=EF=BC=8C=E6=AD=A4=E6=
=97=B6 {Sn} =E5=B0=B1=E6=9E=84=E6=88=90=E4=BA=86=E9=80=92=E5=A2=9E=
=E5=AD=90=E5=BA=8F=E5=88=97=EF=BC=8C=E5=9B=A0=E6=AD=A4=E9=9C=80=E8=
=A6=81=E5=AF=B9=E5=89=8D=E9=9D=A2=E7=9A=84=E6=B1=82=E8=A7=A3=E6=96=
=B9=E7=A8=8B=E5=81=9A=E4=BF=AE=E6=94=B9=EF=BC=8C=E4=BB=A4 dp[n] =E6=
=9C=80=E5=B0=8F=E4=B8=BA 1=EF=BC=8C=E5=8D=B3=EF=BC=9A</p><p><a hr=
ef=3D"https://camo.githubusercontent.com/f68499d37f0d7f478cbeabf4=
020dffe839f754a3/687474703a2f2f6c617465782e636f6465636f67732e636f=
6d2f6769662e6c617465783f25354325354364702535426e2535443d6d6178253=
742312c6470253542692535442b31253743535f69253343535f6e262669253343=
6e253744" target=3D"_blank"><img src=3D"0.437174573907366.png" al=
t=3D""></a></p><p>=E5=AF=B9=E4=BA=8E=E4=B8=80=E4=B8=AA=E9=95=BF=E5=
=BA=A6=E4=B8=BA N =E7=9A=84=E5=BA=8F=E5=88=97=EF=BC=8C=E6=9C=80=E9=
=95=BF=E5=AD=90=E5=BA=8F=E5=88=97=E5=B9=B6=E4=B8=8D=E4=B8=80=E5=AE=
=9A=E4=BC=9A=E4=BB=A5 SN<span class=3D"Apple-converted-space">&nb=
sp;</span>=E4=B8=BA=E7=BB=93=E5=B0=BE=EF=BC=8C=E5=9B=A0=E6=AD=A4=20=
dp[N] =E4=B8=8D=E6=98=AF=E5=BA=8F=E5=88=97=E7=9A=84=E6=9C=80=E9=95=
=BF=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=E7=9A=84=E9=95=BF=
=E5=BA=A6=EF=BC=8C=E9=9C=80=E8=A6=81=E9=81=8D=E5=8E=86 dp =E6=95=B0=
=E7=BB=84=E6=89=BE=E5=87=BA=E6=9C=80=E5=A4=A7=E5=80=BC=E6=89=8D=E6=
=98=AF=E6=89=80=E8=A6=81=E7=9A=84=E7=BB=93=E6=9E=9C=EF=BC=8C=E5=8D=
=B3 max{ dp[i] | 1 &lt;=3D i &lt;=3D N} =E5=8D=B3=E4=B8=BA=E6=89=80=
=E6=B1=82=E3=80=82</p><p>=E6=9C=80=E9=95=BF=E9=80=92=E5=A2=9E=E5=AD=
=90=E5=BA=8F=E5=88=97</p><p><a href=3D"https://leetcode.com/probl=
ems/longest-increasing-subsequence/description/" target=3D"_blank=
">Leetcode : 300. Longest Increasing Subsequence (Medium)</a></p>=
<div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> lengthOfLIS(=
<span class=3D"pl-k">int</span>[] nums) {=0A    <span class=3D"pl=
-k">int</span> n <span class=3D"pl-k">=3D</span> nums<span class=3D=
"pl-k">.</span>length;=0A    <span class=3D"pl-k">int</span>[] dp=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span>=20=
<span class=3D"pl-smi">int</span>[n];=0A    <span class=3D"pl-k">=
for</span>(<span class=3D"pl-k">int</span> i <span class=3D"pl-k"=
>=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k=
">&lt;</span> n; i<span class=3D"pl-k">++</span>){=0A        <spa=
n class=3D"pl-k">int</span> max <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-c1">1</span>;=0A        <span class=3D"pl-k">for=
</span>(<span class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-c1">0</span>; j <span class=3D"pl-k">&l=
t;</span> i; j<span class=3D"pl-k">++</span>){=0A            <spa=
n class=3D"pl-k">if</span>(nums[i] <span class=3D"pl-k">&gt;</spa=
n> nums[j]) max <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-smi">Math</span><span class=3D"pl-k">.</span>max(max, dp[j] <spa=
n class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>);=0A   =20=
    }=0A        dp[i] <span class=3D"pl-k">=3D</span> max;=0A   =20=
}=0A    <span class=3D"pl-k">int</span> ret <span class=3D"pl-k">=
=3D</span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"p=
l-k">for</span>(<span class=3D"pl-k">int</span> i <span class=3D"=
pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D=
"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span>){=0A      =20=
 ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Math<=
/span><span class=3D"pl-k">.</span>max(ret, dp[i]);=0A    }=0A  =20=
 <span class=3D"pl-k">return</span> ret;=0A}</pre></div><p>=E4=BB=
=A5=E4=B8=8A=E8=A7=A3=E6=B3=95=E7=9A=84=E6=97=B6=E9=97=B4=E5=A4=8D=
=E6=9D=82=E5=BA=A6=E4=B8=BA O(n2) =EF=BC=8C=E5=8F=AF=E4=BB=A5=E4=BD=
=BF=E7=94=A8=E4=BA=8C=E5=88=86=E6=9F=A5=E6=89=BE=E4=BD=BF=E5=BE=97=
=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E9=99=8D=E4=BD=8E=E4=
=B8=BA O(nlogn)=E3=80=82=E5=AE=9A=E4=B9=89=E4=B8=80=E4=B8=AA tail=
s =E6=95=B0=E7=BB=84=EF=BC=8C=E5=85=B6=E4=B8=AD tails[i] =E5=AD=98=
=E5=82=A8=E9=95=BF=E5=BA=A6=E4=B8=BA i + 1 =E7=9A=84=E6=9C=80=E9=95=
=BF=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=E7=9A=84=E6=9C=80=
=E5=90=8E=E4=B8=80=E4=B8=AA=E5=85=83=E7=B4=A0=EF=BC=8C=E4=BE=8B=E5=
=A6=82=E5=AF=B9=E4=BA=8E=E6=95=B0=E7=BB=84 [4,5,6,3]=EF=BC=8C=E6=9C=
=89</p><div class=3D"highlight highlight-text-html-basic"><pre>le=
n =3D 1  :      [4], [5], [6], [3]  =3D&gt; tails[0] =3D 3=0Alen=20=
=3D 2  :      [4, 5], [5, 6]      =3D&gt; tails[1] =3D 5=0Alen =3D=
 3  :      [4, 5, 6]            =3D&gt; tails[2] =3D 6</pre></div=
><p>=E5=AF=B9=E4=BA=8E=E4=B8=80=E4=B8=AA=E5=85=83=E7=B4=A0 x=EF=BC=
=8C=E5=A6=82=E6=9E=9C=E5=AE=83=E5=A4=A7=E4=BA=8E tails =E6=95=B0=E7=
=BB=84=E6=89=80=E6=9C=89=E7=9A=84=E5=80=BC=EF=BC=8C=E9=82=A3=E4=B9=
=88=E6=8A=8A=E5=AE=83=E6=B7=BB=E5=8A=A0=E5=88=B0 tails =E5=90=8E=E9=
=9D=A2=EF=BC=9B=E5=A6=82=E6=9E=9C tails[i-1] &lt; x &lt;=3D tails=
[i]=EF=BC=8C=E9=82=A3=E4=B9=88=E6=9B=B4=E6=96=B0 tails[i] =3D x =E3=
=80=82</p><p>=E5=8F=AF=E4=BB=A5=E7=9C=8B=E5=87=BA tails =E6=95=B0=
=E7=BB=84=E4=BF=9D=E6=8C=81=E6=9C=89=E5=BA=8F=EF=BC=8C=E5=9B=A0=E6=
=AD=A4=E5=9C=A8=E6=9F=A5=E6=89=BE Si<span class=3D"Apple-converte=
d-space">&nbsp;</span>=E4=BD=8D=E4=BA=8E tails =E6=95=B0=E7=BB=84=
=E7=9A=84=E4=BD=8D=E7=BD=AE=E6=97=B6=E5=B0=B1=E5=8F=AF=E4=BB=A5=E4=
=BD=BF=E7=94=A8=E4=BA=8C=E5=88=86=E6=9F=A5=E6=89=BE=E3=80=82</p><=
div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> lengthOfLIS(=
<span class=3D"pl-k">int</span>[] nums) {=0A    <span class=3D"pl=
-k">int</span> n <span class=3D"pl-k">=3D</span> nums<span class=3D=
"pl-k">.</span>length;=0A    <span class=3D"pl-k">int</span>[] ta=
ils <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</spa=
n> <span class=3D"pl-smi">int</span>[n];=0A    <span class=3D"pl-=
k">int</span> size <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">0</span>;=0A    <span class=3D"pl-k">for</span>(<span cla=
ss=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> n; i<s=
pan class=3D"pl-k">++</span>){=0A        <span class=3D"pl-k">int=
</span> idx <span class=3D"pl-k">=3D</span> binarySearch(tails, <=
span class=3D"pl-c1">0</span>, size, nums[i]);=0A        tails[id=
x] <span class=3D"pl-k">=3D</span> nums[i];=0A        <span class=
=3D"pl-k">if</span>(idx <span class=3D"pl-k">=3D=3D</span> size)=20=
size<span class=3D"pl-k">++</span>;=0A    }=0A    <span class=3D"=
pl-k">return</span> size;=0A}=0A=0A<span class=3D"pl-k">private</=
span> <span class=3D"pl-k">int</span> binarySearch(<span class=3D=
"pl-k">int</span>[] nums, <span class=3D"pl-k">int</span> sIdx, <=
span class=3D"pl-k">int</span> eIdx, <span class=3D"pl-k">int</sp=
an> key){=0A    <span class=3D"pl-k">while</span>(sIdx <span clas=
s=3D"pl-k">&lt;</span> eIdx){=0A        <span class=3D"pl-k">int<=
/span> mIdx <span class=3D"pl-k">=3D</span> sIdx <span class=3D"p=
l-k">+</span> (eIdx <span class=3D"pl-k">-</span> sIdx) <span cla=
ss=3D"pl-k">/</span> <span class=3D"pl-c1">2</span>;=0A        <s=
pan class=3D"pl-k">if</span>(nums[mIdx] <span class=3D"pl-k">=3D=3D=
</span> key) <span class=3D"pl-k">return</span> mIdx;=0A        <=
span class=3D"pl-k">else</span> <span class=3D"pl-k">if</span>(nu=
ms[mIdx] <span class=3D"pl-k">&gt;</span> key) eIdx <span class=3D=
"pl-k">=3D</span> mIdx;=0A        <span class=3D"pl-k">else</span=
> sIdx <span class=3D"pl-k">=3D</span> mIdx <span class=3D"pl-k">=
+</span> <span class=3D"pl-c1">1</span>;=0A    }=0A    <span clas=
s=3D"pl-k">return</span> sIdx;=0A}</pre></div><p>=E6=9C=80=E9=95=BF=
=E6=91=86=E5=8A=A8=E5=AD=90=E5=BA=8F=E5=88=97</p><p><a href=3D"ht=
tps://leetcode.com/problems/wiggle-subsequence/description/" targ=
et=3D"_blank">Leetcode : 376. Wiggle Subsequence (Medium)</a></p>=
<p>=E8=A6=81=E6=B1=82=EF=BC=9A=E4=BD=BF=E7=94=A8 O(n) =E6=97=B6=E9=
=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E6=B1=82=E8=A7=A3=E3=80=82</p><=
p>=E4=BD=BF=E7=94=A8=E4=B8=A4=E4=B8=AA=E7=8A=B6=E6=80=81 up =E5=92=
=8C down=E3=80=82</p><div class=3D"highlight highlight-source-jav=
a"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">i=
nt</span> wiggleMaxLength(<span class=3D"pl-k">int</span>[] nums)=
 {=0A    <span class=3D"pl-k">int</span> len <span class=3D"pl-k"=
>=3D</span> nums<span class=3D"pl-k">.</span>length;=0A    <span=20=
class=3D"pl-k">if</span> (len <span class=3D"pl-k">=3D=3D</span>=20=
<span class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span=
> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int<=
/span> up <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1=
</span>, down <span class=3D"pl-k">=3D</span> <span class=3D"pl-c=
1">1</span>;=0A    <span class=3D"pl-k">for</span> (<span class=3D=
"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">1</span>; i <span class=3D"pl-k">&lt;</span> len; i<span=20=
class=3D"pl-k">++</span>) {=0A        <span class=3D"pl-k">if</sp=
an> (nums[i] <span class=3D"pl-k">&gt;</span> nums[i <span class=3D=
"pl-k">-</span> <span class=3D"pl-c1">1</span>]) up <span class=3D=
"pl-k">=3D</span> down <span class=3D"pl-k">+</span> <span class=3D=
"pl-c1">1</span>;=0A        <span class=3D"pl-k">else</span> <spa=
n class=3D"pl-k">if</span> (nums[i] <span class=3D"pl-k">&lt;</sp=
an> nums[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1<=
/span>]) down <span class=3D"pl-k">=3D</span> up <span class=3D"p=
l-k">+</span> <span class=3D"pl-c1">1</span>;=0A    }=0A    <span=
 class=3D"pl-k">return</span> <span class=3D"pl-smi">Math</span><=
span class=3D"pl-k">.</span>max(up, down);=0A}</pre></div><h3>=E6=
=9C=80=E9=95=BF=E5=85=AC=E5=85=B1=E5=AD=90=E7=B3=BB=E5=88=97</h3>=
<p>=E5=AF=B9=E4=BA=8E=E4=B8=A4=E4=B8=AA=E5=AD=90=E5=BA=8F=E5=88=97=
 S1 =E5=92=8C S2=EF=BC=8C=E6=89=BE=E5=87=BA=E5=AE=83=E4=BB=AC=E6=9C=
=80=E9=95=BF=E7=9A=84=E5=85=AC=E5=85=B1=E5=AD=90=E5=BA=8F=E5=88=97=
=E3=80=82</p><p>=E5=AE=9A=E4=B9=89=E4=B8=80=E4=B8=AA=E4=BA=8C=E7=BB=
=B4=E6=95=B0=E7=BB=84 dp =E7=94=A8=E6=9D=A5=E5=AD=98=E5=82=A8=E6=9C=
=80=E9=95=BF=E5=85=AC=E5=85=B1=E5=AD=90=E5=BA=8F=E5=88=97=E7=9A=84=
=E9=95=BF=E5=BA=A6=EF=BC=8C=E5=85=B6=E4=B8=AD dp[i][j] =E8=A1=A8=E7=
=A4=BA S1 =E7=9A=84=E5=89=8D i =E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=8E=
 S2 =E7=9A=84=E5=89=8D j =E4=B8=AA=E5=AD=97=E7=AC=A6=E6=9C=80=E9=95=
=BF=E5=85=AC=E5=85=B1=E5=AD=90=E5=BA=8F=E5=88=97=E7=9A=84=E9=95=BF=
=E5=BA=A6=E3=80=82=E8=80=83=E8=99=91 S1i<span class=3D"Apple-conv=
erted-space">&nbsp;</span>=E4=B8=8E S2j<span class=3D"Apple-conve=
rted-space">&nbsp;</span>=E5=80=BC=E6=98=AF=E5=90=A6=E7=9B=B8=E7=AD=
=89=EF=BC=8C=E5=88=86=E4=B8=BA=E4=B8=A4=E7=A7=8D=E6=83=85=E5=86=B5=
=EF=BC=9A</p><p>=E2=91=A0 =E5=BD=93 S1i=3D=3DS2j<span class=3D"Ap=
ple-converted-space">&nbsp;</span>=E6=97=B6=EF=BC=8C=E9=82=A3=E4=B9=
=88=E5=B0=B1=E8=83=BD=E5=9C=A8 S1 =E7=9A=84=E5=89=8D i-1 =E4=B8=AA=
=E5=AD=97=E7=AC=A6=E4=B8=8E S2 =E7=9A=84=E5=89=8D j-1 =E4=B8=AA=E5=
=AD=97=E7=AC=A6=E6=9C=80=E9=95=BF=E5=85=AC=E5=85=B1=E5=AD=90=E5=BA=
=8F=E5=88=97=E7=9A=84=E5=9F=BA=E7=A1=80=E4=B8=8A=E5=86=8D=E5=8A=A0=
=E4=B8=8A S1i<span class=3D"Apple-converted-space">&nbsp;</span>=E8=
=BF=99=E4=B8=AA=E5=80=BC=EF=BC=8C=E6=9C=80=E9=95=BF=E5=85=AC=E5=85=
=B1=E5=AD=90=E5=BA=8F=E5=88=97=E9=95=BF=E5=BA=A6=E5=8A=A0 1 =EF=BC=
=8C=E5=8D=B3 dp[i][j] =3D dp[i-1][j-1] + 1=E3=80=82</p><p>=E2=91=A1=
 =E5=BD=93 S1i<span class=3D"Apple-converted-space">&nbsp;</span>=
!=3D S2j<span class=3D"Apple-converted-space">&nbsp;</span>=E6=97=
=B6=EF=BC=8C=E6=AD=A4=E6=97=B6=E6=9C=80=E9=95=BF=E5=85=AC=E5=85=B1=
=E5=AD=90=E5=BA=8F=E5=88=97=E4=B8=BA S1 =E7=9A=84=E5=89=8D i-1 =E4=
=B8=AA=E5=AD=97=E7=AC=A6=E5=92=8C S2 =E7=9A=84=E5=89=8D j =E4=B8=AA=
=E5=AD=97=E7=AC=A6=E6=9C=80=E9=95=BF=E5=85=AC=E5=85=B1=E5=AD=90=E5=
=BA=8F=E5=88=97=EF=BC=8C=E4=B8=8E S1 =E7=9A=84=E5=89=8D i =E4=B8=AA=
=E5=AD=97=E7=AC=A6=E5=92=8C S2 =E7=9A=84=E5=89=8D j-1 =E4=B8=AA=E5=
=AD=97=E7=AC=A6=E6=9C=80=E9=95=BF=E5=85=AC=E5=85=B1=E5=AD=90=E5=BA=
=8F=E5=88=97=EF=BC=8C=E5=AE=83=E4=BB=AC=E7=9A=84=E6=9C=80=E5=A4=A7=
=E8=80=85=EF=BC=8C=E5=8D=B3 dp[i][j] =3D max{ dp[i-1][j], dp[i][j=
-1] }=E3=80=82</p><p>=E7=BB=BC=E4=B8=8A=EF=BC=8C=E6=9C=80=E9=95=BF=
=E5=85=AC=E5=85=B1=E5=AD=90=E7=B3=BB=E5=88=97=E7=9A=84=E7=8A=B6=E6=
=80=81=E8=BD=AC=E7=A7=BB=E6=96=B9=E7=A8=8B=E4=B8=BA=EF=BC=9A</p><=
p>![](<a href=3D"http://latex.codecogs.com/gif.latex?%5C%5C%5C%5C=
" target=3D"_blank">http://latex.codecogs.com/gif.latex?\\\\</a>d=
p[i][j]=3D\left{</p><div class=3D"MathJax_Display"><span class=3D=
"MathJax" id=3D"MathJax-Element-1-Frame" data-mathml=3D"<math xml=
ns=3D&quot;http://www.w3.org/1998/Math/MathML&quot; display=3D&qu=
ot;block&quot;><mtable columnalign=3D&quot;right center left&quot=
; rowspacing=3D&quot;4pt&quot; columnspacing=3D&quot;1em&quot;><m=
tr><mtd><mi>d</mi><mi>p</mi><mo stretchy=3D&quot;false&quot;>[</m=
o><mi>i</mi><mo>&amp;#x2212;</mo><mn>1</mn><mo stretchy=3D&quot;f=
alse&quot;>]</mo><mo stretchy=3D&quot;false&quot;>[</mo><mi>j</mi=
><mo>&amp;#x2212;</mo><mn>1</mn><mo stretchy=3D&quot;false&quot;>=
]</mo></mtd><mtd /><mtd><mrow class=3D&quot;MJX-TeXAtom-ORD&quot;=
><mi>S</mi><msub><mn>1</mn><mi>i</mi></msub><mo>=3D=3D</mo><mi>S<=
/mi><msub><mn>2</mn><mi>j</mi></msub></mrow><mo movablelimits=3D&=
quot;true&quot; form=3D&quot;prefix&quot;>max</mo><mo stretchy=3D=
&quot;false&quot;>(</mo><mi>d</mi><mi>p</mi><mo stretchy=3D&quot;=
false&quot;>[</mo><mi>i</mi><mo>&amp;#x2212;</mo><mn>1</mn><mo st=
retchy=3D&quot;false&quot;>]</mo><mo stretchy=3D&quot;false&quot;=
>[</mo><mi>j</mi><mo stretchy=3D&quot;false&quot;>]</mo><mo>,</mo=
><mi>d</mi><mi>p</mi><mo stretchy=3D&quot;false&quot;>[</mo><mi>i=
</mi><mo stretchy=3D&quot;false&quot;>]</mo><mo stretchy=3D&quot;=
false&quot;>[</mo><mi>j</mi><mo>&amp;#x2212;</mo><mn>1</mn><mo st=
retchy=3D&quot;false&quot;>]</mo><mo stretchy=3D&quot;false&quot;=
>)</mo></mtd><mtd /><mtd><mrow class=3D&quot;MJX-TeXAtom-ORD&quot=
;><mi>S</mi><msub><mn>1</mn><mi>i</mi></msub><mo>&amp;lt;&amp;gt;=
</mo><mi>S</mi><msub><mn>2</mn><mi>j</mi></msub></mrow></mtd></mt=
r></mtable></math>" style=3D"box-sizing: border-box; outline: 0px=
; display: inline; text-indent: 0px; text-align: center; word-wra=
p: break-word; float: none; direction: ltr; max-width: none; max-=
height: none; min-width: 0px; min-height: 0px; border: 0px; paddi=
ng: 0px; margin: 0px; position: relative;"><span class=3D"mtd" id=
=3D"MathJax-Span-4"><span class=3D"mrow" id=3D"MathJax-Span-5"><s=
pan class=3D"mi" id=3D"MathJax-Span-6">d</span><span class=3D"mi"=
 id=3D"MathJax-Span-7">p</span><span class=3D"mo" id=3D"MathJax-S=
pan-8">[</span><span class=3D"mi" id=3D"MathJax-Span-9">i</span><=
span class=3D"mo" id=3D"MathJax-Span-10">=E2=88=92</span><span cl=
ass=3D"mn" id=3D"MathJax-Span-11">1</span><span class=3D"mo" id=3D=
"MathJax-Span-12">]</span><span class=3D"mo" id=3D"MathJax-Span-1=
3">[</span><span class=3D"mi" id=3D"MathJax-Span-14">j</span><spa=
n class=3D"mo" id=3D"MathJax-Span-15">=E2=88=92</span><span class=
=3D"mn" id=3D"MathJax-Span-16">1</span><span class=3D"mo" id=3D"M=
athJax-Span-17">]</span></span></span><span class=3D"mtd" id=3D"M=
athJax-Span-20"><span class=3D"mrow" id=3D"MathJax-Span-21"><span=
 class=3D"texatom" id=3D"MathJax-Span-22"><span class=3D"mrow" id=
=3D"MathJax-Span-23"><span class=3D"mi" id=3D"MathJax-Span-24">S<=
/span><span class=3D"msubsup" id=3D"MathJax-Span-25"><span class=3D=
"mn" id=3D"MathJax-Span-26">1</span><span class=3D"mi" id=3D"Math=
Jax-Span-27">i</span></span><span class=3D"mo" id=3D"MathJax-Span=
-28">=3D=3D</span><span class=3D"mi" id=3D"MathJax-Span-29">S</sp=
an><span class=3D"msubsup" id=3D"MathJax-Span-30"><span class=3D"=
mn" id=3D"MathJax-Span-31">2</span><span class=3D"mi" id=3D"MathJ=
ax-Span-32">j</span></span></span></span><span class=3D"mo" id=3D=
"MathJax-Span-33">max</span><span class=3D"mo" id=3D"MathJax-Span=
-34">(</span><span class=3D"mi" id=3D"MathJax-Span-35">d</span><s=
pan class=3D"mi" id=3D"MathJax-Span-36">p</span><span class=3D"mo=
" id=3D"MathJax-Span-37">[</span><span class=3D"mi" id=3D"MathJax=
-Span-38">i</span><span class=3D"mo" id=3D"MathJax-Span-39">=E2=88=
=92</span><span class=3D"mn" id=3D"MathJax-Span-40">1</span><span=
 class=3D"mo" id=3D"MathJax-Span-41">]</span><span class=3D"mo" i=
d=3D"MathJax-Span-42">[</span><span class=3D"mi" id=3D"MathJax-Sp=
an-43">j</span><span class=3D"mo" id=3D"MathJax-Span-44">]</span>=
<span class=3D"mo" id=3D"MathJax-Span-45">,</span><span class=3D"=
mi" id=3D"MathJax-Span-46">d</span><span class=3D"mi" id=3D"MathJ=
ax-Span-47">p</span><span class=3D"mo" id=3D"MathJax-Span-48">[</=
span><span class=3D"mi" id=3D"MathJax-Span-49">i</span><span clas=
s=3D"mo" id=3D"MathJax-Span-50">]</span><span class=3D"mo" id=3D"=
MathJax-Span-51">[</span><span class=3D"mi" id=3D"MathJax-Span-52=
">j</span><span class=3D"mo" id=3D"MathJax-Span-53">=E2=88=92</sp=
an><span class=3D"mn" id=3D"MathJax-Span-54">1</span><span class=3D=
"mo" id=3D"MathJax-Span-55">]</span><span class=3D"mo" id=3D"Math=
Jax-Span-56">)</span></span></span><span class=3D"mrow" id=3D"Mat=
hJax-Span-62"><span class=3D"mi" id=3D"MathJax-Span-63">S</span><=
span class=3D"msubsup" id=3D"MathJax-Span-64"><span class=3D"mn"=20=
id=3D"MathJax-Span-65">1</span><span class=3D"mi" id=3D"MathJax-S=
pan-66">i</span></span><span class=3D"mo" id=3D"MathJax-Span-67">=
&lt;&gt;</span><span class=3D"mi" id=3D"MathJax-Span-68">S</span>=
<span class=3D"msubsup" id=3D"MathJax-Span-69"><span class=3D"mn"=
 id=3D"MathJax-Span-70">2</span><span class=3D"mi" id=3D"MathJax-=
Span-71">j</span></span></span><span class=3D"MJX_Assistive_MathM=
L MJX_Assistive_MathML_Block"><math xmlns=3D"http://www.w3.org/19=
98/Math/MathML" display=3D"block"><mtable columnalign=3D"right ce=
nter left" rowspacing=3D"4pt" columnspacing=3D"1em"><mtr><mtd><mi=
>d</mi><mi>p</mi><mo stretchy=3D"false">[</mo><mi>i</mi><mo>=E2=88=
=92</mo><mn>1</mn><mo stretchy=3D"false">]</mo><mo stretchy=3D"fa=
lse">[</mo><mi>j</mi><mo>=E2=88=92</mo><mn>1</mn><mo stretchy=3D"=
false">]</mo></mtd><mtd><mrow class=3D"MJX-TeXAtom-ORD"><mi>S</mi=
><msub><mn>1</mn><mi>i</mi></msub><mo>=3D=3D</mo><mi>S</mi><msub>=
<mn>2</mn><mi>j</mi></msub></mrow><mo movablelimits=3D"true" form=
=3D"prefix">max</mo><mo stretchy=3D"false">(</mo><mi>d</mi><mi>p<=
/mi><mo stretchy=3D"false">[</mo><mi>i</mi><mo>=E2=88=92</mo><mn>=
1</mn><mo stretchy=3D"false">]</mo><mo stretchy=3D"false">[</mo><=
mi>j</mi><mo stretchy=3D"false">]</mo><mo>,</mo><mi>d</mi><mi>p</=
mi><mo stretchy=3D"false">[</mo><mi>i</mi><mo stretchy=3D"false">=
]</mo><mo stretchy=3D"false">[</mo><mi>j</mi><mo>=E2=88=92</mo><m=
n>1</mn><mo stretchy=3D"false">]</mo><mo stretchy=3D"false">)</mo=
></mtd><mtd><mrow class=3D"MJX-TeXAtom-ORD"><mi>S</mi><msub><mn>1=
</mn><mi>i</mi></msub><mo>&lt;&gt;</mo><mi>S</mi><msub><mn>2</mn>=
<mi>j</mi></msub></mrow></mtd></mtr></mtable></math></span></span=
></div>\right.)<p><a href=3D"https://github.com/CyC2018/Interview=
Notes/blob/master/pics/1dc481cc-99f6-4fa8-8f68-fbd563995bf5.png"=20=
target=3D"_blank"><img src=3D"D:\=E6=96=87=E6=A1=A3\My Knowledge\=
temp\969fb8f2-eb58-4891-86ea-51bce0e90052\128\index_files\0.41287=
80471898681.png" alt=3D""></a></p><p>=E5=AF=B9=E4=BA=8E=E9=95=BF=E5=
=BA=A6=E4=B8=BA N =E7=9A=84=E5=BA=8F=E5=88=97 S1<span class=3D"Ap=
ple-converted-space">&nbsp;</span>=E5=92=8C =E9=95=BF=E5=BA=A6=E4=
=B8=BA M =E7=9A=84=E5=BA=8F=E5=88=97 S2=EF=BC=8Cdp[N][M] =E5=B0=B1=
=E6=98=AF=E5=BA=8F=E5=88=97 S1<span class=3D"Apple-converted-spac=
e">&nbsp;</span>=E5=92=8C=E5=BA=8F=E5=88=97 S2<span class=3D"Appl=
e-converted-space">&nbsp;</span>=E7=9A=84=E6=9C=80=E9=95=BF=E5=85=
=AC=E5=85=B1=E5=AD=90=E5=BA=8F=E5=88=97=E9=95=BF=E5=BA=A6=E3=80=82=
</p><p>=E4=B8=8E=E6=9C=80=E9=95=BF=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=
=8F=E5=88=97=E7=9B=B8=E6=AF=94=EF=BC=8C=E6=9C=80=E9=95=BF=E5=85=AC=
=E5=85=B1=E5=AD=90=E5=BA=8F=E5=88=97=E6=9C=89=E4=BB=A5=E4=B8=8B=E4=
=B8=8D=E5=90=8C=E7=82=B9=EF=BC=9A</p><p>=E2=91=A0 =E9=92=88=E5=AF=
=B9=E7=9A=84=E6=98=AF=E4=B8=A4=E4=B8=AA=E5=BA=8F=E5=88=97=EF=BC=8C=
=E6=B1=82=E5=AE=83=E4=BB=AC=E7=9A=84=E6=9C=80=E9=95=BF=E5=85=AC=E5=
=85=B1=E5=AD=90=E5=BA=8F=E5=88=97=E3=80=82=E2=91=A1 =E5=9C=A8=E6=9C=
=80=E9=95=BF=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=E4=B8=AD=
=EF=BC=8Cdp[i] =E8=A1=A8=E7=A4=BA=E4=BB=A5 Si<span class=3D"Apple=
-converted-space">&nbsp;</span>=E4=B8=BA=E7=BB=93=E5=B0=BE=E7=9A=84=
=E6=9C=80=E9=95=BF=E9=80=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=E9=
=95=BF=E5=BA=A6=EF=BC=8C=E5=AD=90=E5=BA=8F=E5=88=97=E5=BF=85=E9=A1=
=BB=E5=8C=85=E5=90=AB Si<span class=3D"Apple-converted-space">&nb=
sp;</span>=EF=BC=9B=E5=9C=A8=E6=9C=80=E9=95=BF=E5=85=AC=E5=85=B1=E5=
=AD=90=E5=BA=8F=E5=88=97=E4=B8=AD=EF=BC=8Cdp[i][j] =E8=A1=A8=E7=A4=
=BA S1 =E4=B8=AD=E5=89=8D i =E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=8E=20=
S2 =E4=B8=AD=E5=89=8D j =E4=B8=AA=E5=AD=97=E7=AC=A6=E7=9A=84=E6=9C=
=80=E9=95=BF=E5=85=AC=E5=85=B1=E5=AD=90=E5=BA=8F=E5=88=97=E9=95=BF=
=E5=BA=A6=EF=BC=8C=E4=B8=8D=E4=B8=80=E5=AE=9A=E5=8C=85=E5=90=AB S=
1i<span class=3D"Apple-converted-space">&nbsp;</span>=E5=92=8C S2=
j<span class=3D"Apple-converted-space">&nbsp;</span>=E3=80=82=E2=91=
=A2 =E7=94=B1=E4=BA=8E 2 =EF=BC=8C=E5=9C=A8=E6=B1=82=E6=9C=80=E7=BB=
=88=E8=A7=A3=E6=97=B6=EF=BC=8C=E6=9C=80=E9=95=BF=E5=85=AC=E5=85=B1=
=E5=AD=90=E5=BA=8F=E5=88=97=E4=B8=AD dp[N][M] =E5=B0=B1=E6=98=AF=E6=
=9C=80=E7=BB=88=E8=A7=A3=EF=BC=8C=E8=80=8C=E6=9C=80=E9=95=BF=E9=80=
=92=E5=A2=9E=E5=AD=90=E5=BA=8F=E5=88=97=E4=B8=AD dp[N] =E4=B8=8D=E6=
=98=AF=E6=9C=80=E7=BB=88=E8=A7=A3=EF=BC=8C=E5=9B=A0=E4=B8=BA=E4=BB=
=A5 SN<span class=3D"Apple-converted-space">&nbsp;</span>=E4=B8=BA=
=E7=BB=93=E5=B0=BE=E7=9A=84=E6=9C=80=E9=95=BF=E9=80=92=E5=A2=9E=E5=
=AD=90=E5=BA=8F=E5=88=97=E4=B8=8D=E4=B8=80=E5=AE=9A=E6=98=AF=E6=95=
=B4=E4=B8=AA=E5=BA=8F=E5=88=97=E6=9C=80=E9=95=BF=E9=80=92=E5=A2=9E=
=E5=AD=90=E5=BA=8F=E5=88=97=EF=BC=8C=E9=9C=80=E8=A6=81=E9=81=8D=E5=
=8E=86=E4=B8=80=E9=81=8D dp =E6=95=B0=E7=BB=84=E6=89=BE=E5=88=B0=E6=
=9C=80=E5=A4=A7=E8=80=85=E3=80=82</p><div class=3D"highlight high=
light-source-java"><pre><span class=3D"pl-k">public</span> <span=20=
class=3D"pl-k">int</span> lengthOfLCS(<span class=3D"pl-k">int</s=
pan>[] nums1, <span class=3D"pl-k">int</span>[] nums2) {=0A    <s=
pan class=3D"pl-k">int</span> n1 <span class=3D"pl-k">=3D</span>=20=
nums1<span class=3D"pl-k">.</span>length, n2 <span class=3D"pl-k"=
>=3D</span> nums2<span class=3D"pl-k">.</span>length;=0A    <span=
 class=3D"pl-k">int</span>[][] dp <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-k">new</span> <span class=3D"pl-smi">int</span=
>[n1 <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>=
][n2 <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>=
];=0A    <span class=3D"pl-k">for</span> (<span class=3D"pl-k">in=
t</span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">=
1</span>; i <span class=3D"pl-k">&lt;=3D</span> n1; i<span class=3D=
"pl-k">++</span>) {=0A        <span class=3D"pl-k">for</span> (<s=
pan class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-c1">1</span>; j <span class=3D"pl-k">&lt;=3D</sp=
an> n2; j<span class=3D"pl-k">++</span>) {=0A            <span cl=
ass=3D"pl-k">if</span> (nums1[i <span class=3D"pl-k">-</span> <sp=
an class=3D"pl-c1">1</span>] <span class=3D"pl-k">=3D=3D</span> n=
ums2[j <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</spa=
n>]) dp[i][j] <span class=3D"pl-k">=3D</span> dp[i <span class=3D=
"pl-k">-</span> <span class=3D"pl-c1">1</span>][j <span class=3D"=
pl-k">-</span> <span class=3D"pl-c1">1</span>] <span class=3D"pl-=
k">+</span> <span class=3D"pl-c1">1</span>;=0A            <span c=
lass=3D"pl-k">else</span> dp[i][j] <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>=
max(dp[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</s=
pan>][j], dp[i][j <span class=3D"pl-k">-</span> <span class=3D"pl=
-c1">1</span>]);=0A        }=0A    }=0A    <span class=3D"pl-k">r=
eturn</span> dp[n1][n2];=0A}</pre></div><h3>0-1 =E8=83=8C=E5=8C=85=
</h3><p>=E6=9C=89=E4=B8=80=E4=B8=AA=E5=AE=B9=E9=87=8F=E4=B8=BA N=20=
=E7=9A=84=E8=83=8C=E5=8C=85=EF=BC=8C=E8=A6=81=E7=94=A8=E8=BF=99=E4=
=B8=AA=E8=83=8C=E5=8C=85=E8=A3=85=E4=B8=8B=E7=89=A9=E5=93=81=E7=9A=
=84=E4=BB=B7=E5=80=BC=E6=9C=80=E5=A4=A7=EF=BC=8C=E8=BF=99=E4=BA=9B=
=E7=89=A9=E5=93=81=E6=9C=89=E4=B8=A4=E4=B8=AA=E5=B1=9E=E6=80=A7=EF=
=BC=9A=E4=BD=93=E7=A7=AF w =E5=92=8C=E4=BB=B7=E5=80=BC v=E3=80=82=
</p><p>=E5=AE=9A=E4=B9=89=E4=B8=80=E4=B8=AA=E4=BA=8C=E7=BB=B4=E6=95=
=B0=E7=BB=84 dp =E5=AD=98=E5=82=A8=E6=9C=80=E5=A4=A7=E4=BB=B7=E5=80=
=BC=EF=BC=8C=E5=85=B6=E4=B8=AD dp[i][j] =E8=A1=A8=E7=A4=BA=E4=BD=93=
=E7=A7=AF=E4=B8=8D=E8=B6=85=E8=BF=87 j =E7=9A=84=E6=83=85=E5=86=B5=
=E4=B8=8B=EF=BC=8C=E5=89=8D i =E4=BB=B6=E7=89=A9=E5=93=81=E8=83=BD=
=E8=BE=BE=E5=88=B0=E7=9A=84=E6=9C=80=E5=A4=A7=E4=BB=B7=E5=80=BC=E3=
=80=82=E8=AE=BE=E7=AC=AC i =E4=BB=B6=E7=89=A9=E5=93=81=E4=BD=93=E7=
=A7=AF=E4=B8=BA w=EF=BC=8C=E4=BB=B7=E5=80=BC=E4=B8=BA v=EF=BC=8C=E6=
=A0=B9=E6=8D=AE=E7=AC=AC i =E4=BB=B6=E7=89=A9=E5=93=81=E6=98=AF=E5=
=90=A6=E6=B7=BB=E5=8A=A0=E5=88=B0=E8=83=8C=E5=8C=85=E4=B8=AD=EF=BC=
=8C=E5=8F=AF=E4=BB=A5=E5=88=86=E4=B8=A4=E7=A7=8D=E6=83=85=E5=86=B5=
=E8=AE=A8=E8=AE=BA=EF=BC=9A</p><p>=E2=91=A0 =E7=AC=AC i =E4=BB=B6=
=E7=89=A9=E5=93=81=E6=B2=A1=E6=B7=BB=E5=8A=A0=E5=88=B0=E8=83=8C=E5=
=8C=85=EF=BC=8C=E6=80=BB=E4=BD=93=E7=A7=AF=E4=B8=8D=E8=B6=85=E8=BF=
=87 j =E7=9A=84=E5=89=8D i =E4=BB=B6=E7=89=A9=E5=93=81=E7=9A=84=E6=
=9C=80=E5=A4=A7=E4=BB=B7=E5=80=BC=E5=B0=B1=E6=98=AF=E6=80=BB=E4=BD=
=93=E7=A7=AF=E4=B8=8D=E8=B6=85=E8=BF=87 j =E7=9A=84=E5=89=8D i-1=20=
=E4=BB=B6=E7=89=A9=E5=93=81=E7=9A=84=E6=9C=80=E5=A4=A7=E4=BB=B7=E5=
=80=BC=EF=BC=8Cdp[i][j] =3D dp[i-1][j]=E3=80=82=E2=91=A1 =E7=AC=AC=
 i =E4=BB=B6=E7=89=A9=E5=93=81=E6=B7=BB=E5=8A=A0=E5=88=B0=E8=83=8C=
=E5=8C=85=E4=B8=AD=EF=BC=8Cdp[i][j] =3D dp[i-1][j-w] + v=E3=80=82=
</p><p>=E7=AC=AC i =E4=BB=B6=E7=89=A9=E5=93=81=E5=8F=AF=E6=B7=BB=E5=
=8A=A0=E4=B9=9F=E5=8F=AF=E4=BB=A5=E4=B8=8D=E6=B7=BB=E5=8A=A0=EF=BC=
=8C=E5=8F=96=E5=86=B3=E4=BA=8E=E5=93=AA=E7=A7=8D=E6=83=85=E5=86=B5=
=E4=B8=8B=E6=9C=80=E5=A4=A7=E4=BB=B7=E5=80=BC=E6=9B=B4=E5=A4=A7=E3=
=80=82</p><p>=E7=BB=BC=E4=B8=8A=EF=BC=8C0-1 =E8=83=8C=E5=8C=85=E7=
=9A=84=E7=8A=B6=E6=80=81=E8=BD=AC=E7=A7=BB=E6=96=B9=E7=A8=8B=E4=B8=
=BA=EF=BC=9A</p><p><a href=3D"https://camo.githubusercontent.com/=
7fbecf1cf9855697df9db7614c033417c9e092e2/687474703a2f2f6c61746578=
2e636f6465636f67732e636f6d2f6769662e6c617465783f25354325354364702=
53542692535442535426a2535443d6d6178286470253542692d31253544253542=
6a2535442c6470253542692d312535442535426a2d772535442b7629" target=3D=
"_blank"><img src=3D"0.11985372782417136.png" alt=3D""></a></p><d=
iv class=3D"highlight highlight-source-java"><pre><span class=3D"=
pl-k">public</span> <span class=3D"pl-k">int</span> knapsack(<spa=
n class=3D"pl-k">int</span> <span class=3D"pl-smi">W</span>, <spa=
n class=3D"pl-k">int</span> <span class=3D"pl-smi">N</span>, <spa=
n class=3D"pl-k">int</span>[] weights, <span class=3D"pl-k">int</=
span>[] values) {=0A    <span class=3D"pl-k">int</span>[][] dp <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <sp=
an class=3D"pl-smi">int</span>[<span class=3D"pl-smi">N</span>][<=
span class=3D"pl-smi">W</span>];=0A    <span class=3D"pl-k">for</=
span> (<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-smi">W</span> <span class=3D"pl-k">-</s=
pan> <span class=3D"pl-c1">1</span>; i <span class=3D"pl-k">&gt;=3D=
</span> <span class=3D"pl-c1">0</span>; i<span class=3D"pl-k">--<=
/span>) {=0A        dp[<span class=3D"pl-c1">0</span>][i] <span c=
lass=3D"pl-k">=3D</span> i <span class=3D"pl-k">&gt;</span> weigh=
ts[<span class=3D"pl-c1">0</span>] <span class=3D"pl-k">?</span>=20=
values[<span class=3D"pl-c1">0</span>] <span class=3D"pl-k">:</sp=
an> <span class=3D"pl-c1">0</span>;=0A    }=0A    <span class=3D"=
pl-k">for</span> (<span class=3D"pl-k">int</span> i <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">1</span>; i <span class=3D=
"pl-k">&lt;</span> <span class=3D"pl-smi">N</span>; i<span class=3D=
"pl-k">++</span>) {=0A        <span class=3D"pl-k">for</span> (<s=
pan class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-smi">W</span> <span class=3D"pl-k">-</span> <spa=
n class=3D"pl-c1">1</span>; j <span class=3D"pl-k">&gt;=3D</span>=
 weights[i]; j<span class=3D"pl-k">--</span>) {=0A            dp[=
i][j] <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Math=
</span><span class=3D"pl-k">.</span>max(dp[i <span class=3D"pl-k"=
>-</span> <span class=3D"pl-c1">1</span>][j], dp[i <span class=3D=
"pl-k">-</span> <span class=3D"pl-c1">1</span>][j <span class=3D"=
pl-k">-</span> weights[i]] <span class=3D"pl-k">+</span> values[i=
]);=0A        }=0A        <span class=3D"pl-k">for</span> (<span=20=
class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> weigh=
ts[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>=
] <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>; j=
 <span class=3D"pl-k">&gt;=3D</span> <span class=3D"pl-c1">0</spa=
n>; j<span class=3D"pl-k">--</span>) {=0A            dp[i][j] <sp=
an class=3D"pl-k">=3D</span> dp[i <span class=3D"pl-k">-</span> <=
span class=3D"pl-c1">1</span>][j];=0A        }=0A    }=0A    <spa=
n class=3D"pl-k">return</span> dp[<span class=3D"pl-smi">N</span>=
 <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>][<s=
pan class=3D"pl-smi">W</span> <span class=3D"pl-k">-</span> <span=
 class=3D"pl-c1">1</span>];=0A}</pre></div><p>=E7=A9=BA=E9=97=B4=E4=
=BC=98=E5=8C=96</p><p>=E5=9C=A8=E7=A8=8B=E5=BA=8F=E5=AE=9E=E7=8E=B0=
=E6=97=B6=E5=8F=AF=E4=BB=A5=E5=AF=B9 0-1 =E8=83=8C=E5=8C=85=E5=81=
=9A=E4=BC=98=E5=8C=96=E3=80=82=E8=A7=82=E5=AF=9F=E7=8A=B6=E6=80=81=
=E8=BD=AC=E7=A7=BB=E6=96=B9=E7=A8=8B=E5=8F=AF=E4=BB=A5=E7=9F=A5=E9=
=81=93=EF=BC=8C=E5=89=8D i =E4=BB=B6=E7=89=A9=E5=93=81=E7=9A=84=E7=
=8A=B6=E6=80=81=E4=BB=85=E7=94=B1=E5=89=8D i-1 =E4=BB=B6=E7=89=A9=
=E5=93=81=E7=9A=84=E7=8A=B6=E6=80=81=E6=9C=89=E5=85=B3=EF=BC=8C=E5=
=9B=A0=E6=AD=A4=E5=8F=AF=E4=BB=A5=E5=B0=86 dp =E5=AE=9A=E4=B9=89=E4=
=B8=BA=E4=B8=80=E7=BB=B4=E6=95=B0=E7=BB=84=EF=BC=8C=E5=85=B6=E4=B8=
=AD dp[j] =E6=97=A2=E5=8F=AF=E4=BB=A5=E8=A1=A8=E7=A4=BA dp[i-1][j=
] =E4=B9=9F=E5=8F=AF=E4=BB=A5=E8=A1=A8=E7=A4=BA dp[i][j]=E3=80=82=
=E6=AD=A4=E6=97=B6=EF=BC=8C</p><p><a href=3D"https://camo.githubu=
sercontent.com/9c649cbd974b3141efc507357c902e53e5c31475/687474703=
a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25=
354325354364702535426a2535443d6d61782864702535426a2535442c6470253=
5426a2d772535442b7629" target=3D"_blank"><img src=3D"0.5454202325=
938964.png" alt=3D""></a></p><p>=E5=9B=A0=E4=B8=BA dp[j-w] =E8=A1=
=A8=E7=A4=BA dp[i-1][j-w]=EF=BC=8C=E5=9B=A0=E6=AD=A4=E4=B8=8D=E8=83=
=BD=E5=85=88=E6=B1=82 dp[i][j-w] =E9=98=B2=E6=AD=A2=E5=B0=86 dp[i=
-1][j-w] =E8=A6=86=E7=9B=96=E3=80=82=E4=B9=9F=E5=B0=B1=E6=98=AF=E8=
=AF=B4=E8=A6=81=E5=85=88=E8=AE=A1=E7=AE=97 dp[i][j] =E5=86=8D=E8=AE=
=A1=E7=AE=97 dp[i][j-w]=EF=BC=8C=E5=9C=A8=E7=A8=8B=E5=BA=8F=E5=AE=
=9E=E7=8E=B0=E6=97=B6=E9=9C=80=E8=A6=81=E6=8C=89=E5=80=92=E5=BA=8F=
=E6=9D=A5=E5=BE=AA=E7=8E=AF=E6=B1=82=E8=A7=A3=E3=80=82</p><p>=E6=97=
=A0=E6=B3=95=E4=BD=BF=E7=94=A8=E8=B4=AA=E5=BF=83=E7=AE=97=E6=B3=95=
=E7=9A=84=E8=A7=A3=E9=87=8A</p><p>0-1<span class=3D"Apple-convert=
ed-space">&nbsp;</span><a href=3D"https://www.baidu.com/s?wd=3D%E=
8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98&amp;tn=3D24004469_oem_dg&amp;r=
sv_dl=3Dgh_pl_sl_csd" target=3D"_blank">=E8=83=8C=E5=8C=85=E9=97=AE=
=E9=A2=98</a>=E6=97=A0=E6=B3=95=E4=BD=BF=E7=94=A8=E8=B4=AA=E5=BF=83=
=E7=AE=97=E6=B3=95=E6=9D=A5=E6=B1=82=E8=A7=A3=EF=BC=8C=E4=B9=9F=E5=
=B0=B1=E6=98=AF=E8=AF=B4=E4=B8=8D=E8=83=BD=E6=8C=89=E7=85=A7=E5=85=
=88=E6=B7=BB=E5=8A=A0=E6=80=A7=E4=BB=B7=E6=AF=94=E6=9C=80=E9=AB=98=
=E7=9A=84=E7=89=A9=E5=93=81=E6=9D=A5=E8=BE=BE=E5=88=B0=E6=9C=80=E4=
=BC=98=EF=BC=8C=E8=BF=99=E6=98=AF=E5=9B=A0=E4=B8=BA=E8=BF=99=E7=A7=
=8D=E6=96=B9=E5=BC=8F=E5=8F=AF=E8=83=BD=E9=80=A0=E6=88=90=E8=83=8C=
=E5=8C=85=E7=A9=BA=E9=97=B4=E7=9A=84=E6=B5=AA=E8=B4=B9=EF=BC=8C=E4=
=BB=8E=E8=80=8C=E6=97=A0=E6=B3=95=E8=BE=BE=E5=88=B0=E6=9C=80=E4=BC=
=98=E3=80=82=E8=80=83=E8=99=91=E4=B8=8B=E9=9D=A2=E7=9A=84=E7=89=A9=
=E5=93=81=E5=92=8C=E4=B8=80=E4=B8=AA=E5=AE=B9=E9=87=8F=E4=B8=BA 5=
 =E7=9A=84=E8=83=8C=E5=8C=85=EF=BC=8C=E5=A6=82=E6=9E=9C=E5=85=88=E6=
=B7=BB=E5=8A=A0=E7=89=A9=E5=93=81 0 =E5=86=8D=E6=B7=BB=E5=8A=A0=E7=
=89=A9=E5=93=81 1=EF=BC=8C=E9=82=A3=E4=B9=88=E5=8F=AA=E8=83=BD=E5=
=AD=98=E6=94=BE=E7=9A=84=E4=BB=B7=E5=80=BC=E4=B8=BA 16=EF=BC=8C=E6=
=B5=AA=E8=B4=B9=E4=BA=86=E5=A4=A7=E5=B0=8F=E4=B8=BA 2 =E7=9A=84=E7=
=A9=BA=E9=97=B4=E3=80=82=E6=9C=80=E4=BC=98=E7=9A=84=E6=96=B9=E5=BC=
=8F=E6=98=AF=E5=AD=98=E6=94=BE=E7=89=A9=E5=93=81 1 =E5=92=8C=E7=89=
=A9=E5=93=81 2=EF=BC=8C=E4=BB=B7=E5=80=BC=E4=B8=BA 22.</p><div cl=
ass=3D"wiz-table-container" style=3D"position: relative; padding:=
 0px;"><div class=3D"table-box wiz-table-body"><table style=3D"wi=
dth:962px;"><thead><tr><th>id</th><th>w</th><th>v</th><th>v/w</th=
></tr></thead><tbody><tr><td>0</td><td>1</td><td>6</td><td>6</td>=
</tr><tr><td>1</td><td>2</td><td>10</td><td>5</td></tr><tr><td>2<=
/td><td>3</td><td>12</td><td>4</td></tr></tbody></table></div></d=
iv><p>=E5=8F=98=E7=A7=8D</p><p>=E5=AE=8C=E5=85=A8=E8=83=8C=E5=8C=85=
=EF=BC=9A=E7=89=A9=E5=93=81=E5=8F=AF=E4=BB=A5=E6=97=A0=E9=99=90=E4=
=B8=AA=EF=BC=8C=E5=8F=AF=E4=BB=A5=E8=BD=AC=E6=8D=A2=E4=B8=BA 0-1=20=
=E8=83=8C=E5=8C=85=EF=BC=8C=E4=BB=A4=E6=AF=8F=E7=A7=8D=E7=89=A9=E5=
=93=81=E7=9A=84=E4=BD=93=E7=A7=AF=E5=92=8C=E4=BB=B7=E5=80=BC=E5=8F=
=98=E4=B8=BA 1/2/4... =E5=80=8D=E6=95=B0=EF=BC=8C=E6=8A=8A=E5=AE=83=
=E4=BB=AC=E9=83=BD=E5=BD=93=E6=88=90=E4=B8=80=E4=B8=AA=E6=96=B0=E7=
=89=A9=E5=93=81=EF=BC=8C=E7=84=B6=E5=90=8E=E4=B8=80=E7=A7=8D=E7=89=
=A9=E5=93=81=E5=8F=AA=E8=83=BD=E6=B7=BB=E5=8A=A0=E4=B8=80=E6=AC=A1=
=E3=80=82</p><p>=E5=A4=9A=E9=87=8D=E8=83=8C=E5=8C=85=EF=BC=9A=E7=89=
=A9=E5=93=81=E6=95=B0=E9=87=8F=E6=9C=89=E9=99=90=E5=88=B6=EF=BC=8C=
=E5=90=8C=E6=A0=B7=E5=8F=AF=E4=BB=A5=E8=BD=AC=E6=8D=A2=E4=B8=BA 0=
-1 =E8=83=8C=E5=8C=85=E3=80=82</p><p>=E5=A4=9A=E7=BB=B4=E8=B4=B9=E7=
=94=A8=E8=83=8C=E5=8C=85=EF=BC=9A=E7=89=A9=E5=93=81=E4=B8=8D=E4=BB=
=85=E6=9C=89=E9=87=8D=E9=87=8F=EF=BC=8C=E8=BF=98=E6=9C=89=E4=BD=93=
=E7=A7=AF=EF=BC=8C=E5=90=8C=E6=97=B6=E8=80=83=E8=99=91=E8=BF=99=E4=
=B8=A4=E7=A7=8D=E9=99=90=E5=88=B6=E3=80=82</p><p>=E5=85=B6=E5=AE=83=
=EF=BC=9A=E7=89=A9=E5=93=81=E4=B9=8B=E9=97=B4=E7=9B=B8=E4=BA=92=E7=
=BA=A6=E6=9D=9F=E6=88=96=E8=80=85=E4=BE=9D=E8=B5=96=E3=80=82</p><=
p>=E5=88=92=E5=88=86=E6=95=B0=E7=BB=84=E4=B8=BA=E5=92=8C=E7=9B=B8=
=E7=AD=89=E7=9A=84=E4=B8=A4=E9=83=A8=E5=88=86</p><p><a href=3D"ht=
tps://leetcode.com/problems/partition-equal-subset-sum/descriptio=
n/" target=3D"_blank">Leetcode : 416. Partition Equal Subset Sum=20=
(Medium)</a></p><p>=E5=8F=AF=E4=BB=A5=E7=9C=8B=E6=88=90=E4=B8=80=E4=
=B8=AA=E8=83=8C=E5=8C=85=E5=A4=A7=E5=B0=8F=E4=B8=BA sum/2 =E7=9A=84=
 0-1 =E8=83=8C=E5=8C=85=E9=97=AE=E9=A2=98=EF=BC=8C=E4=BD=86=E6=98=
=AF=E4=B9=9F=E6=9C=89=E4=B8=8D=E5=90=8C=E7=9A=84=E5=9C=B0=E6=96=B9=
=EF=BC=8C=E8=BF=99=E9=87=8C=E6=B2=A1=E6=9C=89=E4=BB=B7=E5=80=BC=E5=
=B1=9E=E6=80=A7=EF=BC=8C=E5=B9=B6=E4=B8=94=E8=83=8C=E5=8C=85=E5=BF=
=85=E9=A1=BB=E8=A2=AB=E5=A1=AB=E6=BB=A1=E3=80=82</p><p>=E4=BB=A5=E4=
=B8=8B=E5=AE=9E=E7=8E=B0=E4=BD=BF=E7=94=A8=E4=BA=86=E7=A9=BA=E9=97=
=B4=E4=BC=98=E5=8C=96=E3=80=82</p><div class=3D"highlight highlig=
ht-source-java"><pre><span class=3D"pl-k">public</span> <span cla=
ss=3D"pl-k">boolean</span> canPartition(<span class=3D"pl-k">int<=
/span>[] nums) {=0A    <span class=3D"pl-k">int</span> sum <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A    <=
span class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> n=
um <span class=3D"pl-k">:</span> nums) {=0A        sum <span clas=
s=3D"pl-k">+=3D</span> num;=0A    }=0A    <span class=3D"pl-k">if=
</span> (sum <span class=3D"pl-k">%</span> <span class=3D"pl-c1">=
2</span> <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">0=
</span>) {=0A        <span class=3D"pl-k">return</span> <span cla=
ss=3D"pl-c1">false</span>;=0A    }=0A    <span class=3D"pl-k">int=
</span> <span class=3D"pl-smi">W</span> <span class=3D"pl-k">=3D<=
/span> sum <span class=3D"pl-k">/</span> <span class=3D"pl-c1">2<=
/span>;=0A    <span class=3D"pl-k">boolean</span>[] dp <span clas=
s=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=
=3D"pl-smi">boolean</span>[<span class=3D"pl-smi">W</span> <span=20=
class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>];=0A    <s=
pan class=3D"pl-k">int</span> n <span class=3D"pl-k">=3D</span> n=
ums<span class=3D"pl-k">.</span>length;=0A    <span class=3D"pl-k=
">for</span>(<span class=3D"pl-k">int</span> i <span class=3D"pl-=
k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D"pl=
-k">&lt;=3D</span> <span class=3D"pl-smi">W</span>; i<span class=3D=
"pl-k">++</span>) {=0A        <span class=3D"pl-k">if</span>(nums=
[<span class=3D"pl-c1">0</span>] <span class=3D"pl-k">=3D=3D</spa=
n> i) dp[i] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1"=
>true</span>;=0A    }=0A    <span class=3D"pl-k">for</span>(<span=
 class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-c1">1</span>; i <span class=3D"pl-k">&lt;</span> n;=
 i<span class=3D"pl-k">++</span>) {=0A        <span class=3D"pl-k=
">for</span>(<span class=3D"pl-k">int</span> j <span class=3D"pl-=
k">=3D</span> <span class=3D"pl-smi">W</span>; j <span class=3D"p=
l-k">&gt;=3D</span> nums[i]; j<span class=3D"pl-k">--</span>) {=0A=
            dp[j] <span class=3D"pl-k">=3D</span> dp[j] <span cla=
ss=3D"pl-k">||</span> dp[j <span class=3D"pl-k">-</span> nums[i]]=
;=0A        }=0A    }=0A=0A    <span class=3D"pl-k">return</span>=
 dp[<span class=3D"pl-smi">W</span>];=0A}</pre></div><p>=E5=AD=97=
=E7=AC=A6=E4=B8=B2=E6=8C=89=E5=8D=95=E8=AF=8D=E5=88=97=E8=A1=A8=E5=
=88=86=E5=89=B2</p><p><a href=3D"https://leetcode.com/problems/wo=
rd-break/description/" target=3D"_blank">Leetcode : 139. Word Bre=
ak (Medium)</a></p><div class=3D"highlight highlight-text-html-ba=
sic"><pre>s =3D "leetcode",=0Adict =3D ["leet", "code"].=0AReturn=
 true because "leetcode" can be segmented as "leet code".</pre></=
div><div class=3D"highlight highlight-source-java"><pre><span cla=
ss=3D"pl-k">public</span> <span class=3D"pl-k">boolean</span> wor=
dBreak(<span class=3D"pl-smi">String</span> s, <span class=3D"pl-=
k">List&lt;<span class=3D"pl-smi">String</span>&gt;</span> wordDi=
ct) {=0A    <span class=3D"pl-k">int</span> n <span class=3D"pl-k=
">=3D</span> s<span class=3D"pl-k">.</span>length();=0A    <span=20=
class=3D"pl-k">boolean</span>[] dp <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">boolean<=
/span>[n <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</s=
pan>];=0A    dp[<span class=3D"pl-c1">0</span>] <span class=3D"pl=
-k">=3D</span> <span class=3D"pl-c1">true</span>;=0A    <span cla=
ss=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <span c=
lass=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span>; i <span=20=
class=3D"pl-k">&lt;=3D</span> n; i<span class=3D"pl-k">++</span>)=
 {=0A        <span class=3D"pl-k">for</span> (<span class=3D"pl-s=
mi">String</span> word <span class=3D"pl-k">:</span> wordDict) {=0A=
            <span class=3D"pl-k">if</span> (word<span class=3D"pl=
-k">.</span>length() <span class=3D"pl-k">&lt;=3D</span> i=0A   =20=
                <span class=3D"pl-k">&amp;&amp;</span> word<span=20=
class=3D"pl-k">.</span>equals(s<span class=3D"pl-k">.</span>subst=
ring(i <span class=3D"pl-k">-</span> word<span class=3D"pl-k">.</=
span>length(), i))) {=0A                dp[i] <span class=3D"pl-k=
">=3D</span> dp[i] <span class=3D"pl-k">||</span> dp[i <span clas=
s=3D"pl-k">-</span> word<span class=3D"pl-k">.</span>length()];=0A=
            }=0A        }=0A    }=0A    <span class=3D"pl-k">retu=
rn</span> dp[n];=0A}</pre></div><p>=E6=94=B9=E5=8F=98=E4=B8=80=E7=
=BB=84=E6=95=B0=E7=9A=84=E6=AD=A3=E8=B4=9F=E5=8F=B7=E4=BD=BF=E5=BE=
=97=E5=AE=83=E4=BB=AC=E7=9A=84=E5=92=8C=E4=B8=BA=E4=B8=80=E7=BB=99=
=E5=AE=9A=E6=95=B0</p><p><a href=3D"https://leetcode.com/problems=
/target-sum/description/" target=3D"_blank">Leetcode : 494. Targe=
t Sum (Medium)</a></p><div class=3D"highlight highlight-text-html=
-basic"><pre>Input: nums is [1, 1, 1, 1, 1], S is 3. =0AOutput: 5=
=0AExplanation: =0A=0A-1+1+1+1+1 =3D 3=0A+1-1+1+1+1 =3D 3=0A+1+1-=
1+1+1 =3D 3=0A+1+1+1-1+1 =3D 3=0A+1+1+1+1-1 =3D 3=0A=0AThere are=20=
5 ways to assign symbols to make the sum of nums be target 3.</pr=
e></div><p>=E8=AF=A5=E9=97=AE=E9=A2=98=E5=8F=AF=E4=BB=A5=E8=BD=AC=
=E6=8D=A2=E4=B8=BA subset sum =E9=97=AE=E9=A2=98=EF=BC=8C=E4=BB=8E=
=E8=80=8C=E4=BD=BF=E7=94=A8 0-1 =E8=83=8C=E5=8C=85=E7=9A=84=E6=96=
=B9=E6=B3=95=E6=9D=A5=E6=B1=82=E8=A7=A3=E3=80=82=E5=8F=AF=E4=BB=A5=
=E5=B0=86=E8=BF=99=E7=BB=84=E6=95=B0=E7=9C=8B=E6=88=90=E4=B8=A4=E9=
=83=A8=E5=88=86=EF=BC=8CP =E5=92=8C N=EF=BC=8C=E5=85=B6=E4=B8=AD=20=
P =E4=BD=BF=E7=94=A8=E6=AD=A3=E5=8F=B7=EF=BC=8CN =E4=BD=BF=E7=94=A8=
=E8=B4=9F=E5=8F=B7=EF=BC=8C=E6=9C=89=E4=BB=A5=E4=B8=8B=E6=8E=A8=E5=
=AF=BC=EF=BC=9A</p><div class=3D"highlight highlight-text-html-ba=
sic"><pre>                  sum(P) - sum(N) =3D target=0Asum(P) +=
 sum(N) + sum(P) - sum(N) =3D target + sum(P) + sum(N)=0A       =20=
               2 * sum(P) =3D target + sum(nums)</pre></div><p>=E5=
=9B=A0=E6=AD=A4=E5=8F=AA=E8=A6=81=E6=89=BE=E5=88=B0=E4=B8=80=E4=B8=
=AA=E5=AD=90=E9=9B=86=EF=BC=8C=E4=BB=A4=E5=AE=83=E4=BB=AC=E9=83=BD=
=E5=8F=96=E6=AD=A3=E5=8F=B7=EF=BC=8C=E5=B9=B6=E4=B8=94=E5=92=8C=E7=
=AD=89=E4=BA=8E (target + sum(nums))/2=EF=BC=8C=E5=B0=B1=E8=AF=81=
=E6=98=8E=E5=AD=98=E5=9C=A8=E8=A7=A3=E3=80=82</p><div class=3D"hi=
ghlight highlight-source-java"><pre><span class=3D"pl-k">public</=
span> <span class=3D"pl-k">int</span> findTargetSumWays(<span cla=
ss=3D"pl-k">int</span>[] nums, <span class=3D"pl-k">int</span> <s=
pan class=3D"pl-smi">S</span>) {=0A    <span class=3D"pl-k">int</=
span> sum <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0=
</span>;=0A    <span class=3D"pl-k">for</span> (<span class=3D"pl=
-k">int</span> num <span class=3D"pl-k">:</span> nums) {=0A     =20=
  sum <span class=3D"pl-k">+=3D</span> num;=0A    }=0A    <span c=
lass=3D"pl-k">if</span> (sum <span class=3D"pl-k">&lt;</span> <sp=
an class=3D"pl-smi">S</span> <span class=3D"pl-k">||</span> (sum=20=
<span class=3D"pl-k">+</span> <span class=3D"pl-smi">S</span>) <s=
pan class=3D"pl-k">%</span> <span class=3D"pl-c1">2</span> <span=20=
class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">1</span>) {=0A=
        <span class=3D"pl-k">return</span> <span class=3D"pl-c1">=
0</span>;=0A    }=0A    <span class=3D"pl-k">return</span> subset=
Sum(nums, (sum <span class=3D"pl-k">+</span> <span class=3D"pl-sm=
i">S</span>) <span class=3D"pl-k">&gt;&gt;&gt;</span> <span class=
=3D"pl-c1">1</span>);=0A}=0A=0A<span class=3D"pl-k">private</span=
> <span class=3D"pl-k">int</span> subsetSum(<span class=3D"pl-k">=
int</span>[] nums, <span class=3D"pl-k">int</span> targetSum) {=0A=
    <span class=3D"pl-smi">Arrays</span><span class=3D"pl-k">.</s=
pan>sort(nums);=0A    <span class=3D"pl-k">int</span>[] dp <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span c=
lass=3D"pl-smi">int</span>[targetSum <span class=3D"pl-k">+</span=
> <span class=3D"pl-c1">1</span>];=0A    dp[<span class=3D"pl-c1"=
>0</span>] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">=
1</span>;=0A    <span class=3D"pl-k">for</span> (<span class=3D"p=
l-k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D"=
pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> nums<span cla=
ss=3D"pl-k">.</span>length; i<span class=3D"pl-k">++</span>) {=0A=
        <span class=3D"pl-k">int</span> num <span class=3D"pl-k">=
=3D</span> nums[i];=0A        <span class=3D"pl-k">for</span> (<s=
pan class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> t=
argetSum; j <span class=3D"pl-k">&gt;=3D</span> num; j<span class=
=3D"pl-k">--</span>) {=0A            dp[j] <span class=3D"pl-k">=3D=
</span> dp[j] <span class=3D"pl-k">+</span> dp[j <span class=3D"p=
l-k">-</span> num];=0A        }=0A    }=0A    <span class=3D"pl-k=
">return</span> dp[targetSum];=0A}</pre></div><p>01=E5=AD=97=E7=AC=
=A6=E6=9E=84=E6=88=90=E6=9C=80=E5=A4=9A=E7=9A=84=E5=AD=97=E7=AC=A6=
=E4=B8=B2</p><p><a href=3D"https://leetcode.com/problems/ones-and=
-zeroes/description/" target=3D"_blank">Leetcode : 474. Ones and=20=
Zeroes (Medium)</a></p><div class=3D"highlight highlight-text-htm=
l-basic"><pre>Input: Array =3D {"10", "0001", "111001", "1", "0"}=
, m =3D 5, n =3D 3=0AOutput: 4=0A=0AExplanation: This are totally=
 4 strings can be formed by the using of 5 0s and 3 1s, which are=
 =E2=80=9C10,=E2=80=9D0001=E2=80=9D,=E2=80=9D1=E2=80=9D,=E2=80=9D=
0=E2=80=9D</pre></div><p>=E8=BF=99=E6=98=AF=E4=B8=80=E4=B8=AA=E5=A4=
=9A=E7=BB=B4=E8=B4=B9=E7=94=A8=E7=9A=84 0-1 =E8=83=8C=E5=8C=85=E9=
=97=AE=E9=A2=98=EF=BC=8C=E6=9C=89=E4=B8=A4=E4=B8=AA=E8=83=8C=E5=8C=
=85=E5=A4=A7=E5=B0=8F=EF=BC=8C0 =E7=9A=84=E6=95=B0=E9=87=8F=E5=92=
=8C 1 =E7=9A=84=E6=95=B0=E9=87=8F=E3=80=82</p><div class=3D"highl=
ight highlight-source-java"><pre><span class=3D"pl-k">public</spa=
n> <span class=3D"pl-k">int</span> findMaxForm(<span class=3D"pl-=
k">String</span>[] strs, <span class=3D"pl-k">int</span> m, <span=
 class=3D"pl-k">int</span> n) {=0A    <span class=3D"pl-k">if</sp=
an> (strs <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1=
">null</span> <span class=3D"pl-k">||</span> strs<span class=3D"p=
l-k">.</span>length <span class=3D"pl-k">=3D=3D</span> <span clas=
s=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> <span cl=
ass=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</span> l <=
span class=3D"pl-k">=3D</span> strs<span class=3D"pl-k">.</span>l=
ength;=0A    <span class=3D"pl-k">int</span>[][] dp <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"=
pl-smi">int</span>[m <span class=3D"pl-k">+</span> <span class=3D=
"pl-c1">1</span>][n <span class=3D"pl-k">+</span> <span class=3D"=
pl-c1">1</span>];=0A    <span class=3D"pl-k">for</span> (<span cl=
ass=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span c=
lass=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> l; i<=
span class=3D"pl-k">++</span>) {=0A        <span class=3D"pl-smi"=
>String</span> s <span class=3D"pl-k">=3D</span> strs[i];=0A    =20=
   <span class=3D"pl-k">int</span> ones <span class=3D"pl-k">=3D<=
/span> <span class=3D"pl-c1">0</span>, zeros <span class=3D"pl-k"=
>=3D</span> <span class=3D"pl-c1">0</span>;=0A        <span class=
=3D"pl-k">for</span> (<span class=3D"pl-k">char</span> c <span cl=
ass=3D"pl-k">:</span> s<span class=3D"pl-k">.</span>toCharArray()=
) {=0A            <span class=3D"pl-k">if</span> (c <span class=3D=
"pl-k">=3D=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">=
'</span>0<span class=3D"pl-pds">'</span></span>) zeros<span class=
=3D"pl-k">++</span>;=0A            <span class=3D"pl-k">else</spa=
n> <span class=3D"pl-k">if</span> (c <span class=3D"pl-k">=3D=3D<=
/span> <span class=3D"pl-s"><span class=3D"pl-pds">'</span>1<span=
 class=3D"pl-pds">'</span></span>) ones<span class=3D"pl-k">++</s=
pan>;=0A        }=0A        <span class=3D"pl-k">for</span> (<spa=
n class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> m;=20=
j <span class=3D"pl-k">&gt;=3D</span> zeros; j<span class=3D"pl-k=
">--</span>) {=0A            <span class=3D"pl-k">for</span> (<sp=
an class=3D"pl-k">int</span> k <span class=3D"pl-k">=3D</span> n;=
 k <span class=3D"pl-k">&gt;=3D</span> ones; k<span class=3D"pl-k=
">--</span>) {=0A                <span class=3D"pl-k">if</span> (=
zeros <span class=3D"pl-k">&lt;=3D</span> j <span class=3D"pl-k">=
&amp;&amp;</span> ones <span class=3D"pl-k">&lt;=3D</span> k) {=0A=
                    dp[j][k] <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>max(dp=
[j][k], dp[j <span class=3D"pl-k">-</span> zeros][k <span class=3D=
"pl-k">-</span> ones] <span class=3D"pl-k">+</span> <span class=3D=
"pl-c1">1</span>);=0A                }=0A            }=0A       =20=
}=0A    }=0A    <span class=3D"pl-k">return</span> dp[m][n];=0A}<=
/pre></div><p>=E6=89=BE=E9=9B=B6=E9=92=B1</p><p><a href=3D"https:=
//leetcode.com/problems/coin-change/description/" target=3D"_blan=
k">Leetcode : 322. Coin Change (Medium)</a></p><p>=E9=A2=98=E7=9B=
=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E7=BB=99=E4=B8=80=E4=BA=9B=E9=9D=A2=
=E9=A2=9D=E7=9A=84=E7=A1=AC=E5=B8=81=EF=BC=8C=E8=A6=81=E6=B1=82=E7=
=94=A8=E8=BF=99=E4=BA=9B=E7=A1=AC=E5=B8=81=E6=9D=A5=E7=BB=84=E6=88=
=90=E7=BB=99=E5=AE=9A=E9=9D=A2=E9=A2=9D=E7=9A=84=E9=92=B1=E6=95=B0=
=EF=BC=8C=E5=B9=B6=E4=B8=94=E4=BD=BF=E5=BE=97=E7=A1=AC=E5=B8=81=E6=
=95=B0=E9=87=8F=E6=9C=80=E5=B0=91=E3=80=82=E7=A1=AC=E5=B8=81=E5=8F=
=AF=E4=BB=A5=E9=87=8D=E5=A4=8D=E4=BD=BF=E7=94=A8=E3=80=82</p><p>=E8=
=BF=99=E6=98=AF=E4=B8=80=E4=B8=AA=E5=AE=8C=E5=85=A8=E8=83=8C=E5=8C=
=85=E9=97=AE=E9=A2=98=EF=BC=8C=E5=AE=8C=E5=85=A8=E8=83=8C=E5=8C=85=
=E9=97=AE=E9=A2=98=E5=92=8C 0-1=E8=83=8C=E5=8C=85=E9=97=AE=E9=A2=98=
=E5=9C=A8=E5=AE=9E=E7=8E=B0=E4=B8=8A=E5=94=AF=E4=B8=80=E7=9A=84=E4=
=B8=8D=E5=90=8C=E6=98=AF=EF=BC=8C=E7=AC=AC=E4=BA=8C=E5=B1=82=E5=BE=
=AA=E7=8E=AF=E6=98=AF=E4=BB=8E 0 =E5=BC=80=E5=A7=8B=E7=9A=84=EF=BC=
=8C=E8=80=8C=E4=B8=8D=E6=98=AF=E4=BB=8E=E5=B0=BE=E9=83=A8=E5=BC=80=
=E5=A7=8B=E3=80=82</p><div class=3D"highlight highlight-source-ja=
va"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">=
int</span> coinChange(<span class=3D"pl-k">int</span>[] coins, <s=
pan class=3D"pl-k">int</span> amount) {=0A    <span class=3D"pl-k=
">int</span>[] dp <span class=3D"pl-k">=3D</span> <span class=3D"=
pl-k">new</span> <span class=3D"pl-smi">int</span>[amount <span c=
lass=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>];=0A    <sp=
an class=3D"pl-smi">Arrays</span><span class=3D"pl-k">.</span>fil=
l(dp, amount <span class=3D"pl-k">+</span> <span class=3D"pl-c1">=
1</span>);=0A    dp[<span class=3D"pl-c1">0</span>] <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A    <span cla=
ss=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <span c=
lass=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span>; i <span=20=
class=3D"pl-k">&lt;=3D</span> amount; i<span class=3D"pl-k">++</s=
pan>) {=0A        <span class=3D"pl-k">for</span> (<span class=3D=
"pl-k">int</span> j <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">0</span>; j <span class=3D"pl-k">&lt;</span> coins<span c=
lass=3D"pl-k">.</span>length; j<span class=3D"pl-k">++</span>) {=0A=
            <span class=3D"pl-k">if</span> (coins[j] <span class=3D=
"pl-k">&lt;=3D</span> i) {=0A                dp[i] <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-smi">Math</span><span class=3D=
"pl-k">.</span>min(dp[i], dp[i <span class=3D"pl-k">-</span> coin=
s[j]] <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span=
>);=0A            }=0A        }=0A    }=0A    <span class=3D"pl-k=
">return</span> dp[amount] <span class=3D"pl-k">&gt;</span> amoun=
t <span class=3D"pl-k">?</span> <span class=3D"pl-k">-</span><spa=
n class=3D"pl-c1">1</span> <span class=3D"pl-k">:</span> dp[amoun=
t];=0A}</pre></div><p>=E7=BB=84=E5=90=88=E6=80=BB=E5=92=8C</p><p>=
<a href=3D"https://leetcode.com/problems/combination-sum-iv/descr=
iption/" target=3D"_blank">Leetcode : 377. Combination Sum IV (Me=
dium)</a></p><div class=3D"highlight highlight-text-html-basic"><=
pre>nums =3D [1, 2, 3]=0Atarget =3D 4=0A=0AThe possible combinati=
on ways are:=0A(1, 1, 1, 1)=0A(1, 1, 2)=0A(1, 2, 1)=0A(1, 3)=0A(2=
, 1, 1)=0A(2, 2)=0A(3, 1)=0A=0ANote that different sequences are=20=
counted as different combinations.=0A=0ATherefore the output is 7=
.</pre></div><div class=3D"highlight highlight-source-java"><pre>=
<span class=3D"pl-k">public</span> <span class=3D"pl-k">int</span=
> combinationSum4(<span class=3D"pl-k">int</span>[] nums, <span c=
lass=3D"pl-k">int</span> target) {=0A    <span class=3D"pl-k">int=
</span>[] dp <span class=3D"pl-k">=3D</span> <span class=3D"pl-k"=
>new</span> <span class=3D"pl-smi">int</span>[target <span class=3D=
"pl-k">+</span> <span class=3D"pl-c1">1</span>];=0A    dp[<span c=
lass=3D"pl-c1">0</span>] <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-c1">1</span>;=0A    <span class=3D"pl-k">for</span> (<s=
pan class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-c1">1</span>; i <span class=3D"pl-k">&lt;=3D</sp=
an> target; i<span class=3D"pl-k">++</span>) {=0A        <span cl=
ass=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> j <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; j <span=
 class=3D"pl-k">&lt;</span> nums<span class=3D"pl-k">.</span>leng=
th; j<span class=3D"pl-k">++</span>) {=0A            <span class=3D=
"pl-k">if</span>(nums[j] <span class=3D"pl-k">&lt;=3D</span> i) {=
=0A                dp[i] <span class=3D"pl-k">+=3D</span> dp[i <s=
pan class=3D"pl-k">-</span> nums[j]];=0A            }=0A        }=
=0A    }=0A    <span class=3D"pl-k">return</span> dp[target];=0A}=
</pre></div><p>=E5=8F=AA=E8=83=BD=E8=BF=9B=E8=A1=8C=E4=B8=A4=E6=AC=
=A1=E7=9A=84=E8=82=A1=E7=A5=A8=E4=BA=A4=E6=98=93</p><p><a href=3D=
"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii=
i/description/" target=3D"_blank">Leetcode : 123. Best Time to Bu=
y and Sell Stock III (Hard)</a></p><div class=3D"highlight highli=
ght-source-java"><pre><span class=3D"pl-k">public</span> <span cl=
ass=3D"pl-k">int</span> maxProfit(<span class=3D"pl-k">int</span>=
[] prices) {=0A    <span class=3D"pl-k">int</span> firstBuy <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Integer</span><=
span class=3D"pl-c1"><span class=3D"pl-k">.</span>MIN_VALUE</span=
>, firstSell <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1=
">0</span>;=0A    <span class=3D"pl-k">int</span> secondBuy <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Integer</span><=
span class=3D"pl-c1"><span class=3D"pl-k">.</span>MIN_VALUE</span=
>, secondSell <span class=3D"pl-k">=3D</span> <span class=3D"pl-c=
1">0</span>;=0A    <span class=3D"pl-k">for</span> (<span class=3D=
"pl-k">int</span> curPrice <span class=3D"pl-k">:</span> prices)=20=
{=0A        <span class=3D"pl-k">if</span> (firstBuy <span class=3D=
"pl-k">&lt;</span> <span class=3D"pl-k">-</span>curPrice) firstBu=
y <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">-</span>cu=
rPrice;=0A        <span class=3D"pl-k">if</span> (firstSell <span=
 class=3D"pl-k">&lt;</span> firstBuy <span class=3D"pl-k">+</span=
> curPrice) firstSell <span class=3D"pl-k">=3D</span> firstBuy <s=
pan class=3D"pl-k">+</span> curPrice;=0A        <span class=3D"pl=
-k">if</span> (secondBuy <span class=3D"pl-k">&lt;</span> firstSe=
ll <span class=3D"pl-k">-</span> curPrice) secondBuy <span class=3D=
"pl-k">=3D</span> firstSell <span class=3D"pl-k">-</span> curPric=
e;=0A        <span class=3D"pl-k">if</span> (secondSell <span cla=
ss=3D"pl-k">&lt;</span> secondBuy <span class=3D"pl-k">+</span> c=
urPrice) secondSell <span class=3D"pl-k">=3D</span> secondBuy <sp=
an class=3D"pl-k">+</span> curPrice;=0A    }=0A    <span class=3D=
"pl-k">return</span> secondSell;=0A}</pre></div><p>=E5=8F=AA=E8=83=
=BD=E8=BF=9B=E8=A1=8C k =E6=AC=A1=E7=9A=84=E8=82=A1=E7=A5=A8=E4=BA=
=A4=E6=98=93</p><p><a href=3D"https://leetcode.com/problems/best-=
time-to-buy-and-sell-stock-iv/description/" target=3D"_blank">Lee=
tcode : 188. Best Time to Buy and Sell Stock IV (Hard)</a></p><di=
v class=3D"highlight highlight-text-html-basic"><pre>dp[i, j] =3D=
 max(dp[i, j-1], prices[j] - prices[jj] + dp[i-1, jj]) { jj in ra=
nge of [0, j-1] } =3D max(dp[i, j-1], prices[j] + max(dp[i-1, jj]=
 - prices[jj]))</pre></div><div class=3D"highlight highlight-sour=
ce-java"><pre><span class=3D"pl-k">public</span> <span class=3D"p=
l-k">int</span> maxProfit(<span class=3D"pl-k">int</span> k, <spa=
n class=3D"pl-k">int</span>[] prices) {=0A    <span class=3D"pl-k=
">int</span> n <span class=3D"pl-k">=3D</span> prices<span class=3D=
"pl-k">.</span>length;=0A    <span class=3D"pl-k">if</span> (k <s=
pan class=3D"pl-k">&gt;=3D</span> n<span class=3D"pl-k">/</span><=
span class=3D"pl-c1">2</span>) {=0A        <span class=3D"pl-k">i=
nt</span> maxPro <span class=3D"pl-k">=3D</span> <span class=3D"p=
l-c1">0</span>;=0A        <span class=3D"pl-k">for</span> (<span=20=
class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span=
 class=3D"pl-c1">1</span>; i <span class=3D"pl-k">&lt;</span> n;=20=
i<span class=3D"pl-k">++</span>) {=0A            <span class=3D"p=
l-k">if</span> (prices[i] <span class=3D"pl-k">&gt;</span> prices=
[i<span class=3D"pl-k">-</span><span class=3D"pl-c1">1</span>])=0A=
                maxPro <span class=3D"pl-k">+=3D</span> prices[i]=
 <span class=3D"pl-k">-</span> prices[i<span class=3D"pl-k">-</sp=
an><span class=3D"pl-c1">1</span>];=0A        }=0A        <span c=
lass=3D"pl-k">return</span> maxPro;=0A    }=0A    <span class=3D"=
pl-k">int</span>[][] dp <span class=3D"pl-k">=3D</span> <span cla=
ss=3D"pl-k">new</span> <span class=3D"pl-smi">int</span>[k <span=20=
class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>][n];=0A  =20=
 <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span>=
 i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span>=
; i <span class=3D"pl-k">&lt;=3D</span> k; i<span class=3D"pl-k">=
++</span>) {=0A        <span class=3D"pl-k">int</span> localMax <=
span class=3D"pl-k">=3D</span> dp[i <span class=3D"pl-k">-</span>=
 <span class=3D"pl-c1">1</span>][<span class=3D"pl-c1">0</span>]=20=
<span class=3D"pl-k">-</span> prices[<span class=3D"pl-c1">0</spa=
n>];=0A        <span class=3D"pl-k">for</span> (<span class=3D"pl=
-k">int</span> j <span class=3D"pl-k">=3D</span> <span class=3D"p=
l-c1">1</span>; j <span class=3D"pl-k">&lt;</span> n; j<span clas=
s=3D"pl-k">++</span>) {=0A            dp[i][j] <span class=3D"pl-=
k">=3D</span> <span class=3D"pl-smi">Math</span><span class=3D"pl=
-k">.</span>max(dp[i][j <span class=3D"pl-k">-</span> <span class=
=3D"pl-c1">1</span>], prices[j] <span class=3D"pl-k">+</span> loc=
alMax);=0A            localMax <span class=3D"pl-k">=3D</span> <s=
pan class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>max(=
localMax, dp[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1=
">1</span>][j] <span class=3D"pl-k">-</span> prices[j]);=0A     =20=
  }=0A    }=0A    <span class=3D"pl-k">return</span> dp[k][n <spa=
n class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>];=0A}</p=
re></div><h3>=E6=95=B0=E7=BB=84=E5=8C=BA=E9=97=B4</h3><p>=E6=95=B0=
=E7=BB=84=E5=8C=BA=E9=97=B4=E5=92=8C</p><p><a href=3D"https://lee=
tcode.com/problems/range-sum-query-immutable/description/" target=
=3D"_blank">Leetcode : 303. Range Sum Query - Immutable (Easy)</a=
></p><p>=E6=B1=82=E5=8C=BA=E9=97=B4 i ~ j =E7=9A=84=E5=92=8C=EF=BC=
=8C=E5=8F=AF=E4=BB=A5=E8=BD=AC=E6=8D=A2=E4=B8=BA sum[j] - sum[i-1=
]=EF=BC=8C=E5=85=B6=E4=B8=AD sum[i] =E4=B8=BA 0 ~ j =E7=9A=84=E5=92=
=8C=E3=80=82</p><div class=3D"highlight highlight-source-java"><p=
re><span class=3D"pl-k">class</span> <span class=3D"pl-en">NumArr=
ay</span> {=0A    =0A    <span class=3D"pl-k">int</span>[] nums;=0A=
    =0A    <span class=3D"pl-k">public</span> <span class=3D"pl-e=
n">NumArray</span>(<span class=3D"pl-k">int</span>[] <span class=3D=
"pl-v">nums</span>) {=0A        <span class=3D"pl-k">for</span>(<=
span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span>=20=
<span class=3D"pl-c1">1</span>; i <span class=3D"pl-k">&lt;</span=
> nums<span class=3D"pl-k">.</span>length; i<span class=3D"pl-k">=
++</span>)=0A            nums[i] <span class=3D"pl-k">+=3D</span>=
 nums[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</sp=
an>];=0A        <span class=3D"pl-c1">this</span><span class=3D"p=
l-k">.</span>nums <span class=3D"pl-k">=3D</span> nums;=0A    }=0A=
    =0A    <span class=3D"pl-k">public</span> <span class=3D"pl-k=
">int</span> <span class=3D"pl-en">sumRange</span>(<span class=3D=
"pl-k">int</span> <span class=3D"pl-v">i</span>, <span class=3D"p=
l-k">int</span> <span class=3D"pl-v">j</span>) {=0A        <span=20=
class=3D"pl-k">return</span> i <span class=3D"pl-k">=3D=3D</span>=
 <span class=3D"pl-c1">0</span> <span class=3D"pl-k">?</span> num=
s[j] <span class=3D"pl-k">:</span> nums[j] <span class=3D"pl-k">-=
</span> nums[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1=
">1</span>];=0A    }=0A}</pre></div><p>=E5=AD=90=E6=95=B0=E7=BB=84=
=E6=9C=80=E5=A4=A7=E7=9A=84=E5=92=8C</p><p><a href=3D"https://lee=
tcode.com/problems/maximum-subarray/description/" target=3D"_blan=
k">Leetcode : 53. Maximum Subarray (Easy)</a></p><p>=E4=BB=A4 sum=
[i] =E4=B8=BA=E4=BB=A5 num[i] =E4=B8=BA=E7=BB=93=E5=B0=BE=E7=9A=84=
=E5=AD=90=E6=95=B0=E7=BB=84=E6=9C=80=E5=A4=A7=E7=9A=84=E5=92=8C=EF=
=BC=8C=E5=8F=AF=E4=BB=A5=E7=94=B1 sum[i-1] =E5=BE=97=E5=88=B0 sum=
[i] =E7=9A=84=E5=80=BC=EF=BC=8C=E5=A6=82=E6=9E=9C sum[i-1] =E5=B0=
=8F=E4=BA=8E 0=EF=BC=8C=E9=82=A3=E4=B9=88=E4=BB=A5 num[i] =E4=B8=BA=
=E7=BB=93=E5=B0=BE=E7=9A=84=E5=AD=90=E6=95=B0=E7=BB=84=E4=B8=8D=E8=
=83=BD=E5=8C=85=E5=90=AB=E5=89=8D=E9=9D=A2=E7=9A=84=E5=86=85=E5=AE=
=B9=EF=BC=8C=E5=9B=A0=E4=B8=BA=E5=8A=A0=E4=B8=8A=E5=89=8D=E9=9D=A2=
=E7=9A=84=E9=83=A8=E5=88=86=EF=BC=8C=E9=82=A3=E4=B9=88=E5=92=8C=E4=
=B8=80=E5=AE=9A=E4=BC=9A=E6=AF=94 num[i] =E8=BF=98=E5=B0=8F=E3=80=
=82</p><div class=3D"highlight highlight-source-java"><pre><span=20=
class=3D"pl-k">public</span> <span class=3D"pl-k">int</span> maxS=
ubArray(<span class=3D"pl-k">int</span>[] nums) {=0A    <span cla=
ss=3D"pl-k">int</span> n <span class=3D"pl-k">=3D</span> nums<spa=
n class=3D"pl-k">.</span>length;=0A    <span class=3D"pl-k">int</=
span>[] sum <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">=
new</span> <span class=3D"pl-smi">int</span>[n];=0A    sum[<span=20=
class=3D"pl-c1">0</span>] <span class=3D"pl-k">=3D</span> nums[<s=
pan class=3D"pl-c1">0</span>];=0A    <span class=3D"pl-k">int</sp=
an> max <span class=3D"pl-k">=3D</span> sum[<span class=3D"pl-c1"=
>0</span>];=0A    <span class=3D"pl-k">for</span>(<span class=3D"=
pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">1</span>; i <span class=3D"pl-k">&lt;</span> n; i<span cl=
ass=3D"pl-k">++</span>){=0A        sum[i] <span class=3D"pl-k">=3D=
</span> (sum[i<span class=3D"pl-k">-</span><span class=3D"pl-c1">=
1</span>] <span class=3D"pl-k">&gt;</span> <span class=3D"pl-c1">=
0</span> <span class=3D"pl-k">?</span> sum[i<span class=3D"pl-k">=
-</span><span class=3D"pl-c1">1</span>] <span class=3D"pl-k">:</s=
pan> <span class=3D"pl-c1">0</span>) <span class=3D"pl-k">+</span=
> nums[i];=0A        max <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>max(max, s=
um[i]);=0A    }=0A    <span class=3D"pl-k">return</span> max;=0A}=
</pre></div><p>=E6=95=B0=E7=BB=84=E4=B8=AD=E7=AD=89=E5=B7=AE=E9=80=
=92=E5=A2=9E=E5=AD=90=E5=8C=BA=E9=97=B4=E7=9A=84=E4=B8=AA=E6=95=B0=
</p><p><a href=3D"https://leetcode.com/problems/arithmetic-slices=
/description/" target=3D"_blank">Leetcode : 413. Arithmetic Slice=
s (Medium)</a></p><div class=3D"highlight highlight-text-html-bas=
ic"><pre>A =3D [1, 2, 3, 4]=0A=0Areturn: 3, for 3 arithmetic slic=
es in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.</pre></div=
><p>=E5=AF=B9=E4=BA=8E (1,2,3,4)=EF=BC=8C=E5=AE=83=E6=9C=89=E4=B8=
=89=E7=A7=8D=E7=BB=84=E6=88=90=E9=80=92=E5=A2=9E=E5=AD=90=E5=8C=BA=
=E9=97=B4=E7=9A=84=E6=96=B9=E5=BC=8F=EF=BC=8C=E8=80=8C=E5=AF=B9=E4=
=BA=8E (1,2,3,4,5)=EF=BC=8C=E5=AE=83=E7=BB=84=E6=88=90=E9=80=92=E5=
=A2=9E=E5=AD=90=E5=8C=BA=E9=97=B4=E7=9A=84=E6=96=B9=E5=BC=8F=E9=99=
=A4=E4=BA=86 (1,2,3,4) =E7=9A=84=E4=B8=89=E7=A7=8D=E5=A4=96=E8=BF=
=98=E5=A4=9A=E4=BA=86=E4=B8=80=E7=A7=8D=EF=BC=8C=E5=8D=B3 (1,2,3,=
4,5)=EF=BC=8C=E5=9B=A0=E6=AD=A4 dp[i] =3D dp[i - 1] + 1=E3=80=82<=
/p><div class=3D"highlight highlight-source-java"><pre><span clas=
s=3D"pl-k">public</span> <span class=3D"pl-k">int</span> numberOf=
ArithmeticSlices(<span class=3D"pl-k">int</span>[] <span class=3D=
"pl-smi">A</span>) {=0A    <span class=3D"pl-k">int</span> n <spa=
n class=3D"pl-k">=3D</span> <span class=3D"pl-smi">A</span><span=20=
class=3D"pl-k">.</span>length;=0A    <span class=3D"pl-k">int</sp=
an>[] dp <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new=
</span> <span class=3D"pl-smi">int</span>[n];=0A    <span class=3D=
"pl-k">for</span>(<span class=3D"pl-k">int</span> i <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">2</span>; i <span class=3D=
"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span>) {=0A     =20=
  <span class=3D"pl-k">if</span>(<span class=3D"pl-k">A</span>[i]=
 <span class=3D"pl-k">-</span> <span class=3D"pl-k">A</span>[i <s=
pan class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>] <span=
 class=3D"pl-k">=3D=3D</span> <span class=3D"pl-k">A</span>[i <sp=
an class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>] <span=20=
class=3D"pl-k">-</span> <span class=3D"pl-k">A</span>[i <span cla=
ss=3D"pl-k">-</span> <span class=3D"pl-c1">2</span>]) {=0A      =20=
     dp[i] <span class=3D"pl-k">=3D</span> dp[i <span class=3D"pl=
-k">-</span> <span class=3D"pl-c1">1</span>] <span class=3D"pl-k"=
>+</span> <span class=3D"pl-c1">1</span>;=0A        }=0A    }=0A=20=
   <span class=3D"pl-k">int</span> ret <span class=3D"pl-k">=3D</=
span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">=
for</span>(<span class=3D"pl-k">int</span> cnt <span class=3D"pl-=
k">:</span> dp) {=0A        ret <span class=3D"pl-k">+=3D</span>=20=
cnt;=0A    }=0A    <span class=3D"pl-k">return</span> ret;=0A}</p=
re></div><h3>=E5=AD=97=E7=AC=A6=E4=B8=B2=E7=BC=96=E8=BE=91</h3><p=
>=E5=88=A0=E9=99=A4=E4=B8=A4=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E7=
=9A=84=E5=AD=97=E7=AC=A6=E4=BD=BF=E5=AE=83=E4=BB=AC=E7=9B=B8=E7=AD=
=89</p><p><a href=3D"https://leetcode.com/problems/delete-operati=
on-for-two-strings/description/" target=3D"_blank">Leetcode : 583=
. Delete Operation for Two Strings (Medium)</a></p><p>=E5=8F=AF=E4=
=BB=A5=E8=BD=AC=E6=8D=A2=E4=B8=BA=E6=B1=82=E4=B8=A4=E4=B8=AA=E5=AD=
=97=E7=AC=A6=E4=B8=B2=E7=9A=84=E6=9C=80=E9=95=BF=E5=85=AC=E5=85=B1=
=E5=AD=90=E5=BA=8F=E5=88=97=E9=97=AE=E9=A2=98=E3=80=82</p><div cl=
ass=3D"highlight highlight-source-java"><pre><span class=3D"pl-k"=
>public</span> <span class=3D"pl-k">int</span> minDistance(<span=20=
class=3D"pl-smi">String</span> word1, <span class=3D"pl-smi">Stri=
ng</span> word2) {=0A    <span class=3D"pl-k">int</span> m <span=20=
class=3D"pl-k">=3D</span> word1<span class=3D"pl-k">.</span>lengt=
h(), n <span class=3D"pl-k">=3D</span> word2<span class=3D"pl-k">=
.</span>length();=0A    <span class=3D"pl-k">int</span>[][] dp <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <sp=
an class=3D"pl-smi">int</span>[m <span class=3D"pl-k">+</span> <s=
pan class=3D"pl-c1">1</span>][n <span class=3D"pl-k">+</span> <sp=
an class=3D"pl-c1">1</span>];=0A    <span class=3D"pl-k">for</spa=
n> (<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</s=
pan> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;=3D=
</span> m; i<span class=3D"pl-k">++</span>) {=0A        <span cla=
ss=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> j <span c=
lass=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; j <span=20=
class=3D"pl-k">&lt;=3D</span> n; j<span class=3D"pl-k">++</span>)=
 {=0A            <span class=3D"pl-k">if</span> (i <span class=3D=
"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span> <span class=3D=
"pl-k">||</span> j <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">0</span>) <span class=3D"pl-k">continue</span>;=0A   =20=
        dp[i][j] <span class=3D"pl-k">=3D</span> word1<span class=
=3D"pl-k">.</span>charAt(i <span class=3D"pl-k">-</span> <span cl=
ass=3D"pl-c1">1</span>) <span class=3D"pl-k">=3D=3D</span> word2<=
span class=3D"pl-k">.</span>charAt(j <span class=3D"pl-k">-</span=
> <span class=3D"pl-c1">1</span>) <span class=3D"pl-k">?</span> d=
p[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>]=
[j <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>]=20=
<span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>=0A =20=
                  <span class=3D"pl-k">:</span> <span class=3D"pl=
-smi">Math</span><span class=3D"pl-k">.</span>max(dp[i][j <span c=
lass=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>], dp[i <spa=
n class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>][j]);=0A=
        }=0A    }=0A    <span class=3D"pl-k">return</span> m <spa=
n class=3D"pl-k">+</span> n <span class=3D"pl-k">-</span> <span c=
lass=3D"pl-c1">2</span> <span class=3D"pl-k">*</span> dp[m][n];=0A=
}</pre></div><p>=E4=BF=AE=E6=94=B9=E4=B8=80=E4=B8=AA=E5=AD=97=E7=AC=
=A6=E4=B8=B2=E7=A7=B0=E4=B8=BA=E5=8F=A6=E4=B8=80=E4=B8=AA=E5=AD=97=
=E7=AC=A6=E4=B8=B2<span class=3D"Apple-converted-space">&nbsp;</s=
pan>// TODO</p><p><a href=3D"https://leetcode.com/problems/edit-d=
istance/description/" target=3D"_blank">Leetcode : 72. Edit Dista=
nce (Hard)</a></p><h3>=E5=85=B6=E5=AE=83=E9=97=AE=E9=A2=98</h3><p=
>=E9=9C=80=E8=A6=81=E5=86=B7=E5=8D=B4=E6=9C=9F=E7=9A=84=E8=82=A1=E7=
=A5=A8=E4=BA=A4=E6=98=93</p><p><a href=3D"https://leetcode.com/pr=
oblems/best-time-to-buy-and-sell-stock-with-cooldown/description/=
" target=3D"_blank">Leetcode : 309. Best Time to Buy and Sell Sto=
ck with Cooldown(Medium)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=
=BF=B0=EF=BC=9A=E4=BA=A4=E6=98=93=E4=B9=8B=E5=90=8E=E9=9C=80=E8=A6=
=81=E6=9C=89=E4=B8=80=E5=A4=A9=E7=9A=84=E5=86=B7=E5=8D=B4=E6=97=B6=
=E9=97=B4=E3=80=82</p><p><a href=3D"https://github.com/CyC2018/In=
terviewNotes/blob/master/pics/ac9b31ec-cef1-4880-a875-fc4571ca10e=
1.png" target=3D"_blank"><img src=3D"D:\=E6=96=87=E6=A1=A3\My Kno=
wledge\temp\969fb8f2-eb58-4891-86ea-51bce0e90052\128\index_files\=
0.49683216165323385.png" alt=3D""></a></p><div class=3D"highlight=
 highlight-text-html-basic"><pre>s0[i] =3D max(s0[i - 1], s2[i -=20=
1]); // Stay at s0, or rest from s2=0As1[i] =3D max(s1[i - 1], s0=
[i - 1] - prices[i]); // Stay at s1, or buy from s0=0As2[i] =3D s=
1[i - 1] + prices[i]; // Only one way from s1</pre></div><div cla=
ss=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">=
public</span> <span class=3D"pl-k">int</span> maxProfit(<span cla=
ss=3D"pl-k">int</span>[] prices) {=0A    <span class=3D"pl-k">if<=
/span> (prices <span class=3D"pl-k">=3D=3D</span> <span class=3D"=
pl-c1">null</span> <span class=3D"pl-k">||</span> prices<span cla=
ss=3D"pl-k">.</span>length <span class=3D"pl-k">=3D=3D</span> <sp=
an class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> <=
span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</sp=
an> n <span class=3D"pl-k">=3D</span> prices<span class=3D"pl-k">=
.</span>length;=0A    <span class=3D"pl-k">int</span>[] s0 <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span c=
lass=3D"pl-smi">int</span>[n];=0A    <span class=3D"pl-k">int</sp=
an>[] s1 <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new=
</span> <span class=3D"pl-smi">int</span>[n];=0A    <span class=3D=
"pl-k">int</span>[] s2 <span class=3D"pl-k">=3D</span> <span clas=
s=3D"pl-k">new</span> <span class=3D"pl-smi">int</span>[n];=0A  =20=
 s0[<span class=3D"pl-c1">0</span>] <span class=3D"pl-k">=3D</spa=
n> <span class=3D"pl-c1">0</span>;=0A    s1[<span class=3D"pl-c1"=
>0</span>] <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">-=
</span>prices[<span class=3D"pl-c1">0</span>];=0A    s2[<span cla=
ss=3D"pl-c1">0</span>] <span class=3D"pl-k">=3D</span> <span clas=
s=3D"pl-smi">Integer</span><span class=3D"pl-c1"><span class=3D"p=
l-k">.</span>MIN_VALUE</span>;=0A    <span class=3D"pl-k">for</sp=
an> (<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</=
span> <span class=3D"pl-c1">1</span>; i <span class=3D"pl-k">&lt;=
</span> n; i<span class=3D"pl-k">++</span>) {=0A        s0[i] <sp=
an class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Math</span><s=
pan class=3D"pl-k">.</span>max(s0[i <span class=3D"pl-k">-</span>=
 <span class=3D"pl-c1">1</span>], s2[i <span class=3D"pl-k">-</sp=
an> <span class=3D"pl-c1">1</span>]);=0A        s1[i] <span class=
=3D"pl-k">=3D</span> <span class=3D"pl-smi">Math</span><span clas=
s=3D"pl-k">.</span>max(s1[i <span class=3D"pl-k">-</span> <span c=
lass=3D"pl-c1">1</span>], s0[i <span class=3D"pl-k">-</span> <spa=
n class=3D"pl-c1">1</span>] <span class=3D"pl-k">-</span> prices[=
i]);=0A        s2[i] <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-smi">Math</span><span class=3D"pl-k">.</span>max(s2[i <span c=
lass=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>], s1[i <spa=
n class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>] <span c=
lass=3D"pl-k">+</span> prices[i]);=0A    }=0A    <span class=3D"p=
l-k">return</span> <span class=3D"pl-smi">Math</span><span class=3D=
"pl-k">.</span>max(s0[n <span class=3D"pl-k">-</span> <span class=
=3D"pl-c1">1</span>], s2[n <span class=3D"pl-k">-</span> <span cl=
ass=3D"pl-c1">1</span>]);=0A}</pre></div><p>=E7=BB=9F=E8=AE=A1=E4=
=BB=8E 0 ~ n =E6=AF=8F=E4=B8=AA=E6=95=B0=E7=9A=84=E4=BA=8C=E8=BF=9B=
=E5=88=B6=E8=A1=A8=E7=A4=BA=E4=B8=AD 1 =E7=9A=84=E4=B8=AA=E6=95=B0=
</p><p><a href=3D"https://leetcode.com/problems/counting-bits/des=
cription/" target=3D"_blank">Leetcode : 338. Counting Bits (Mediu=
m)</a></p><p>=E5=AF=B9=E4=BA=8E=E6=95=B0=E5=AD=97 6(110)=EF=BC=8C=
=E5=AE=83=E5=8F=AF=E4=BB=A5=E7=9C=8B=E6=88=90=E6=98=AF=E6=95=B0=E5=
=AD=97 2(10) =E5=89=8D=E9=9D=A2=E5=8A=A0=E4=B8=8A=E4=B8=80=E4=B8=AA=
 1 =EF=BC=8C=E5=9B=A0=E6=AD=A4 dp[i] =3D dp[i&amp;(i-1)] + 1;</p>=
<div class=3D"highlight highlight-source-java"><pre>    <span cla=
ss=3D"pl-k">public</span> <span class=3D"pl-k">int</span>[] count=
Bits(<span class=3D"pl-k">int</span> num) {=0A        <span class=
=3D"pl-k">int</span>[] ret <span class=3D"pl-k">=3D</span> <span=20=
class=3D"pl-k">new</span> <span class=3D"pl-smi">int</span>[num <=
span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>];=0A=20=
       <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</=
span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</=
span>; i <span class=3D"pl-k">&lt;=3D</span> num; i<span class=3D=
"pl-k">++</span>){=0A            ret[i] <span class=3D"pl-k">=3D<=
/span> ret[i<span class=3D"pl-k">&amp;</span>(i<span class=3D"pl-=
k">-</span><span class=3D"pl-c1">1</span>)] <span class=3D"pl-k">=
+</span> <span class=3D"pl-c1">1</span>;=0A        }=0A        <s=
pan class=3D"pl-k">return</span> ret;=0A    }</pre></div><p>=E4=B8=
=80=E7=BB=84=E6=95=B4=E6=95=B0=E5=AF=B9=E8=83=BD=E5=A4=9F=E6=9E=84=
=E6=88=90=E7=9A=84=E6=9C=80=E9=95=BF=E9=93=BE</p><p><a href=3D"ht=
tps://leetcode.com/problems/maximum-length-of-pair-chain/descript=
ion/" target=3D"_blank">Leetcode : 646. Maximum Length of Pair Ch=
ain (Medium)</a></p><p>=E5=AF=B9=E4=BA=8E (a, b) =E5=92=8C (c, d)=
 =EF=BC=8C=E5=A6=82=E6=9E=9C b &lt; c=EF=BC=8C=E5=88=99=E5=AE=83=E4=
=BB=AC=E5=8F=AF=E4=BB=A5=E6=9E=84=E6=88=90=E4=B8=80=E6=9D=A1=E9=93=
=BE=E3=80=82</p><div class=3D"highlight highlight-source-java"><p=
re><span class=3D"pl-k">public</span> <span class=3D"pl-k">int</s=
pan> findLongestChain(<span class=3D"pl-k">int</span>[][] pairs)=20=
{=0A    <span class=3D"pl-k">if</span>(pairs <span class=3D"pl-k"=
>=3D=3D</span> <span class=3D"pl-c1">null</span> <span class=3D"p=
l-k">||</span> pairs<span class=3D"pl-k">.</span>length <span cla=
ss=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>) {=0A  =20=
     <span class=3D"pl-k">return</span> <span class=3D"pl-c1">0</=
span>;=0A    }=0A    <span class=3D"pl-smi">Arrays</span><span cl=
ass=3D"pl-k">.</span>sort(pairs, (a, b) <span class=3D"pl-k">-</s=
pan><span class=3D"pl-k">&gt;</span> (a[<span class=3D"pl-c1">0</=
span>] <span class=3D"pl-k">-</span> b[<span class=3D"pl-c1">0</s=
pan>]));=0A    <span class=3D"pl-k">int</span> n <span class=3D"p=
l-k">=3D</span> pairs<span class=3D"pl-k">.</span>length;=0A    <=
span class=3D"pl-k">int</span>[] dp <span class=3D"pl-k">=3D</spa=
n> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">int</sp=
an>[n];=0A    <span class=3D"pl-smi">Arrays</span><span class=3D"=
pl-k">.</span>fill(dp, <span class=3D"pl-c1">1</span>);=0A    <sp=
an class=3D"pl-k">for</span>(<span class=3D"pl-k">int</span> i <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <=
span class=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span=
>) {=0A        <span class=3D"pl-k">for</span>(<span class=3D"pl-=
k">int</span> j <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-c1">0</span>; j <span class=3D"pl-k">&lt;</span> i; j<span class=
=3D"pl-k">++</span>) {=0A            <span class=3D"pl-k">if</spa=
n>(pairs[i][<span class=3D"pl-c1">0</span>] <span class=3D"pl-k">=
&gt;</span> pairs[j][<span class=3D"pl-c1">1</span>]){=0A       =20=
        dp[i] <span class=3D"pl-k">=3D</span> <span class=3D"pl-s=
mi">Math</span><span class=3D"pl-k">.</span>max(dp[i], dp[j] <spa=
n class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>);=0A   =20=
        }=0A        }=0A    }=0A    =0A    <span class=3D"pl-k">i=
nt</span> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-c=
1">0</span>;=0A    <span class=3D"pl-k">for</span>(<span class=3D=
"pl-k">int</span> num <span class=3D"pl-k">:</span> dp) {=0A    =20=
   ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Mat=
h</span><span class=3D"pl-k">.</span>max(ret, num);=0A    }=0A  =20=
 <span class=3D"pl-k">return</span> ret;=0A}</pre></div><p>=E4=B9=
=B0=E5=85=A5=E5=92=8C=E5=94=AE=E5=87=BA=E8=82=A1=E7=A5=A8=E6=9C=80=
=E5=A4=A7=E7=9A=84=E6=94=B6=E7=9B=8A</p><p><a href=3D"https://lee=
tcode.com/problems/best-time-to-buy-and-sell-stock/description/"=20=
target=3D"_blank">Leetcode : 121. Best Time to Buy and Sell Stock=
 (Easy)</a></p><p>=E5=8F=AA=E8=BF=9B=E8=A1=8C=E4=B8=80=E6=AC=A1=E4=
=BA=A4=E6=98=93=E3=80=82</p><p>=E5=8F=AA=E8=A6=81=E8=AE=B0=E5=BD=95=
=E5=89=8D=E9=9D=A2=E7=9A=84=E6=9C=80=E5=B0=8F=E4=BB=B7=E6=A0=BC=EF=
=BC=8C=E5=B0=86=E8=BF=99=E4=B8=AA=E6=9C=80=E5=B0=8F=E4=BB=B7=E6=A0=
=BC=E4=BD=9C=E4=B8=BA=E4=B9=B0=E5=85=A5=E4=BB=B7=E6=A0=BC=EF=BC=8C=
=E7=84=B6=E5=90=8E=E5=B0=86=E5=BD=93=E5=89=8D=E7=9A=84=E4=BB=B7=E6=
=A0=BC=E4=BD=9C=E4=B8=BA=E5=94=AE=E5=87=BA=E4=BB=B7=E6=A0=BC=EF=BC=
=8C=E6=9F=A5=E7=9C=8B=E8=BF=99=E4=B8=AA=E4=BB=B7=E6=A0=BC=E6=98=AF=
=E5=90=A6=E6=98=AF=E5=BD=93=E5=89=8D=E7=9A=84=E6=9C=80=E5=A4=A7=E4=
=BB=B7=E6=A0=BC=E3=80=82</p><div class=3D"highlight highlight-sou=
rce-java"><pre><span class=3D"pl-k">public</span> <span class=3D"=
pl-k">int</span> maxProfit(<span class=3D"pl-k">int</span>[] pric=
es) {=0A    <span class=3D"pl-k">int</span> n <span class=3D"pl-k=
">=3D</span> prices<span class=3D"pl-k">.</span>length;=0A    <sp=
an class=3D"pl-k">if</span>(n <span class=3D"pl-k">=3D=3D</span>=20=
<span class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span=
> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int<=
/span> soFarMin <span class=3D"pl-k">=3D</span> prices[<span clas=
s=3D"pl-c1">0</span>];=0A    <span class=3D"pl-k">int</span> max=20=
<span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A=
    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</spa=
n> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</spa=
n>; i <span class=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">+=
+</span>){=0A        <span class=3D"pl-k">if</span>(soFarMin <spa=
n class=3D"pl-k">&gt;</span> prices[i]) soFarMin <span class=3D"p=
l-k">=3D</span> prices[i];=0A        <span class=3D"pl-k">else</s=
pan> max <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi">M=
ath</span><span class=3D"pl-k">.</span>max(max, prices[i] <span c=
lass=3D"pl-k">-</span> soFarMin);=0A    }=0A    <span class=3D"pl=
-k">return</span> max;=0A}</pre></div><p>=E5=A4=8D=E5=88=B6=E7=B2=
=98=E8=B4=B4=E5=AD=97=E7=AC=A6</p><p><a href=3D"https://leetcode.=
com/problems/2-keys-keyboard/description/" target=3D"_blank">Leet=
code : 650. 2 Keys Keyboard (Medium)</a></p><div class=3D"highlig=
ht highlight-source-java"><pre><span class=3D"pl-k">public</span>=
 <span class=3D"pl-k">int</span> minSteps(<span class=3D"pl-k">in=
t</span> n) {=0A    <span class=3D"pl-k">int</span>[] dp <span cl=
ass=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span cla=
ss=3D"pl-smi">int</span>[n <span class=3D"pl-k">+</span> <span cl=
ass=3D"pl-c1">1</span>];=0A    <span class=3D"pl-k">for</span> (<=
span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span>=20=
<span class=3D"pl-c1">2</span>; i <span class=3D"pl-k">&lt;=3D</s=
pan> n; i<span class=3D"pl-k">++</span>) {=0A        dp[i] <span=20=
class=3D"pl-k">=3D</span> i;=0A        <span class=3D"pl-k">for</=
span> (<span class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D=
</span> i <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</=
span>; j <span class=3D"pl-k">&gt;=3D</span> <span class=3D"pl-c1=
">0</span>; j<span class=3D"pl-k">--</span>) {=0A            <spa=
n class=3D"pl-k">if</span> (i <span class=3D"pl-k">%</span> j <sp=
an class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>) {=
=0A                dp[i] <span class=3D"pl-k">=3D</span> dp[j] <s=
pan class=3D"pl-k">+</span> dp[i <span class=3D"pl-k">/</span> j]=
;=0A                <span class=3D"pl-k">break</span>;=0A       =20=
    }=0A        }=0A    }=0A    <span class=3D"pl-k">return</span=
> dp[n];=0A}</pre></div><div class=3D"highlight highlight-source-=
java"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k=
">int</span> minSteps(<span class=3D"pl-k">int</span> n) {=0A   =20=
<span class=3D"pl-k">if</span> (n <span class=3D"pl-k">=3D=3D</sp=
an> <span class=3D"pl-c1">1</span>) <span class=3D"pl-k">return</=
span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">=
for</span> (<span class=3D"pl-k">int</span> i <span class=3D"pl-k=
">=3D</span> <span class=3D"pl-c1">2</span>; i <span class=3D"pl-=
k">&lt;=3D</span> <span class=3D"pl-smi">Math</span><span class=3D=
"pl-k">.</span>sqrt(n); i<span class=3D"pl-k">++</span>) {=0A   =20=
    <span class=3D"pl-k">if</span> (n <span class=3D"pl-k">%</spa=
n> i <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</=
span>) <span class=3D"pl-k">return</span> i <span class=3D"pl-k">=
+</span> minSteps(n <span class=3D"pl-k">/</span> i);=0A    }=0A=20=
   <span class=3D"pl-k">return</span> n;=0A}</pre></div><h2>=E6=95=
=B0=E5=AD=A6</h2><h3>=E7=B4=A0=E6=95=B0</h3><p>=E7=B4=A0=E6=95=B0=
=E5=88=86=E8=A7=A3</p><p>=E6=AF=8F=E4=B8=80=E4=B8=AA=E6=95=B0=E9=83=
=BD=E5=8F=AF=E4=BB=A5=E5=88=86=E8=A7=A3=E6=88=90=E7=B4=A0=E6=95=B0=
=E7=9A=84=E4=B9=98=E7=A7=AF=EF=BC=8C=E4=BE=8B=E5=A6=82 84 =3D 22<=
span class=3D"Apple-converted-space">&nbsp;</span>* 31<span class=
=3D"Apple-converted-space">&nbsp;</span>* 50<span class=3D"Apple-=
converted-space">&nbsp;</span>* 71<span class=3D"Apple-converted-=
space">&nbsp;</span>* 110<span class=3D"Apple-converted-space">&n=
bsp;</span>* 130<span class=3D"Apple-converted-space">&nbsp;</spa=
n>* 170<span class=3D"Apple-converted-space">&nbsp;</span>* =E2=80=
=A6</p><p>=E6=95=B4=E9=99=A4</p><p>=E4=BB=A4 x =3D 2m0<span class=
=3D"Apple-converted-space">&nbsp;</span>* 3m1<span class=3D"Apple=
-converted-space">&nbsp;</span>* 5m2<span class=3D"Apple-converte=
d-space">&nbsp;</span>* 7m3<span class=3D"Apple-converted-space">=
&nbsp;</span>* 11m4<span class=3D"Apple-converted-space">&nbsp;</=
span>* =E2=80=A6=E4=BB=A4 y =3D 2n0<span class=3D"Apple-converted=
-space">&nbsp;</span>* 3n1<span class=3D"Apple-converted-space">&=
nbsp;</span>* 5n2<span class=3D"Apple-converted-space">&nbsp;</sp=
an>* 7n3<span class=3D"Apple-converted-space">&nbsp;</span>* 11n4=
<span class=3D"Apple-converted-space">&nbsp;</span>* =E2=80=A6</p=
><p>=E5=A6=82=E6=9E=9C x =E6=95=B4=E9=99=A4 y=EF=BC=88y mod x =3D=
=3D 0=EF=BC=89=EF=BC=8C=E5=88=99=E5=AF=B9=E4=BA=8E=E6=89=80=E6=9C=
=89 i=EF=BC=8Cmi &lt;=3D ni=E3=80=82</p><p>x =E5=92=8C y =E7=9A=84=
<span class=3D"Apple-converted-space">&nbsp;</span>=E6=9C=80=E5=A4=
=A7=E5=85=AC=E7=BA=A6=E6=95=B0<span class=3D"Apple-converted-spac=
e">&nbsp;</span>=E4=B8=BA=EF=BC=9Agcd(x,y) =3D 2min(m0,n0)<span c=
lass=3D"Apple-converted-space">&nbsp;</span>* 3min(m1,n1)<span cl=
ass=3D"Apple-converted-space">&nbsp;</span>* 5min(m2,n2)<span cla=
ss=3D"Apple-converted-space">&nbsp;</span>* ...</p><p>x =E5=92=8C=
 y =E7=9A=84<span class=3D"Apple-converted-space">&nbsp;</span>=E6=
=9C=80=E5=B0=8F=E5=85=AC=E5=80=8D=E6=95=B0<span class=3D"Apple-co=
nverted-space">&nbsp;</span>=E4=B8=BA=EF=BC=9Alcm(x,y) =3D 2max(m=
0,n0)<span class=3D"Apple-converted-space">&nbsp;</span>* 3max(m1=
,n1)<span class=3D"Apple-converted-space">&nbsp;</span>* 5max(m2,=
n2)<span class=3D"Apple-converted-space">&nbsp;</span>* ...</p><p=
>=E7=94=9F=E6=88=90=E7=B4=A0=E6=95=B0=E5=BA=8F=E5=88=97</p><p><a=20=
href=3D"https://leetcode.com/problems/count-primes/description/"=20=
target=3D"_blank">Leetcode : 204. Count Primes (Easy)</a></p><p>=E5=
=9F=83=E6=8B=89=E6=89=98=E6=96=AF=E7=89=B9=E5=B0=BC=E7=AD=9B=E6=B3=
=95=E5=9C=A8=E6=AF=8F=E6=AC=A1=E6=89=BE=E5=88=B0=E4=B8=80=E4=B8=AA=
=E7=B4=A0=E6=95=B0=E6=97=B6=EF=BC=8C=E5=B0=86=E8=83=BD=E8=A2=AB=E7=
=B4=A0=E6=95=B0=E6=95=B4=E9=99=A4=E7=9A=84=E6=95=B0=E6=8E=92=E9=99=
=A4=E6=8E=89=E3=80=82</p><div class=3D"highlight highlight-source=
-java"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-=
k">int</span> countPrimes(<span class=3D"pl-k">int</span> n) {=0A=
    <span class=3D"pl-k">boolean</span>[] notPrimes <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"=
pl-smi">boolean</span>[n <span class=3D"pl-k">+</span> <span clas=
s=3D"pl-c1">1</span>];=0A    <span class=3D"pl-k">int</span> cnt=20=
<span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A=
    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</spa=
n> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">2</spa=
n>; i <span class=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">+=
+</span>){=0A        <span class=3D"pl-k">if</span>(notPrimes[i])=
 <span class=3D"pl-k">continue</span>;=0A        cnt<span class=3D=
"pl-k">++</span>;=0A        <span class=3D"pl-c"><span class=3D"p=
l-c">//</span> =E4=BB=8E i * i =E5=BC=80=E5=A7=8B=EF=BC=8C=E5=9B=A0=
=E4=B8=BA=E5=A6=82=E6=9E=9C k &lt; i=EF=BC=8C=E9=82=A3=E4=B9=88 k=
 * i =E5=9C=A8=E4=B9=8B=E5=89=8D=E5=B0=B1=E5=B7=B2=E7=BB=8F=E8=A2=
=AB=E5=8E=BB=E9=99=A4=E8=BF=87=E4=BA=86</span>=0A        <span cl=
ass=3D"pl-k">for</span>(<span class=3D"pl-k">long</span> j <span=20=
class=3D"pl-k">=3D</span> (<span class=3D"pl-k">long</span>) i <s=
pan class=3D"pl-k">*</span> i; j <span class=3D"pl-k">&lt;</span>=
 n; j <span class=3D"pl-k">+=3D</span> i){=0A            notPrime=
s[(<span class=3D"pl-k">int</span>) j] <span class=3D"pl-k">=3D</=
span> <span class=3D"pl-c1">true</span>;=0A        }=0A    }=0A =20=
  <span class=3D"pl-k">return</span> cnt;=0A}</pre></div><h3>=E6=9C=
=80=E5=A4=A7=E5=85=AC=E7=BA=A6=E6=95=B0</h3><div class=3D"highlig=
ht highlight-source-java"><pre><span class=3D"pl-k">int</span> gc=
d(<span class=3D"pl-k">int</span> a, <span class=3D"pl-k">int</sp=
an> b) {=0A    <span class=3D"pl-k">if</span> (b <span class=3D"p=
l-k">=3D=3D</span> <span class=3D"pl-c1">0</span>) <span class=3D=
"pl-k">return</span> a;=0A    <span class=3D"pl-k">return</span>=20=
gcd(b, a <span class=3D"pl-k">%</span> b);=0A}</pre></div><p>=E6=9C=
=80=E5=A4=A7=E5=85=AC=E5=80=8D=E6=95=B0=E4=B8=BA=E4=B8=A4=E6=95=B0=
=E7=9A=84=E4=B9=98=E7=A7=AF=E9=99=A4=E4=BB=A5=E6=9C=80=E5=A4=A7=E5=
=85=AC=E7=BA=A6=E6=95=B0=E3=80=82</p><div class=3D"highlight high=
light-source-java"><pre><span class=3D"pl-k">int</span> lcm(<span=
 class=3D"pl-k">int</span> a, <span class=3D"pl-k">int</span> b){=
=0A    <span class=3D"pl-k">return</span> a <span class=3D"pl-k">=
*</span> b <span class=3D"pl-k">/</span> gcd(a, b);=0A}</pre></di=
v><p>=E5=AF=B9=E4=BA=8E=E6=9C=80=E5=A4=A7=E5=85=AC=E7=BA=A6=E6=95=
=B0=E9=97=AE=E9=A2=98=EF=BC=8C=E5=9B=A0=E4=B8=BA=E9=9C=80=E8=A6=81=
=E8=AE=A1=E7=AE=97 a % b =EF=BC=8C=E8=80=8C=E8=BF=99=E4=B8=AA=E6=93=
=8D=E4=BD=9C=E6=98=AF=E6=AF=94=E8=BE=83=E8=80=97=E6=97=B6=E7=9A=84=
=EF=BC=8C=E5=8F=AF=E4=BB=A5=E4=BD=BF=E7=94=A8<span class=3D"Apple=
-converted-space">&nbsp;</span><a href=3D"https://github.com/CyC2=
018/InterviewNotes/blob/master/notes" target=3D"_blank">=E7=BC=96=
=E7=A8=8B=E4=B9=8B=E7=BE=8E=EF=BC=9A2.7</a><span class=3D"Apple-c=
onverted-space">&nbsp;</span>=E7=9A=84=E6=96=B9=E6=B3=95=EF=BC=8C=
=E5=88=A9=E7=94=A8=E5=87=8F=E6=B3=95=E5=92=8C=E7=A7=BB=E4=BD=8D=E6=
=93=8D=E4=BD=9C=E6=9D=A5=E6=9B=BF=E6=8D=A2=E5=AE=83=E3=80=82</p><=
p>=E5=AF=B9=E4=BA=8E a =E5=92=8C b =E7=9A=84=E6=9C=80=E5=A4=A7=E5=
=85=AC=E7=BA=A6=E6=95=B0 f(a, b)=EF=BC=8C=E6=9C=89=EF=BC=9A</p><p=
>1. =E5=A6=82=E6=9E=9C a =E5=92=8C b =E5=9D=87=E4=B8=BA=E5=81=B6=E6=
=95=B0=EF=BC=8Cf(a, b) =3D 2*f(a/2, b/2);2. =E5=A6=82=E6=9E=9C a=20=
=E6=98=AF=E5=81=B6=E6=95=B0 b =E6=98=AF=E5=A5=87=E6=95=B0=EF=BC=8C=
f(a, b) =3D f(a/2, b);3. =E5=A6=82=E6=9E=9C b =E6=98=AF=E5=81=B6=E6=
=95=B0 a =E6=98=AF=E5=A5=87=E6=95=B0=EF=BC=8Cf(a, b) =3D f(a, b/2=
);4. =E5=A6=82=E6=9E=9C a =E5=92=8C b =E5=9D=87=E4=B8=BA=E5=A5=87=
=E6=95=B0=EF=BC=8Cf(a, b) =3D f(a, a-b);</p><p>=E4=B9=98 2 =E5=92=
=8C=E9=99=A4 2 =E9=83=BD=E5=8F=AF=E4=BB=A5=E8=BD=AC=E6=8D=A2=E4=B8=
=BA=E7=A7=BB=E4=BD=8D=E6=93=8D=E4=BD=9C=E3=80=82</p><h3>=E8=BF=9B=
=E5=88=B6=E8=BD=AC=E6=8D=A2</h3><p>Java =E4=B8=AD static String t=
oString(int num, int radix) =E5=8F=AF=E4=BB=A5=E5=B0=86=E4=B8=80=E4=
=B8=AA=E6=95=B4=E6=95=B0=E8=A3=85=E6=8D=A2=E4=B8=BA redix =E8=BF=9B=
=E5=88=B6=E8=A1=A8=E7=A4=BA=E7=9A=84=E5=AD=97=E7=AC=A6=E4=B8=B2=E3=
=80=82</p><p>7 =E8=BF=9B=E5=88=B6</p><p><a href=3D"https://leetco=
de.com/problems/base-7/description/" target=3D"_blank">Leetcode :=
 504. Base 7 (Easy)</a></p><div class=3D"highlight highlight-sour=
ce-java"><pre><span class=3D"pl-k">public</span> <span class=3D"p=
l-smi">String</span> convertToBase7(<span class=3D"pl-k">int</spa=
n> num) {=0A    <span class=3D"pl-k">if</span> (num <span class=3D=
"pl-k">&lt;</span> <span class=3D"pl-c1">0</span>) {=0A        <s=
pan class=3D"pl-k">return</span> <span class=3D"pl-s"><span class=
=3D"pl-pds">'</span>-<span class=3D"pl-pds">'</span></span> <span=
 class=3D"pl-k">+</span> convertToBase7(<span class=3D"pl-k">-</s=
pan>num);=0A    }=0A    <span class=3D"pl-k">if</span> (num <span=
 class=3D"pl-k">&lt;</span> <span class=3D"pl-c1">7</span>) {=0A=20=
       <span class=3D"pl-k">return</span> num <span class=3D"pl-k=
">+</span> <span class=3D"pl-s"><span class=3D"pl-pds">"</span><s=
pan class=3D"pl-pds">"</span></span>;=0A    }=0A    <span class=3D=
"pl-k">return</span> convertToBase7(num <span class=3D"pl-k">/</s=
pan> <span class=3D"pl-c1">7</span>) <span class=3D"pl-k">+</span=
> num <span class=3D"pl-k">%</span> <span class=3D"pl-c1">7</span=
>;=0A}</pre></div><p>16 =E8=BF=9B=E5=88=B6</p><p><a href=3D"https=
://leetcode.com/problems/convert-a-number-to-hexadecimal/descript=
ion/" target=3D"_blank">Leetcode : 405. Convert a Number to Hexad=
ecimal (Easy)</a></p><div class=3D"highlight highlight-source-jav=
a"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-smi"=
>String</span> toHex(<span class=3D"pl-k">int</span> num) {=0A  =20=
 <span class=3D"pl-k">char</span>[] map <span class=3D"pl-k">=3D<=
/span> {<span class=3D"pl-s"><span class=3D"pl-pds">'</span>0<spa=
n class=3D"pl-pds">'</span></span>,<span class=3D"pl-s"><span cla=
ss=3D"pl-pds">'</span>1<span class=3D"pl-pds">'</span></span>,<sp=
an class=3D"pl-s"><span class=3D"pl-pds">'</span>2<span class=3D"=
pl-pds">'</span></span>,<span class=3D"pl-s"><span class=3D"pl-pd=
s">'</span>3<span class=3D"pl-pds">'</span></span>,<span class=3D=
"pl-s"><span class=3D"pl-pds">'</span>4<span class=3D"pl-pds">'</=
span></span>,<span class=3D"pl-s"><span class=3D"pl-pds">'</span>=
5<span class=3D"pl-pds">'</span></span>,<span class=3D"pl-s"><spa=
n class=3D"pl-pds">'</span>6<span class=3D"pl-pds">'</span></span=
>,<span class=3D"pl-s"><span class=3D"pl-pds">'</span>7<span clas=
s=3D"pl-pds">'</span></span>,<span class=3D"pl-s"><span class=3D"=
pl-pds">'</span>8<span class=3D"pl-pds">'</span></span>,<span cla=
ss=3D"pl-s"><span class=3D"pl-pds">'</span>9<span class=3D"pl-pds=
">'</span></span>,<span class=3D"pl-s"><span class=3D"pl-pds">'</=
span>a<span class=3D"pl-pds">'</span></span>,<span class=3D"pl-s"=
><span class=3D"pl-pds">'</span>b<span class=3D"pl-pds">'</span><=
/span>,<span class=3D"pl-s"><span class=3D"pl-pds">'</span>c<span=
 class=3D"pl-pds">'</span></span>,<span class=3D"pl-s"><span clas=
s=3D"pl-pds">'</span>d<span class=3D"pl-pds">'</span></span>,<spa=
n class=3D"pl-s"><span class=3D"pl-pds">'</span>e<span class=3D"p=
l-pds">'</span></span>,<span class=3D"pl-s"><span class=3D"pl-pds=
">'</span>f<span class=3D"pl-pds">'</span></span>};=0A    <span c=
lass=3D"pl-k">if</span>(num <span class=3D"pl-k">=3D=3D</span> <s=
pan class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span>=20=
<span class=3D"pl-s"><span class=3D"pl-pds">"</span>0<span class=3D=
"pl-pds">"</span></span>;=0A    <span class=3D"pl-smi">String</sp=
an> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-s"><spa=
n class=3D"pl-pds">"</span><span class=3D"pl-pds">"</span></span>=
;=0A    <span class=3D"pl-k">while</span>(num <span class=3D"pl-k=
">!=3D</span> <span class=3D"pl-c1">0</span>){=0A        ret <spa=
n class=3D"pl-k">=3D</span> map[(num <span class=3D"pl-k">&amp;</=
span> <span class=3D"pl-c1">0b1111</span>)] <span class=3D"pl-k">=
+</span> ret;=0A        num <span class=3D"pl-k">&gt;&gt;&gt;</sp=
an><span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">4</span>=
;=0A    }=0A    <span class=3D"pl-k">return</span> ret;=0A}</pre>=
</div><h3>=E9=98=B6=E4=B9=98</h3><p>=E7=BB=9F=E8=AE=A1=E9=98=B6=E4=
=B9=98=E5=B0=BE=E9=83=A8=E6=9C=89=E5=A4=9A=E5=B0=91=E4=B8=AA 0</p=
><p><a href=3D"https://leetcode.com/problems/factorial-trailing-z=
eroes/description/" target=3D"_blank">Leetcode : 172. Factorial T=
railing Zeroes (Easy)</a></p><p>=E5=B0=BE=E9=83=A8=E7=9A=84 0 =E7=
=94=B1 2 * 5 =E5=BE=97=E6=9D=A5=EF=BC=8C2 =E7=9A=84=E6=95=B0=E9=87=
=8F=E6=98=8E=E6=98=BE=E5=A4=9A=E4=BA=8E 5 =E7=9A=84=E6=95=B0=E9=87=
=8F=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=8F=AA=E8=A6=81=E7=BB=9F=E8=AE=A1=
=E6=9C=89=E5=A4=9A=E5=B0=91=E4=B8=AA 5 =E5=8D=B3=E5=8F=AF=E3=80=82=
</p><p>=E5=AF=B9=E4=BA=8E=E4=B8=80=E4=B8=AA=E6=95=B0 N=EF=BC=8C=E5=
=AE=83=E6=89=80=E5=8C=85=E5=90=AB 5 =E7=9A=84=E4=B8=AA=E6=95=B0=E4=
=B8=BA=EF=BC=9AN/5 + N/52<span class=3D"Apple-converted-space">&n=
bsp;</span>+ N/53<span class=3D"Apple-converted-space">&nbsp;</sp=
an>+ ...=EF=BC=8C=E5=85=B6=E4=B8=AD N/5 =E8=A1=A8=E7=A4=BA=E4=B8=8D=
=E5=A4=A7=E4=BA=8E N =E7=9A=84=E6=95=B0=E4=B8=AD 5 =E7=9A=84=E5=80=
=8D=E6=95=B0=E8=B4=A1=E7=8C=AE=E4=B8=80=E4=B8=AA 5=EF=BC=8CN/52<s=
pan class=3D"Apple-converted-space">&nbsp;</span>=E8=A1=A8=E7=A4=BA=
=E4=B8=8D=E5=A4=A7=E4=BA=8E N =E7=9A=84=E6=95=B0=E4=B8=AD 52<span=
 class=3D"Apple-converted-space">&nbsp;</span>=E7=9A=84=E5=80=8D=E6=
=95=B0=E5=86=8D=E8=B4=A1=E7=8C=AE=E4=B8=80=E4=B8=AA 5 ...=E3=80=82=
</p><div class=3D"highlight highlight-source-java"><pre><span cla=
ss=3D"pl-k">public</span> <span class=3D"pl-k">int</span> trailin=
gZeroes(<span class=3D"pl-k">int</span> n) {=0A    <span class=3D=
"pl-k">return</span> n <span class=3D"pl-k">=3D=3D</span> <span c=
lass=3D"pl-c1">0</span> <span class=3D"pl-k">?</span> <span class=
=3D"pl-c1">0</span> <span class=3D"pl-k">:</span> n <span class=3D=
"pl-k">/</span> <span class=3D"pl-c1">5</span> <span class=3D"pl-=
k">+</span> trailingZeroes(n <span class=3D"pl-k">/</span> <span=20=
class=3D"pl-c1">5</span>);=0A}</pre></div><p>=E5=A6=82=E6=9E=9C=E7=
=BB=9F=E8=AE=A1=E7=9A=84=E6=98=AF N! =E7=9A=84=E4=BA=8C=E8=BF=9B=E5=
=88=B6=E8=A1=A8=E7=A4=BA=E4=B8=AD=E6=9C=80=E4=BD=8E=E4=BD=8D 1 =E7=
=9A=84=E4=BD=8D=E7=BD=AE=EF=BC=8C=E5=8F=AA=E8=A6=81=E7=BB=9F=E8=AE=
=A1=E6=9C=89=E5=A4=9A=E5=B0=91=E4=B8=AA 2 =E5=8D=B3=E5=8F=AF=EF=BC=
=8C=E8=AF=A5=E9=A2=98=E7=9B=AE=E5=87=BA=E8=87=AA<span class=3D"Ap=
ple-converted-space">&nbsp;</span><a href=3D"https://github.com/C=
yC2018/InterviewNotes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A=
7%A3.md#" target=3D"_blank">=E7=BC=96=E7=A8=8B=E4=B9=8B=E7=BE=8E=EF=
=BC=9A2.2</a><span class=3D"Apple-converted-space">&nbsp;</span>=E3=
=80=82=E5=92=8C=E6=B1=82=E8=A7=A3=E6=9C=89=E5=A4=9A=E5=B0=91=E4=B8=
=AA 5 =E4=B8=80=E6=A0=B7=EF=BC=8C2 =E7=9A=84=E4=B8=AA=E6=95=B0=E4=
=B8=BA N/2 + N/22<span class=3D"Apple-converted-space">&nbsp;</sp=
an>+ N/23<span class=3D"Apple-converted-space">&nbsp;</span>+ ...=
</p><h3>=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=8A=A0=E6=B3=95=E5=87=8F=E6=
=B3=95</h3><p>=E4=BA=8C=E8=BF=9B=E5=88=B6=E5=8A=A0=E6=B3=95</p><p=
><a href=3D"https://leetcode.com/problems/add-binary/description/=
" target=3D"_blank">Leetcode : 67. Add Binary (Easy)</a></p><div=20=
class=3D"highlight highlight-source-java"><pre><span class=3D"pl-=
k">public</span> <span class=3D"pl-smi">String</span> addBinary(<=
span class=3D"pl-smi">String</span> a, <span class=3D"pl-smi">Str=
ing</span> b) {=0A    <span class=3D"pl-k">int</span> i <span cla=
ss=3D"pl-k">=3D</span> a<span class=3D"pl-k">.</span>length() <sp=
an class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>, j <spa=
n class=3D"pl-k">=3D</span> b<span class=3D"pl-k">.</span>length(=
) <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>, c=
arry <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</spa=
n>;=0A    <span class=3D"pl-smi">String</span> str <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">"</=
span><span class=3D"pl-pds">"</span></span>;=0A    <span class=3D=
"pl-k">while</span>(i <span class=3D"pl-k">&gt;=3D</span> <span c=
lass=3D"pl-c1">0</span> <span class=3D"pl-k">||</span> j <span cl=
ass=3D"pl-k">&gt;=3D</span> <span class=3D"pl-c1">0</span>){=0A =20=
      <span class=3D"pl-k">if</span>(i <span class=3D"pl-k">&gt;=3D=
</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;=
&amp;</span> a<span class=3D"pl-k">.</span>charAt(i<span class=3D=
"pl-k">--</span>) <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-s"><span class=3D"pl-pds">'</span>1<span class=3D"pl-pds">'</=
span></span>) carry<span class=3D"pl-k">++</span>;=0A        <spa=
n class=3D"pl-k">if</span>(j <span class=3D"pl-k">&gt;=3D</span>=20=
<span class=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;&amp;</s=
pan> b<span class=3D"pl-k">.</span>charAt(j<span class=3D"pl-k">-=
-</span>) <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-s"=
><span class=3D"pl-pds">'</span>1<span class=3D"pl-pds">'</span><=
/span>) carry<span class=3D"pl-k">++</span>;=0A        str <span=20=
class=3D"pl-k">=3D</span> (carry <span class=3D"pl-k">%</span> <s=
pan class=3D"pl-c1">2</span>) <span class=3D"pl-k">+</span> str;=0A=
        carry <span class=3D"pl-k">/=3D</span> <span class=3D"pl-=
c1">2</span>;=0A    }=0A    <span class=3D"pl-k">if</span>(carry=20=
<span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">1</span>=
) str <span class=3D"pl-k">=3D</span> <span class=3D"pl-s"><span=20=
class=3D"pl-pds">"</span>1<span class=3D"pl-pds">"</span></span>=20=
<span class=3D"pl-k">+</span> str;=0A    <span class=3D"pl-k">ret=
urn</span> str;=0A}</pre></div><p>=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=8A=
=A0=E6=B3=95</p><p><a href=3D"https://leetcode.com/problems/add-s=
trings/description/" target=3D"_blank">Leetcode : 415. Add String=
s (Easy)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E5=
=AD=97=E7=AC=A6=E4=B8=B2=E7=9A=84=E5=80=BC=E4=B8=BA=E9=9D=9E=E8=B4=
=9F=E6=95=B4=E6=95=B0</p><div class=3D"highlight highlight-source=
-java"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-=
smi">String</span> addStrings(<span class=3D"pl-smi">String</span=
> num1, <span class=3D"pl-smi">String</span> num2) {=0A    <span=20=
class=3D"pl-smi">StringBuilder</span> sb <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">St=
ringBuilder</span>();=0A    <span class=3D"pl-k">int</span> carry=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A=
    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</spa=
n> i <span class=3D"pl-k">=3D</span> num1<span class=3D"pl-k">.</=
span>length() <span class=3D"pl-k">-</span> <span class=3D"pl-c1"=
>1</span>, j <span class=3D"pl-k">=3D</span> num2<span class=3D"p=
l-k">.</span>length() <span class=3D"pl-k">-</span> <span class=3D=
"pl-c1">1</span>; i <span class=3D"pl-k">&gt;=3D</span> <span cla=
ss=3D"pl-c1">0</span> <span class=3D"pl-k">||</span> j <span clas=
s=3D"pl-k">&gt;=3D</span> <span class=3D"pl-c1">0</span> <span cl=
ass=3D"pl-k">||</span> carry <span class=3D"pl-k">=3D=3D</span> <=
span class=3D"pl-c1">1</span>; i<span class=3D"pl-k">--</span>, j=
<span class=3D"pl-k">--</span>){=0A        <span class=3D"pl-k">i=
nt</span> x <span class=3D"pl-k">=3D</span> i <span class=3D"pl-k=
">&lt;</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k"=
>?</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">:</=
span> num1<span class=3D"pl-k">.</span>charAt(i) <span class=3D"p=
l-k">-</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</span=
>0<span class=3D"pl-pds">'</span></span>;=0A        <span class=3D=
"pl-k">int</span> y <span class=3D"pl-k">=3D</span> j <span class=
=3D"pl-k">&lt;</span> <span class=3D"pl-c1">0</span> <span class=3D=
"pl-k">?</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-=
k">:</span> num2<span class=3D"pl-k">.</span>charAt(j) <span clas=
s=3D"pl-k">-</span> <span class=3D"pl-s"><span class=3D"pl-pds">'=
</span>0<span class=3D"pl-pds">'</span></span>;=0A        sb<span=
 class=3D"pl-k">.</span>append((x <span class=3D"pl-k">+</span> y=
 <span class=3D"pl-k">+</span> carry) <span class=3D"pl-k">%</spa=
n> <span class=3D"pl-c1">10</span>);=0A        carry <span class=3D=
"pl-k">=3D</span> (x <span class=3D"pl-k">+</span> y <span class=3D=
"pl-k">+</span> carry) <span class=3D"pl-k">/</span> <span class=3D=
"pl-c1">10</span>;=0A    }=0A    <span class=3D"pl-k">return</spa=
n> sb<span class=3D"pl-k">.</span>reverse()<span class=3D"pl-k">.=
</span>toString();=0A}</pre></div><h3>=E7=9B=B8=E9=81=87=E9=97=AE=
=E9=A2=98</h3><p>=E6=94=B9=E5=8F=98=E6=95=B0=E7=BB=84=E5=85=83=E7=
=B4=A0=E4=BD=BF=E6=89=80=E6=9C=89=E7=9A=84=E6=95=B0=E7=BB=84=E5=85=
=83=E7=B4=A0=E9=83=BD=E7=9B=B8=E7=AD=89</p><p><a href=3D"https://=
leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/de=
scription/" target=3D"_blank">Leetcode : 462. Minimum Moves to Eq=
ual Array Elements II (Medium)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=
=8F=E8=BF=B0=EF=BC=9A=E6=AF=8F=E6=AC=A1=E5=8F=AF=E4=BB=A5=E5=AF=B9=
=E4=B8=80=E4=B8=AA=E6=95=B0=E7=BB=84=E5=85=83=E7=B4=A0=E5=8A=A0=E4=
=B8=80=E6=88=96=E8=80=85=E5=87=8F=E4=B8=80=EF=BC=8C=E6=B1=82=E6=9C=
=80=E5=B0=8F=E7=9A=84=E6=94=B9=E5=8F=98=E6=AC=A1=E6=95=B0=E3=80=82=
</p><p>=E8=BF=99=E6=98=AF=E4=B8=AA=E5=85=B8=E5=9E=8B=E7=9A=84=E7=9B=
=B8=E9=81=87=E9=97=AE=E9=A2=98=EF=BC=8C=E7=A7=BB=E5=8A=A8=E8=B7=9D=
=E7=A6=BB=E6=9C=80=E5=B0=8F=E7=9A=84=E6=96=B9=E5=BC=8F=E6=98=AF=E6=
=89=80=E6=9C=89=E5=85=83=E7=B4=A0=E9=83=BD=E7=A7=BB=E5=8A=A8=E5=88=
=B0=E4=B8=AD=E4=BD=8D=E6=95=B0=E3=80=82=E7=90=86=E7=94=B1=E5=A6=82=
=E4=B8=8B=EF=BC=9A</p><p>=E8=AE=BE m =E4=B8=BA=E4=B8=AD=E4=BD=8D=E6=
=95=B0=E3=80=82a =E5=92=8C b =E6=98=AF m =E4=B8=A4=E8=BE=B9=E7=9A=
=84=E4=B8=A4=E4=B8=AA=E5=85=83=E7=B4=A0=EF=BC=8C=E4=B8=94 b &gt;=20=
a=E3=80=82=E8=A6=81=E4=BD=BF a =E5=92=8C b =E7=9B=B8=E7=AD=89=EF=BC=
=8C=E5=AE=83=E4=BB=AC=E6=80=BB=E5=85=B1=E7=A7=BB=E5=8A=A8=E7=9A=84=
=E6=AC=A1=E6=95=B0=E4=B8=BA b - a=EF=BC=8C=E8=BF=99=E4=B8=AA=E5=80=
=BC=E7=AD=89=E4=BA=8E (b - m) + (m - a)=EF=BC=8C=E4=B9=9F=E5=B0=B1=
=E6=98=AF=E6=8A=8A=E8=BF=99=E4=B8=A4=E4=B8=AA=E6=95=B0=E7=A7=BB=E5=
=8A=A8=E5=88=B0=E4=B8=AD=E4=BD=8D=E6=95=B0=E7=9A=84=E7=A7=BB=E5=8A=
=A8=E6=AC=A1=E6=95=B0=E3=80=82</p><p>=E8=AE=BE=E6=95=B0=E7=BB=84=E9=
=95=BF=E5=BA=A6=E4=B8=BA N=EF=BC=8C=E5=88=99=E5=8F=AF=E4=BB=A5=E6=
=89=BE=E5=88=B0 N/2 =E5=AF=B9 a =E5=92=8C b =E7=9A=84=E7=BB=84=E5=
=90=88=EF=BC=8C=E4=BD=BF=E5=AE=83=E4=BB=AC=E9=83=BD=E7=A7=BB=E5=8A=
=A8=E5=88=B0 m =E7=9A=84=E4=BD=8D=E7=BD=AE=E3=80=82</p><p>=E8=A7=A3=
=E6=B3=95 1</p><p>=E5=85=88=E6=8E=92=E5=BA=8F=EF=BC=8C=E6=97=B6=E9=
=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=EF=BC=9AO(NlgN)</p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">publi=
c</span> <span class=3D"pl-k">int</span> minMoves2(<span class=3D=
"pl-k">int</span>[] nums) {=0A    <span class=3D"pl-smi">Arrays</=
span><span class=3D"pl-k">.</span>sort(nums);=0A    <span class=3D=
"pl-k">int</span> ret <span class=3D"pl-k">=3D</span> <span class=
=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</span> l <spa=
n class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>, h <sp=
an class=3D"pl-k">=3D</span> nums<span class=3D"pl-k">.</span>len=
gth <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>;=
=0A    <span class=3D"pl-k">while</span>(l <span class=3D"pl-k">&=
lt;=3D</span> h) {=0A        ret <span class=3D"pl-k">+=3D</span>=
 nums[h] <span class=3D"pl-k">-</span> nums[l];=0A        l<span=20=
class=3D"pl-k">++</span>;=0A        h<span class=3D"pl-k">--</spa=
n>;=0A    }=0A    <span class=3D"pl-k">return</span> ret;=0A}</pr=
e></div><p>=E8=A7=A3=E6=B3=95 2</p><p>=E4=BD=BF=E7=94=A8=E5=BF=AB=
=E9=80=9F=E6=8E=92=E5=BA=8F=E6=89=BE=E5=88=B0=E4=B8=AD=E4=BD=8D=E6=
=95=B0=EF=BC=8C=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6 O(N)=
</p><div class=3D"highlight highlight-source-java"><pre><span cla=
ss=3D"pl-k">public</span> <span class=3D"pl-k">int</span> minMove=
s2(<span class=3D"pl-k">int</span>[] nums) {=0A    <span class=3D=
"pl-k">int</span> ret <span class=3D"pl-k">=3D</span> <span class=
=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</span> n <spa=
n class=3D"pl-k">=3D</span> nums<span class=3D"pl-k">.</span>leng=
th;=0A    <span class=3D"pl-k">int</span> median <span class=3D"p=
l-k">=3D</span> quickSelect(nums, <span class=3D"pl-c1">0</span>,=
 n <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>,=20=
n <span class=3D"pl-k">/</span> <span class=3D"pl-c1">2</span> <s=
pan class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>);=0A =20=
  <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</span>=
 num <span class=3D"pl-k">:</span> nums) ret <span class=3D"pl-k"=
>+=3D</span> <span class=3D"pl-smi">Math</span><span class=3D"pl-=
k">.</span>abs(num <span class=3D"pl-k">-</span> median);=0A    <=
span class=3D"pl-k">return</span> ret;=0A}=0A=0A<span class=3D"pl=
-k">private</span> <span class=3D"pl-k">int</span> quickSelect(<s=
pan class=3D"pl-k">int</span>[] nums, <span class=3D"pl-k">int</s=
pan> start, <span class=3D"pl-k">int</span> end, <span class=3D"p=
l-k">int</span> k) {=0A    <span class=3D"pl-k">int</span> l <spa=
n class=3D"pl-k">=3D</span> start, r <span class=3D"pl-k">=3D</sp=
an> end, privot <span class=3D"pl-k">=3D</span> nums[(l <span cla=
ss=3D"pl-k">+</span> r) <span class=3D"pl-k">/</span> <span class=
=3D"pl-c1">2</span>];=0A    <span class=3D"pl-k">while</span>(l <=
span class=3D"pl-k">&lt;=3D</span> r) {=0A        <span class=3D"=
pl-k">while</span>(nums[l] <span class=3D"pl-k">&lt;</span> privo=
t) l<span class=3D"pl-k">++</span>;=0A        <span class=3D"pl-k=
">while</span>(nums[r] <span class=3D"pl-k">&gt;</span> privot) r=
<span class=3D"pl-k">--</span>;=0A        <span class=3D"pl-k">if=
</span>(l <span class=3D"pl-k">&gt;=3D</span> r) <span class=3D"p=
l-k">break</span>;=0A        swap(nums, l, r);=0A        l<span c=
lass=3D"pl-k">++</span>; r<span class=3D"pl-k">--</span>;=0A    }=
=0A    <span class=3D"pl-k">int</span> left <span class=3D"pl-k">=
=3D</span> l <span class=3D"pl-k">-</span> start <span class=3D"p=
l-k">+</span> <span class=3D"pl-c1">1</span>;=0A    <span class=3D=
"pl-k">if</span>(left <span class=3D"pl-k">&gt;</span> k) <span c=
lass=3D"pl-k">return</span> quickSelect(nums, start, l <span clas=
s=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>, k);=0A    <sp=
an class=3D"pl-k">if</span>(left <span class=3D"pl-k">=3D=3D</spa=
n> k <span class=3D"pl-k">&amp;&amp;</span> l <span class=3D"pl-k=
">=3D=3D</span> r) <span class=3D"pl-k">return</span> nums[l];=0A=
    <span class=3D"pl-k">int</span> right <span class=3D"pl-k">=3D=
</span> r <span class=3D"pl-k">-</span> start <span class=3D"pl-k=
">+</span> <span class=3D"pl-c1">1</span>;=0A    <span class=3D"p=
l-k">return</span> quickSelect(nums, r <span class=3D"pl-k">+</sp=
an> <span class=3D"pl-c1">1</span>, end, k <span class=3D"pl-k">-=
</span> right);=0A}=0A=0A<span class=3D"pl-k">private</span> <spa=
n class=3D"pl-k">void</span> swap(<span class=3D"pl-k">int</span>=
[] nums, <span class=3D"pl-k">int</span> i, <span class=3D"pl-k">=
int</span> j) {=0A    <span class=3D"pl-k">int</span> tmp <span c=
lass=3D"pl-k">=3D</span> nums[i]; nums[i] <span class=3D"pl-k">=3D=
</span> nums[j]; nums[j] <span class=3D"pl-k">=3D</span> tmp;=0A}=
</pre></div><h3>=E5=A4=9A=E6=95=B0=E6=8A=95=E7=A5=A8=E9=97=AE=E9=A2=
=98</h3><p>=E6=95=B0=E7=BB=84=E4=B8=AD=E5=87=BA=E7=8E=B0=E6=AC=A1=
=E6=95=B0=E5=A4=9A=E4=BA=8E n / 2 =E7=9A=84=E5=85=83=E7=B4=A0</p>=
<p><a href=3D"https://leetcode.com/problems/majority-element/desc=
ription/" target=3D"_blank">Leetcode : 169. Majority Element (Eas=
y)</a></p><p>=E5=85=88=E5=AF=B9=E6=95=B0=E7=BB=84=E6=8E=92=E5=BA=8F=
=EF=BC=8C=E6=9C=80=E4=B8=AD=E9=97=B4=E9=82=A3=E4=B8=AA=E6=95=B0=E5=
=87=BA=E7=8E=B0=E6=AC=A1=E6=95=B0=E4=B8=80=E5=AE=9A=E5=A4=9A=E4=BA=
=8E n / 2</p><div class=3D"highlight highlight-source-java"><pre>=
<span class=3D"pl-k">public</span> <span class=3D"pl-k">int</span=
> majorityElement(<span class=3D"pl-k">int</span>[] nums) {=0A  =20=
 <span class=3D"pl-smi">Arrays</span><span class=3D"pl-k">.</span=
>sort(nums);=0A    <span class=3D"pl-k">return</span> nums[nums<s=
pan class=3D"pl-k">.</span>length <span class=3D"pl-k">/</span> <=
span class=3D"pl-c1">2</span>];=0A}</pre></div><p>=E5=8F=AF=E4=BB=
=A5=E5=88=A9=E7=94=A8 Boyer-Moore Majority Vote Algorithm =E6=9D=A5=
=E8=A7=A3=E5=86=B3=E8=BF=99=E4=B8=AA=E9=97=AE=E9=A2=98=EF=BC=8C=E4=
=BD=BF=E5=BE=97=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E4=B8=
=BA O(n)=E3=80=82=E5=8F=AF=E4=BB=A5=E8=BF=99=E4=B9=88=E7=90=86=E8=
=A7=A3=E8=AF=A5=E7=AE=97=E6=B3=95=EF=BC=9A=E4=BD=BF=E7=94=A8 cnt=20=
=E6=9D=A5=E7=BB=9F=E8=AE=A1=E4=B8=80=E4=B8=AA=E5=85=83=E7=B4=A0=E5=
=87=BA=E7=8E=B0=E7=9A=84=E6=AC=A1=E6=95=B0=EF=BC=8C=E5=BD=93=E9=81=
=8D=E5=8E=86=E5=88=B0=E7=9A=84=E5=85=83=E7=B4=A0=E5=92=8C=E7=BB=9F=
=E8=AE=A1=E5=85=83=E7=B4=A0=E4=B8=8D=E6=83=B3=E7=AD=89=E6=97=B6=EF=
=BC=8C=E4=BB=A4 cnt--=E3=80=82=E5=A6=82=E6=9E=9C=E5=89=8D=E9=9D=A2=
=E6=9F=A5=E6=89=BE=E4=BA=86 i =E4=B8=AA=E5=85=83=E7=B4=A0=EF=BC=8C=
=E4=B8=94 cnt =3D=3D 0 =EF=BC=8C=E8=AF=B4=E6=98=8E=E5=89=8D i =E4=
=B8=AA=E5=85=83=E7=B4=A0=E6=B2=A1=E6=9C=89 majority=EF=BC=8C=E6=88=
=96=E8=80=85=E6=9C=89 majority=EF=BC=8C=E4=BD=86=E6=98=AF=E5=87=BA=
=E7=8E=B0=E7=9A=84=E6=AC=A1=E6=95=B0=E5=B0=91=E4=BA=8E i / 2 =EF=BC=
=8C=E5=9B=A0=E4=B8=BA=E5=A6=82=E6=9E=9C=E5=A4=9A=E4=BA=8E i / 2 =E7=
=9A=84=E8=AF=9D cnt =E5=B0=B1=E4=B8=80=E5=AE=9A=E4=B8=8D=E4=BC=9A=
=E4=B8=BA 0 =E3=80=82=E6=AD=A4=E6=97=B6=E5=89=A9=E4=B8=8B=E7=9A=84=
 n - i =E4=B8=AA=E5=85=83=E7=B4=A0=E4=B8=AD=EF=BC=8Cmajority =E7=9A=
=84=E6=95=B0=E7=9B=AE=E5=A4=9A=E4=BA=8E (n - i) / 2=EF=BC=8C=E5=9B=
=A0=E6=AD=A4=E7=BB=A7=E7=BB=AD=E6=9F=A5=E6=89=BE=E5=B0=B1=E8=83=BD=
=E6=89=BE=E5=87=BA majority=E3=80=82</p><div class=3D"highlight h=
ighlight-source-java"><pre><span class=3D"pl-k">public</span> <sp=
an class=3D"pl-k">int</span> majorityElement(<span class=3D"pl-k"=
>int</span>[] nums) {=0A    <span class=3D"pl-k">int</span> cnt <=
span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>, ma=
jority <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</s=
pan>;=0A    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">=
int</span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1=
">0</span>; i <span class=3D"pl-k">&lt;</span> nums<span class=3D=
"pl-k">.</span>length; i<span class=3D"pl-k">++</span>){=0A     =20=
  <span class=3D"pl-k">if</span>(cnt <span class=3D"pl-k">=3D=3D<=
/span> <span class=3D"pl-c1">0</span>) {=0A            majority <=
span class=3D"pl-k">=3D</span> nums[i];=0A            cnt<span cl=
ass=3D"pl-k">++</span>;=0A        }=0A        <span class=3D"pl-k=
">else</span> <span class=3D"pl-k">if</span>(majority <span class=
=3D"pl-k">=3D=3D</span> nums[i]) cnt<span class=3D"pl-k">++</span=
>;=0A        <span class=3D"pl-k">else</span> cnt<span class=3D"p=
l-k">--</span>;=0A    }=0A    <span class=3D"pl-k">return</span>=20=
majority;=0A}</pre></div><h3>=E5=85=B6=E5=AE=83</h3><p>=E5=B9=B3=E6=
=96=B9=E6=95=B0</p><p><a href=3D"https://leetcode.com/problems/va=
lid-perfect-square/description/" target=3D"_blank">Leetcode : 367=
. Valid Perfect Square (Easy)</a></p><p>=E5=B9=B3=E6=96=B9=E5=BA=8F=
=E5=88=97=EF=BC=9A1,4,9,16,..=E9=97=B4=E9=9A=94=EF=BC=9A3,5,7,...=
</p><p>=E9=97=B4=E9=9A=94=E4=B8=BA=E7=AD=89=E5=B7=AE=E6=95=B0=E5=88=
=97=EF=BC=8C=E4=BD=BF=E7=94=A8=E8=BF=99=E4=B8=AA=E7=89=B9=E6=80=A7=
=E5=8F=AF=E4=BB=A5=E5=BE=97=E5=88=B0=E4=BB=8E 1 =E5=BC=80=E5=A7=8B=
=E7=9A=84=E5=B9=B3=E6=96=B9=E5=BA=8F=E5=88=97=E3=80=82</p><div cl=
ass=3D"highlight highlight-source-java"><pre><span class=3D"pl-k"=
>public</span> <span class=3D"pl-k">boolean</span> isPerfectSquar=
e(<span class=3D"pl-k">int</span> num) {=0A    <span class=3D"pl-=
k">int</span> subNum <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">1</span>;=0A    <span class=3D"pl-k">while</span> (num <s=
pan class=3D"pl-k">&gt;</span> <span class=3D"pl-c1">0</span>) {=0A=
        num <span class=3D"pl-k">-=3D</span> subNum;=0A        su=
bNum <span class=3D"pl-k">+=3D</span> <span class=3D"pl-c1">2</sp=
an>;=0A    }=0A    <span class=3D"pl-k">return</span> num <span c=
lass=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>;=0A}</=
pre></div><p>3 =E7=9A=84 n =E6=AC=A1=E6=96=B9</p><p><a href=3D"ht=
tps://leetcode.com/problems/power-of-three/description/" target=3D=
"_blank">Leetcode : 326. Power of Three (Easy)</a></p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">publi=
c</span> <span class=3D"pl-k">boolean</span> isPowerOfThree(<span=
 class=3D"pl-k">int</span> n) {=0A    <span class=3D"pl-k">return=
</span> n <span class=3D"pl-k">&gt;</span> <span class=3D"pl-c1">=
0</span> <span class=3D"pl-k">&amp;&amp;</span> (<span class=3D"p=
l-c1">1162261467</span> <span class=3D"pl-k">%</span> n <span cla=
ss=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>);=0A}</p=
re></div><p>=E6=89=BE=E5=87=BA=E6=95=B0=E7=BB=84=E4=B8=AD=E7=9A=84=
=E4=B9=98=E7=A7=AF=E6=9C=80=E5=A4=A7=E7=9A=84=E4=B8=89=E4=B8=AA=E6=
=95=B0</p><p><a href=3D"https://leetcode.com/problems/maximum-pro=
duct-of-three-numbers/description/" target=3D"_blank">Leetcode :=20=
628. Maximum Product of Three Numbers (Easy)</a></p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">publi=
c</span> <span class=3D"pl-k">int</span> maximumProduct(<span cla=
ss=3D"pl-k">int</span>[] nums) {=0A    <span class=3D"pl-k">int</=
span> max1 <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi"=
>Integer</span><span class=3D"pl-c1"><span class=3D"pl-k">.</span=
>MIN_VALUE</span>, max2 <span class=3D"pl-k">=3D</span> <span cla=
ss=3D"pl-smi">Integer</span><span class=3D"pl-c1"><span class=3D"=
pl-k">.</span>MIN_VALUE</span>, max3 <span class=3D"pl-k">=3D</sp=
an> <span class=3D"pl-smi">Integer</span><span class=3D"pl-c1"><s=
pan class=3D"pl-k">.</span>MIN_VALUE</span>, min1 <span class=3D"=
pl-k">=3D</span> <span class=3D"pl-smi">Integer</span><span class=
=3D"pl-c1"><span class=3D"pl-k">.</span>MAX_VALUE</span>, min2 <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Integer</spa=
n><span class=3D"pl-c1"><span class=3D"pl-k">.</span>MAX_VALUE</s=
pan>;=0A    <span class=3D"pl-k">for</span> (<span class=3D"pl-k"=
>int</span> n <span class=3D"pl-k">:</span> nums) {=0A        <sp=
an class=3D"pl-k">if</span> (n <span class=3D"pl-k">&gt;</span> m=
ax1) {=0A            max3 <span class=3D"pl-k">=3D</span> max2;=0A=
            max2 <span class=3D"pl-k">=3D</span> max1;=0A       =20=
    max1 <span class=3D"pl-k">=3D</span> n;=0A        } <span cla=
ss=3D"pl-k">else</span> <span class=3D"pl-k">if</span> (n <span c=
lass=3D"pl-k">&gt;</span> max2) {=0A            max3 <span class=3D=
"pl-k">=3D</span> max2;=0A            max2 <span class=3D"pl-k">=3D=
</span> n;=0A        } <span class=3D"pl-k">else</span> <span cla=
ss=3D"pl-k">if</span> (n <span class=3D"pl-k">&gt;</span> max3) {=
=0A            max3 <span class=3D"pl-k">=3D</span> n;=0A       =20=
}=0A=0A        <span class=3D"pl-k">if</span> (n <span class=3D"p=
l-k">&lt;</span> min1) {=0A            min2 <span class=3D"pl-k">=
=3D</span> min1;=0A            min1 <span class=3D"pl-k">=3D</spa=
n> n;=0A        } <span class=3D"pl-k">else</span> <span class=3D=
"pl-k">if</span> (n <span class=3D"pl-k">&lt;</span> min2) {=0A =20=
          min2 <span class=3D"pl-k">=3D</span> n;=0A        }=0A=20=
   }=0A    <span class=3D"pl-k">return</span> <span class=3D"pl-s=
mi">Math</span><span class=3D"pl-k">.</span>max(max1<span class=3D=
"pl-k">*</span>max2<span class=3D"pl-k">*</span>max3, max1<span c=
lass=3D"pl-k">*</span>min1<span class=3D"pl-k">*</span>min2);=0A}=
</pre></div><p>=E4=B9=98=E7=A7=AF=E6=95=B0=E7=BB=84</p><p><a href=
=3D"https://leetcode.com/problems/product-of-array-except-self/de=
scription/" target=3D"_blank">Leetcode : 238. Product of Array Ex=
cept Self (Medium)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=
=EF=BC=9A=E7=BB=99=E5=AE=9A=E4=B8=80=E4=B8=AA=E6=95=B0=E7=BB=84=EF=
=BC=8C=E5=88=9B=E5=BB=BA=E4=B8=80=E4=B8=AA=E6=96=B0=E6=95=B0=E7=BB=
=84=EF=BC=8C=E6=96=B0=E6=95=B0=E7=BB=84=E7=9A=84=E6=AF=8F=E4=B8=AA=
=E5=85=83=E7=B4=A0=E4=B8=BA=E5=8E=9F=E5=A7=8B=E6=95=B0=E7=BB=84=E4=
=B8=AD=E9=99=A4=E4=BA=86=E8=AF=A5=E4=BD=8D=E7=BD=AE=E4=B8=8A=E7=9A=
=84=E5=85=83=E7=B4=A0=E4=B9=8B=E5=A4=96=E6=89=80=E6=9C=89=E5=85=83=
=E7=B4=A0=E7=9A=84=E4=B9=98=E7=A7=AF=E3=80=82</p><p>=E9=A2=98=E7=9B=
=AE=E8=A6=81=E6=B1=82=EF=BC=9A=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=
=E5=BA=A6=E4=B8=BA O(n)=EF=BC=8C=E5=B9=B6=E4=B8=94=E4=B8=8D=E8=83=
=BD=E4=BD=BF=E7=94=A8=E9=99=A4=E6=B3=95=E3=80=82</p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">publi=
c</span> <span class=3D"pl-k">int</span>[] productExceptSelf(<spa=
n class=3D"pl-k">int</span>[] nums) {=0A    <span class=3D"pl-k">=
int</span> n <span class=3D"pl-k">=3D</span> nums<span class=3D"p=
l-k">.</span>length;=0A    <span class=3D"pl-k">int</span>[] ret=20=
<span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <=
span class=3D"pl-smi">int</span>[n];=0A    ret[<span class=3D"pl-=
c1">0</span>] <span class=3D"pl-k">=3D</span> <span class=3D"pl-c=
1">1</span>;=0A    <span class=3D"pl-k">for</span>(<span class=3D=
"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">1</span>; i <span class=3D"pl-k">&lt;</span> n; i<span cl=
ass=3D"pl-k">++</span>) {=0A        ret[i] <span class=3D"pl-k">=3D=
</span> ret[i <span class=3D"pl-k">-</span> <span class=3D"pl-c1"=
>1</span>] <span class=3D"pl-k">*</span> nums[i <span class=3D"pl=
-k">-</span> <span class=3D"pl-c1">1</span>];=0A    }=0A    <span=
 class=3D"pl-k">int</span> right <span class=3D"pl-k">=3D</span>=20=
<span class=3D"pl-c1">1</span>;=0A    <span class=3D"pl-k">for</s=
pan>(<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</=
span> n <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</sp=
an>; i <span class=3D"pl-k">&gt;=3D</span> <span class=3D"pl-c1">=
0</span>; i<span class=3D"pl-k">--</span>) {=0A        ret[i] <sp=
an class=3D"pl-k">*=3D</span> right;=0A        right <span class=3D=
"pl-k">*=3D</span> nums[i];=0A    }=0A    <span class=3D"pl-k">re=
turn</span> ret;=0A}</pre></div><h1>=E6=95=B0=E6=8D=AE=E7=BB=93=E6=
=9E=84=E7=9B=B8=E5=85=B3</h1><h2>=E6=A0=88=E5=92=8C=E9=98=9F=E5=88=
=97</h2><p>=E7=94=A8=E6=A0=88=E5=AE=9E=E7=8E=B0=E9=98=9F=E5=88=97=
</p><p>=E4=B8=80=E4=B8=AA=E6=A0=88=E5=AE=9E=E7=8E=B0=EF=BC=9A</p>=
<div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">class</span>  <span class=3D"pl-en">MyQueue</span> {=0A  =20=
 <span class=3D"pl-k">private</span> <span class=3D"pl-k">Stack&l=
t;<span class=3D"pl-smi">Integer</span>&gt;</span> st <span class=
=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D=
"pl-smi">Stack</span>();=0A=0A    <span class=3D"pl-k">public</sp=
an> <span class=3D"pl-k">void</span> <span class=3D"pl-en">push</=
span>(<span class=3D"pl-k">int</span> <span class=3D"pl-v">x</spa=
n>) {=0A        <span class=3D"pl-k">Stack&lt;<span class=3D"pl-s=
mi">Integer</span>&gt;</span> temp <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">Stack</s=
pan>();=0A        <span class=3D"pl-k">while</span>(<span class=3D=
"pl-k">!</span>st<span class=3D"pl-k">.</span>isEmpty()){=0A    =20=
       temp<span class=3D"pl-k">.</span>push(st<span class=3D"pl-=
k">.</span>pop());=0A        }=0A        st<span class=3D"pl-k">.=
</span>push(x);=0A        <span class=3D"pl-k">while</span>(<span=
 class=3D"pl-k">!</span>temp<span class=3D"pl-k">.</span>isEmpty(=
)){=0A            st<span class=3D"pl-k">.</span>push(temp<span c=
lass=3D"pl-k">.</span>pop());=0A        }=0A    }=0A=0A    <span=20=
class=3D"pl-k">public</span> <span class=3D"pl-k">int</span> <spa=
n class=3D"pl-en">pop</span>() {=0A        <span class=3D"pl-k">r=
eturn</span> st<span class=3D"pl-k">.</span>pop();=0A    }=0A=0A=20=
   <span class=3D"pl-k">public</span> <span class=3D"pl-k">int</s=
pan> <span class=3D"pl-en">peek</span>() {=0A        <span class=3D=
"pl-k">return</span> st<span class=3D"pl-k">.</span>peek();=0A  =20=
 }=0A=0A    <span class=3D"pl-k">public</span> <span class=3D"pl-=
k">boolean</span> <span class=3D"pl-en">empty</span>() {=0A     =20=
  <span class=3D"pl-k">return</span> st<span class=3D"pl-k">.</sp=
an>isEmpty();=0A    }=0A}</pre></div><p>=E4=B8=A4=E4=B8=AA=E6=A0=88=
=E5=AE=9E=E7=8E=B0=EF=BC=9A</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">class</span>  <span class=3D=
"pl-en">MyQueue</span> {=0A    <span class=3D"pl-k">private</span=
> <span class=3D"pl-k">Stack&lt;<span class=3D"pl-smi">Integer</s=
pan>&gt;</span> in <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-k">new</span> <span class=3D"pl-smi">Stack</span>();=0A    <s=
pan class=3D"pl-k">private</span> <span class=3D"pl-k">Stack&lt;<=
span class=3D"pl-smi">Integer</span>&gt;</span> out <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"=
pl-smi">Stack</span>();=0A  =0A    <span class=3D"pl-k">public</s=
pan> <span class=3D"pl-k">void</span> <span class=3D"pl-en">push<=
/span>(<span class=3D"pl-k">int</span> <span class=3D"pl-v">x</sp=
an>) {=0A        in<span class=3D"pl-k">.</span>push(x);=0A    }=0A=
=0A    <span class=3D"pl-k">public</span> <span class=3D"pl-k">in=
t</span> <span class=3D"pl-en">pop</span>() {=0A        in2out();=
=0A        <span class=3D"pl-k">return</span> out<span class=3D"p=
l-k">.</span>pop();=0A    }=0A=0A    <span class=3D"pl-k">public<=
/span> <span class=3D"pl-k">int</span> <span class=3D"pl-en">peek=
</span>() {=0A        in2out();=0A        <span class=3D"pl-k">re=
turn</span> out<span class=3D"pl-k">.</span>peek();=0A    }=0A  =20=
 =0A    <span class=3D"pl-k">private</span> <span class=3D"pl-k">=
void</span> <span class=3D"pl-en">in2out</span>(){=0A        <spa=
n class=3D"pl-k">if</span>(out<span class=3D"pl-k">.</span>isEmpt=
y()){=0A            <span class=3D"pl-k">while</span>(<span class=
=3D"pl-k">!</span>in<span class=3D"pl-k">.</span>isEmpty()){=0A =20=
              out<span class=3D"pl-k">.</span>push(in<span class=3D=
"pl-k">.</span>pop());=0A            }=0A        }=0A    }=0A=0A=20=
   <span class=3D"pl-k">public</span> <span class=3D"pl-k">boolea=
n</span> <span class=3D"pl-en">empty</span>() {=0A        <span c=
lass=3D"pl-k">return</span> in<span class=3D"pl-k">.</span>isEmpt=
y() <span class=3D"pl-k">&amp;&amp;</span> out<span class=3D"pl-k=
">.</span>isEmpty();=0A    }=0A}</pre></div><p>=E7=94=A8=E9=98=9F=
=E5=88=97=E5=AE=9E=E7=8E=B0=E6=A0=88</p><p><a href=3D"https://lee=
tcode.com/problems/implement-stack-using-queues/description/" tar=
get=3D"_blank">Leetcode : 225. Implement Stack using Queues (Easy=
)</a></p><div class=3D"highlight highlight-source-java"><pre><spa=
n class=3D"pl-k">class</span> <span class=3D"pl-en">MyStack</span=
> {=0A    =0A    <span class=3D"pl-k">private</span> <span class=3D=
"pl-k">Queue&lt;<span class=3D"pl-smi">Integer</span>&gt;</span>=20=
queue;=0A=0A    <span class=3D"pl-k">public</span> <span class=3D=
"pl-en">MyStack</span>() {=0A        queue <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-k">new</span> <span class=3D"pl-k">Link=
edList&lt;&gt;</span>();=0A    }=0A    =0A    <span class=3D"pl-k=
">public</span> <span class=3D"pl-k">void</span> <span class=3D"p=
l-en">push</span>(<span class=3D"pl-k">int</span> <span class=3D"=
pl-v">x</span>) {=0A        queue<span class=3D"pl-k">.</span>add=
(x);=0A        <span class=3D"pl-k">for</span>(<span class=3D"pl-=
k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-c1">1</span>; i <span class=3D"pl-k">&lt;</span> queue<span clas=
s=3D"pl-k">.</span>size(); i<span class=3D"pl-k">++</span>){ <spa=
n class=3D"pl-c"><span class=3D"pl-c">//</span> =E7=BF=BB=E8=BD=AC=
</span>=0A            queue<span class=3D"pl-k">.</span>add(queue=
<span class=3D"pl-k">.</span>remove());=0A        }=0A    }=0A  =20=
 =0A    <span class=3D"pl-k">public</span> <span class=3D"pl-k">i=
nt</span> <span class=3D"pl-en">pop</span>() {=0A        <span cl=
ass=3D"pl-k">return</span> queue<span class=3D"pl-k">.</span>remo=
ve();=0A    }=0A    =0A    <span class=3D"pl-k">public</span> <sp=
an class=3D"pl-k">int</span> <span class=3D"pl-en">top</span>() {=
=0A        <span class=3D"pl-k">return</span> queue<span class=3D=
"pl-k">.</span>peek();=0A    }=0A    =0A    <span class=3D"pl-k">=
public</span> <span class=3D"pl-k">boolean</span> <span class=3D"=
pl-en">empty</span>() {=0A        <span class=3D"pl-k">return</sp=
an> queue<span class=3D"pl-k">.</span>isEmpty();=0A    }=0A}</pre=
></div><p>=E6=9C=80=E5=B0=8F=E5=80=BC=E6=A0=88</p><p><a href=3D"h=
ttps://leetcode.com/problems/min-stack/description/" target=3D"_b=
lank">Leetcode : 155. Min Stack (Easy)</a></p><p>=E7=94=A8=E4=B8=A4=
=E4=B8=AA=E6=A0=88=E5=AE=9E=E7=8E=B0=EF=BC=8C=E4=B8=80=E4=B8=AA=E5=
=AD=98=E5=82=A8=E6=95=B0=E6=8D=AE=EF=BC=8C=E4=B8=80=E4=B8=AA=E5=AD=
=98=E5=82=A8=E6=9C=80=E5=B0=8F=E5=80=BC=E3=80=82</p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">class=
</span> <span class=3D"pl-en">MinStack</span> {=0A    =0A    <spa=
n class=3D"pl-k">private</span> <span class=3D"pl-k">Stack&lt;<sp=
an class=3D"pl-smi">Integer</span>&gt;</span> dataStack;=0A    <s=
pan class=3D"pl-k">private</span> <span class=3D"pl-k">Stack&lt;<=
span class=3D"pl-smi">Integer</span>&gt;</span> minStack;=0A    <=
span class=3D"pl-k">private</span> <span class=3D"pl-k">int</span=
> min;=0A=0A    <span class=3D"pl-k">public</span> <span class=3D=
"pl-en">MinStack</span>() {=0A        dataStack <span class=3D"pl=
-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl-=
k">Stack&lt;&gt;</span>();=0A        minStack <span class=3D"pl-k=
">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl-k"=
>Stack&lt;&gt;</span>();=0A        min <span class=3D"pl-k">=3D</=
span> <span class=3D"pl-smi">Integer</span><span class=3D"pl-c1">=
<span class=3D"pl-k">.</span>MAX_VALUE</span>;=0A    }=0A    =0A=20=
   <span class=3D"pl-k">public</span> <span class=3D"pl-k">void</=
span> <span class=3D"pl-en">push</span>(<span class=3D"pl-k">int<=
/span> <span class=3D"pl-v">x</span>) {=0A        dataStack<span=20=
class=3D"pl-k">.</span>add(x);=0A        <span class=3D"pl-k">if<=
/span>(x <span class=3D"pl-k">&lt;</span> min) {=0A            mi=
n <span class=3D"pl-k">=3D</span> x;=0A        }=0A        minSta=
ck<span class=3D"pl-k">.</span>add(min);=0A    }=0A    =0A    <sp=
an class=3D"pl-k">public</span> <span class=3D"pl-k">void</span>=20=
<span class=3D"pl-en">pop</span>() {=0A        dataStack<span cla=
ss=3D"pl-k">.</span>pop();=0A        minStack<span class=3D"pl-k"=
>.</span>pop();=0A        <span class=3D"pl-k">if</span>(<span cl=
ass=3D"pl-k">!</span>minStack<span class=3D"pl-k">.</span>isEmpty=
()) {=0A            min <span class=3D"pl-k">=3D</span> minStack<=
span class=3D"pl-k">.</span>peek();=0A        } <span class=3D"pl=
-k">else</span>{=0A            min <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-smi">Integer</span><span class=3D"pl-c1"><spa=
n class=3D"pl-k">.</span>MAX_VALUE</span>;=0A        }=0A    }=0A=
    =0A    <span class=3D"pl-k">public</span> <span class=3D"pl-k=
">int</span> <span class=3D"pl-en">top</span>() {=0A        <span=
 class=3D"pl-k">return</span> dataStack<span class=3D"pl-k">.</sp=
an>peek();=0A    }=0A    =0A    <span class=3D"pl-k">public</span=
> <span class=3D"pl-k">int</span> <span class=3D"pl-en">getMin</s=
pan>() {=0A        <span class=3D"pl-k">return</span> min;=0A   =20=
}=0A}</pre></div><p>=E5=AF=B9=E4=BA=8E=E5=AE=9E=E7=8E=B0=E6=9C=80=
=E5=B0=8F=E5=80=BC=E9=98=9F=E5=88=97=E9=97=AE=E9=A2=98=EF=BC=8C=E5=
=8F=AF=E4=BB=A5=E5=85=88=E5=B0=86=E9=98=9F=E5=88=97=E4=BD=BF=E7=94=
=A8=E6=A0=88=E6=9D=A5=E5=AE=9E=E7=8E=B0=EF=BC=8C=E7=84=B6=E5=90=8E=
=E5=B0=B1=E5=B0=86=E9=97=AE=E9=A2=98=E8=BD=AC=E6=8D=A2=E4=B8=BA=E6=
=9C=80=E5=B0=8F=E5=80=BC=E6=A0=88=EF=BC=8C=E8=BF=99=E4=B8=AA=E9=97=
=AE=E9=A2=98=E5=87=BA=E7=8E=B0=E5=9C=A8 =E7=BC=96=E7=A8=8B=E4=B9=8B=
=E7=BE=8E=EF=BC=9A3.7=E3=80=82</p><p>=E7=94=A8=E6=A0=88=E5=AE=9E=E7=
=8E=B0=E6=8B=AC=E5=8F=B7=E5=8C=B9=E9=85=8D</p><p><a href=3D"https=
://leetcode.com/problems/valid-parentheses/description/" target=3D=
"_blank">Leetcode : 20. Valid Parentheses (Easy)</a></p><div clas=
s=3D"highlight highlight-text-html-basic"><pre>"()[]{}"=0A=0AOutp=
ut : true</pre></div><div class=3D"highlight highlight-source-jav=
a"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">b=
oolean</span> isValid(<span class=3D"pl-smi">String</span> s) {=0A=
    <span class=3D"pl-k">Stack&lt;<span class=3D"pl-smi">Characte=
r</span>&gt;</span> stack <span class=3D"pl-k">=3D</span> <span c=
lass=3D"pl-k">new</span> <span class=3D"pl-k">Stack&lt;&gt;</span=
>();=0A    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">i=
nt</span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1"=
>0</span>; i <span class=3D"pl-k">&lt;</span> s<span class=3D"pl-=
k">.</span>length(); i<span class=3D"pl-k">++</span>){=0A       =20=
<span class=3D"pl-k">char</span> c <span class=3D"pl-k">=3D</span=
> s<span class=3D"pl-k">.</span>charAt(i);=0A        <span class=3D=
"pl-k">if</span>(c <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-s"><span class=3D"pl-pds">'</span>(<span class=3D"pl-pds">=
'</span></span> <span class=3D"pl-k">||</span> c <span class=3D"p=
l-k">=3D=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">'<=
/span>{<span class=3D"pl-pds">'</span></span> <span class=3D"pl-k=
">||</span> c <span class=3D"pl-k">=3D=3D</span> <span class=3D"p=
l-s"><span class=3D"pl-pds">'</span>[<span class=3D"pl-pds">'</sp=
an></span>) stack<span class=3D"pl-k">.</span>push(c);=0A       =20=
<span class=3D"pl-k">else</span>{=0A            <span class=3D"pl=
-k">if</span>(stack<span class=3D"pl-k">.</span>isEmpty()) <span=20=
class=3D"pl-k">return</span> <span class=3D"pl-c1">false</span>;=0A=
            <span class=3D"pl-k">char</span> cStack <span class=3D=
"pl-k">=3D</span> stack<span class=3D"pl-k">.</span>pop();=0A   =20=
        <span class=3D"pl-k">if</span>(c <span class=3D"pl-k">=3D=
=3D</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</span>)<=
span class=3D"pl-pds">'</span></span> <span class=3D"pl-k">&amp;&=
amp;</span> cStack <span class=3D"pl-k">!=3D</span> <span class=3D=
"pl-s"><span class=3D"pl-pds">'</span>(<span class=3D"pl-pds">'</=
span></span> <span class=3D"pl-k">||</span>=0A              c <sp=
an class=3D"pl-k">=3D=3D</span> <span class=3D"pl-s"><span class=3D=
"pl-pds">'</span>]<span class=3D"pl-pds">'</span></span> <span cl=
ass=3D"pl-k">&amp;&amp;</span> cStack <span class=3D"pl-k">!=3D</=
span> <span class=3D"pl-s"><span class=3D"pl-pds">'</span>[<span=20=
class=3D"pl-pds">'</span></span> <span class=3D"pl-k">||</span>=0A=
              c <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-s"><span class=3D"pl-pds">'</span>}<span class=3D"pl-pds">'</=
span></span> <span class=3D"pl-k">&amp;&amp;</span> cStack <span=20=
class=3D"pl-k">!=3D</span> <span class=3D"pl-s"><span class=3D"pl=
-pds">'</span>{<span class=3D"pl-pds">'</span></span> ) {=0A    =20=
           <span class=3D"pl-k">return</span> <span class=3D"pl-c=
1">false</span>;=0A            }=0A        }=0A    }=0A    <span=20=
class=3D"pl-k">return</span> stack<span class=3D"pl-k">.</span>is=
Empty();=0A}</pre></div><p>=E6=95=B0=E7=BB=84=E4=B8=AD=E6=AF=94=E5=
=BD=93=E5=89=8D=E5=85=83=E7=B4=A0=E5=A4=A7=E7=9A=84=E4=B8=8B=E4=B8=
=80=E4=B8=AA=E6=95=B0=E7=BB=84=E5=85=83=E7=B4=A0=E7=9A=84=E8=B7=9D=
=E7=A6=BB</p><div class=3D"highlight highlight-text-html-basic"><=
pre>Input: [73, 74, 75, 71, 69, 72, 76, 73]=0AOutput: [1, 1, 4, 2=
, 1, 1, 0, 0]</pre></div><p><a href=3D"https://leetcode.com/probl=
ems/daily-temperatures/description/" target=3D"_blank">Leetcode :=
 739. Daily Temperatures (Medium)</a></p><p>=E4=BD=BF=E7=94=A8=E6=
=A0=88=E6=9D=A5=E5=AD=98=E5=82=A8=E8=BF=98=E6=9C=AA=E8=AE=A1=E7=AE=
=97=E7=9A=84=E5=85=83=E7=B4=A0=E3=80=82=E5=8F=AF=E4=BB=A5=E4=BF=9D=
=E8=AF=81=E4=BB=8E=E6=A0=88=E9=A1=B6=E5=90=91=E4=B8=8B=E5=85=83=E7=
=B4=A0=E9=80=92=E5=A2=9E=EF=BC=8C=E5=90=A6=E5=88=99=E4=B8=8A=E9=9D=
=A2=E6=9C=89=E4=B8=80=E4=B8=AA=E6=AF=94=E4=B8=8B=E9=9D=A2=E6=9F=90=
=E4=B8=AA=E5=85=83=E7=B4=A0=E5=A4=A7=E7=9A=84=E5=85=83=E7=B4=A0=E8=
=BF=9B=E5=85=A5=E6=A0=88=E4=B8=AD=EF=BC=8C=E4=B8=8B=E9=9D=A2=E9=82=
=A3=E4=B8=AA=E5=85=83=E7=B4=A0=E5=B7=B2=E7=BB=8F=E6=89=BE=E5=88=B0=
=E6=AF=94=E5=AE=83=E5=A4=A7=E7=9A=84=E5=85=83=E7=B4=A0=EF=BC=8C=E5=
=9B=A0=E6=AD=A4=E4=BC=9A=E5=87=BA=E6=A0=88=E3=80=82</p><div class=
=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">pu=
blic</span> <span class=3D"pl-k">int</span>[] dailyTemperatures(<=
span class=3D"pl-k">int</span>[] temperatures) {=0A    <span clas=
s=3D"pl-k">int</span> n <span class=3D"pl-k">=3D</span> temperatu=
res<span class=3D"pl-k">.</span>length;=0A    <span class=3D"pl-k=
">int</span>[] ret <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-k">new</span> <span class=3D"pl-smi">int</span>[n];=0A    <sp=
an class=3D"pl-k">Stack&lt;<span class=3D"pl-smi">Integer</span>&=
gt;</span> stack <span class=3D"pl-k">=3D</span> <span class=3D"p=
l-k">new</span> <span class=3D"pl-k">Stack&lt;&gt;</span>();=0A =20=
  <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</span>=
 i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>=
; i <span class=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">++<=
/span>) {=0A        <span class=3D"pl-k">while</span>(<span class=
=3D"pl-k">!</span>stack<span class=3D"pl-k">.</span>isEmpty() <sp=
an class=3D"pl-k">&amp;&amp;</span> temperatures[i] <span class=3D=
"pl-k">&gt;</span> temperatures[stack<span class=3D"pl-k">.</span=
>peek()]) {=0A            <span class=3D"pl-k">int</span> idx <sp=
an class=3D"pl-k">=3D</span> stack<span class=3D"pl-k">.</span>po=
p();=0A            ret[idx] <span class=3D"pl-k">=3D</span> i <sp=
an class=3D"pl-k">-</span> idx;=0A        }=0A        stack<span=20=
class=3D"pl-k">.</span>add(i);=0A    }=0A    <span class=3D"pl-k"=
>return</span> ret;=0A}</pre></div><p>=E6=95=B0=E7=BB=84=E4=B8=AD=
=E4=B8=8B=E4=B8=80=E4=B8=AA=E6=AF=94=E5=BD=93=E5=89=8D=E6=95=B0=E5=
=A4=A7=E7=9A=84=E6=95=B0</p><p><a href=3D"https://leetcode.com/pr=
oblems/next-greater-element-i/description/" target=3D"_blank">Lee=
tcode : 496. Next Greater Element I (Easy)</a></p><div class=3D"h=
ighlight highlight-text-html-basic"><pre>Input: nums1 =3D [4,1,2]=
, nums2 =3D [1,3,4,2].=0AOutput: [-1,3,-1]</pre></div><p>=E5=9C=A8=
=E9=81=8D=E5=8E=86=E6=95=B0=E7=BB=84=E6=97=B6=E7=94=A8 Stack =E6=8A=
=8A=E6=95=B0=E7=BB=84=E4=B8=AD=E7=9A=84=E6=95=B0=E5=AD=98=E8=B5=B7=
=E6=9D=A5=EF=BC=8C=E5=A6=82=E6=9E=9C=E5=BD=93=E5=89=8D=E9=81=8D=E5=
=8E=86=E7=9A=84=E6=95=B0=E6=AF=94=E6=A0=88=E9=A1=B6=E5=85=83=E7=B4=
=A0=E6=9D=A5=E7=9A=84=E5=A4=A7=EF=BC=8C=E8=AF=B4=E6=98=8E=E6=A0=88=
=E9=A1=B6=E5=85=83=E7=B4=A0=E7=9A=84=E4=B8=8B=E4=B8=80=E4=B8=AA=E6=
=AF=94=E5=AE=83=E5=A4=A7=E7=9A=84=E6=95=B0=E5=B0=B1=E6=98=AF=E5=BD=
=93=E5=89=8D=E5=85=83=E7=B4=A0=E3=80=82</p><div class=3D"highligh=
t highlight-source-java"><pre><span class=3D"pl-k">public</span>=20=
<span class=3D"pl-k">int</span>[] nextGreaterElement(<span class=3D=
"pl-k">int</span>[] nums1, <span class=3D"pl-k">int</span>[] nums=
2) {=0A    <span class=3D"pl-k">Map&lt;<span class=3D"pl-smi">Int=
eger</span>, <span class=3D"pl-smi">Integer</span>&gt;</span> map=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span>=20=
<span class=3D"pl-k">HashMap&lt;&gt;</span>();=0A    <span class=3D=
"pl-k">Stack&lt;<span class=3D"pl-smi">Integer</span>&gt;</span>=20=
stack <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</s=
pan> <span class=3D"pl-k">Stack&lt;&gt;</span>();=0A    <span cla=
ss=3D"pl-k">for</span>(<span class=3D"pl-k">int</span> num <span=20=
class=3D"pl-k">:</span> nums2){=0A        <span class=3D"pl-k">wh=
ile</span>(<span class=3D"pl-k">!</span>stack<span class=3D"pl-k"=
>.</span>isEmpty() <span class=3D"pl-k">&amp;&amp;</span> num <sp=
an class=3D"pl-k">&gt;</span> stack<span class=3D"pl-k">.</span>p=
eek()){=0A            map<span class=3D"pl-k">.</span>put(stack<s=
pan class=3D"pl-k">.</span>pop(), num);=0A        }=0A        sta=
ck<span class=3D"pl-k">.</span>add(num);=0A    }=0A    <span clas=
s=3D"pl-k">int</span>[] ret <span class=3D"pl-k">=3D</span> <span=
 class=3D"pl-k">new</span> <span class=3D"pl-smi">int</span>[nums=
1<span class=3D"pl-k">.</span>length];=0A    <span class=3D"pl-k"=
>for</span>(<span class=3D"pl-k">int</span> i <span class=3D"pl-k=
">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-=
k">&lt;</span> nums1<span class=3D"pl-k">.</span>length; i<span c=
lass=3D"pl-k">++</span>){=0A        <span class=3D"pl-k">if</span=
>(map<span class=3D"pl-k">.</span>containsKey(nums1[i])) ret[i] <=
span class=3D"pl-k">=3D</span> map<span class=3D"pl-k">.</span>ge=
t(nums1[i]);=0A        <span class=3D"pl-k">else</span> ret[i] <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-k">-</span><span=20=
class=3D"pl-c1">1</span>;=0A    }=0A    <span class=3D"pl-k">retu=
rn</span> ret;=0A}</pre></div><p>=E5=BE=AA=E7=8E=AF=E6=95=B0=E7=BB=
=84=E4=B8=AD=E4=B8=8B=E4=B8=80=E4=B8=AA=E6=AF=94=E5=BD=93=E5=89=8D=
=E5=85=83=E7=B4=A0=E5=A4=A7=E7=9A=84=E6=95=B0</p><p><a href=3D"ht=
tps://leetcode.com/problems/next-greater-element-ii/description/"=
 target=3D"_blank">Leetcode : 503. Next Greater Element II (Mediu=
m)</a></p><div class=3D"highlight highlight-source-java"><pre><sp=
an class=3D"pl-k">public</span> <span class=3D"pl-k">int</span>[]=
 nextGreaterElements(<span class=3D"pl-k">int</span>[] nums) {=0A=
    <span class=3D"pl-k">int</span> n <span class=3D"pl-k">=3D</s=
pan> nums<span class=3D"pl-k">.</span>length, next[] <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"=
pl-smi">int</span>[n];=0A    <span class=3D"pl-smi">Arrays</span>=
<span class=3D"pl-k">.</span>fill(next, <span class=3D"pl-k">-</s=
pan><span class=3D"pl-c1">1</span>);=0A    <span class=3D"pl-k">S=
tack&lt;<span class=3D"pl-smi">Integer</span>&gt;</span> stack <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <sp=
an class=3D"pl-k">Stack&lt;&gt;</span>();=0A    <span class=3D"pl=
-k">for</span> (<span class=3D"pl-k">int</span> i <span class=3D"=
pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D=
"pl-k">&lt;</span> n <span class=3D"pl-k">*</span> <span class=3D=
"pl-c1">2</span>; i<span class=3D"pl-k">++</span>) {=0A        <s=
pan class=3D"pl-k">int</span> num <span class=3D"pl-k">=3D</span>=
 nums[i <span class=3D"pl-k">%</span> n];=0A        <span class=3D=
"pl-k">while</span> (<span class=3D"pl-k">!</span>stack<span clas=
s=3D"pl-k">.</span>isEmpty() <span class=3D"pl-k">&amp;&amp;</spa=
n> nums[stack<span class=3D"pl-k">.</span>peek()] <span class=3D"=
pl-k">&lt;</span> num)=0A            next[stack<span class=3D"pl-=
k">.</span>pop()] <span class=3D"pl-k">=3D</span> num;=0A       =20=
<span class=3D"pl-k">if</span> (i <span class=3D"pl-k">&lt;</span=
> n) stack<span class=3D"pl-k">.</span>push(i);=0A    }=0A    <sp=
an class=3D"pl-k">return</span> next;=0A}</pre></div><h2>=E5=93=88=
=E5=B8=8C=E8=A1=A8</h2><p>=E5=88=A9=E7=94=A8 Hash Table =E5=8F=AF=
=E4=BB=A5=E5=BF=AB=E9=80=9F=E6=9F=A5=E6=89=BE=E4=B8=80=E4=B8=AA=E5=
=85=83=E7=B4=A0=E6=98=AF=E5=90=A6=E5=AD=98=E5=9C=A8=E7=AD=89=E9=97=
=AE=E9=A2=98=EF=BC=8C=E4=BD=86=E6=98=AF=E9=9C=80=E8=A6=81=E4=B8=80=
=E5=AE=9A=E7=9A=84=E7=A9=BA=E9=97=B4=E6=9D=A5=E5=AD=98=E5=82=A8=E3=
=80=82=E5=9C=A8=E4=BC=98=E5=85=88=E8=80=83=E8=99=91=E6=97=B6=E9=97=
=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E7=9A=84=E6=83=85=E5=86=B5=E4=B8=8B=
=EF=BC=8C=E5=8F=AF=E4=BB=A5=E5=88=A9=E7=94=A8 Hash Table =E8=BF=99=
=E7=A7=8D=E7=A9=BA=E9=97=B4=E6=8D=A2=E5=8F=96=E6=97=B6=E9=97=B4=E7=
=9A=84=E5=81=9A=E6=B3=95=E3=80=82</p><p>Java =E4=B8=AD=E7=9A=84<s=
pan class=3D"Apple-converted-space">&nbsp;</span>HashSet<span cla=
ss=3D"Apple-converted-space">&nbsp;</span>=E7=94=A8=E4=BA=8E=E5=AD=
=98=E5=82=A8=E4=B8=80=E4=B8=AA=E9=9B=86=E5=90=88=EF=BC=8C=E5=B9=B6=
=E4=BB=A5 O(1) =E7=9A=84=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=
=A6=E6=9F=A5=E6=89=BE=E5=85=83=E7=B4=A0=E6=98=AF=E5=90=A6=E5=9C=A8=
=E9=9B=86=E5=90=88=E4=B8=AD=E3=80=82</p><p>=E5=A6=82=E6=9E=9C=E5=85=
=83=E7=B4=A0=E6=9C=89=E7=A9=B7=EF=BC=8C=E5=B9=B6=E4=B8=94=E8=8C=83=
=E5=9B=B4=E4=B8=8D=E5=A4=A7=EF=BC=8C=E9=82=A3=E4=B9=88=E5=8F=AF=E4=
=BB=A5=E7=94=A8=E4=B8=80=E4=B8=AA=E5=B8=83=E5=B0=94=E6=95=B0=E7=BB=
=84=E6=9D=A5=E5=AD=98=E5=82=A8=E4=B8=80=E4=B8=AA=E5=85=83=E7=B4=A0=
=E6=98=AF=E5=90=A6=E5=AD=98=E5=9C=A8=EF=BC=8C=E4=BE=8B=E5=A6=82=E5=
=AF=B9=E4=BA=8E=E5=8F=AA=E6=9C=89=E5=B0=8F=E5=86=99=E5=AD=97=E7=AC=
=A6=E7=9A=84=E5=85=83=E7=B4=A0=EF=BC=8C=E5=B0=B1=E5=8F=AF=E4=BB=A5=
=E7=94=A8=E4=B8=80=E4=B8=AA=E9=95=BF=E5=BA=A6=E4=B8=BA 26 =E7=9A=84=
=E5=B8=83=E5=B0=94=E6=95=B0=E7=BB=84=E6=9D=A5=E5=AD=98=E5=82=A8=E4=
=B8=80=E4=B8=AA=E5=AD=97=E7=AC=A6=E9=9B=86=E5=90=88=EF=BC=8C=E4=BD=
=BF=E5=BE=97=E7=A9=BA=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E9=99=8D=
=E4=BD=8E=E4=B8=BA O(1)=E3=80=82</p><p>Java =E4=B8=AD=E7=9A=84<sp=
an class=3D"Apple-converted-space">&nbsp;</span>HashMap<span clas=
s=3D"Apple-converted-space">&nbsp;</span>=E4=B8=BB=E8=A6=81=E7=94=
=A8=E4=BA=8E=E6=98=A0=E5=B0=84=E5=85=B3=E7=B3=BB=EF=BC=8C=E4=BB=8E=
=E8=80=8C=E6=8A=8A=E4=B8=A4=E4=B8=AA=E5=85=83=E7=B4=A0=E8=81=94=E7=
=B3=BB=E8=B5=B7=E6=9D=A5=E3=80=82</p><p>=E5=9C=A8=E5=AF=B9=E4=B8=80=
=E4=B8=AA=E5=86=85=E5=AE=B9=E8=BF=9B=E8=A1=8C=E5=8E=8B=E7=BC=A9=E6=
=88=96=E8=80=85=E5=85=B6=E5=AE=83=E8=BD=AC=E6=8D=A2=E6=97=B6=EF=BC=
=8C=E5=88=A9=E7=94=A8 HashMap =E5=8F=AF=E4=BB=A5=E6=8A=8A=E5=8E=9F=
=E5=A7=8B=E5=86=85=E5=AE=B9=E5=92=8C=E8=BD=AC=E6=8D=A2=E5=90=8E=E7=
=9A=84=E5=86=85=E5=AE=B9=E8=81=94=E7=B3=BB=E8=B5=B7=E6=9D=A5=E3=80=
=82=E4=BE=8B=E5=A6=82=E5=9C=A8=E4=B8=80=E4=B8=AA=E7=AE=80=E5=8C=96=
 url =E7=9A=84=E7=B3=BB=E7=BB=9F=E4=B8=AD=EF=BC=88<a href=3D"http=
s://leetcode.com/problems/encode-and-decode-tinyurl/description/"=
 target=3D"_blank">Leetcdoe : 535. Encode and Decode TinyURL (Med=
ium)</a>=EF=BC=89=EF=BC=8C=E5=88=A9=E7=94=A8 HashMap =E5=B0=B1=E5=
=8F=AF=E4=BB=A5=E5=AD=98=E5=82=A8=E7=B2=BE=E7=AE=80=E5=90=8E=E7=9A=
=84 url =E5=88=B0=E5=8E=9F=E5=A7=8B url =E7=9A=84=E6=98=A0=E5=B0=84=
=EF=BC=8C=E4=BD=BF=E5=BE=97=E4=B8=8D=E4=BB=85=E5=8F=AF=E4=BB=A5=E6=
=98=BE=E7=A4=BA=E7=AE=80=E5=8C=96=E7=9A=84 url=EF=BC=8C=E4=B9=9F=E5=
=8F=AF=E4=BB=A5=E6=A0=B9=E6=8D=AE=E7=AE=80=E5=8C=96=E7=9A=84 url=20=
=E5=BE=97=E5=88=B0=E5=8E=9F=E5=A7=8B url =E4=BB=8E=E8=80=8C=E5=AE=
=9A=E4=BD=8D=E5=88=B0=E6=AD=A3=E7=A1=AE=E7=9A=84=E8=B5=84=E6=BA=90=
=E3=80=82</p><p>HashMap =E4=B9=9F=E5=8F=AF=E4=BB=A5=E7=94=A8=E6=9D=
=A5=E5=AF=B9=E5=85=83=E7=B4=A0=E8=BF=9B=E8=A1=8C=E8=AE=A1=E6=95=B0=
=E7=BB=9F=E8=AE=A1=EF=BC=8C=E6=AD=A4=E6=97=B6=E9=94=AE=E4=B8=BA=E5=
=85=83=E7=B4=A0=EF=BC=8C=E5=80=BC=E4=B8=BA=E8=AE=A1=E6=95=B0=E3=80=
=82=E5=92=8C HashSet =E7=B1=BB=E4=BC=BC=EF=BC=8C=E5=A6=82=E6=9E=9C=
=E5=85=83=E7=B4=A0=E6=9C=89=E7=A9=B7=E5=B9=B6=E4=B8=94=E8=8C=83=E5=
=9B=B4=E4=B8=8D=E5=A4=A7=EF=BC=8C=E5=8F=AF=E4=BB=A5=E7=94=A8=E6=95=
=B4=E5=9E=8B=E6=95=B0=E7=BB=84=E6=9D=A5=E8=BF=9B=E8=A1=8C=E7=BB=9F=
=E8=AE=A1=E3=80=82</p><p>=E6=95=B0=E7=BB=84=E4=B8=AD=E7=9A=84=E4=B8=
=A4=E4=B8=AA=E6=95=B0=E5=92=8C=E4=B8=BA=E7=BB=99=E5=AE=9A=E5=80=BC=
</p><p><a href=3D"https://leetcode.com/problems/two-sum/descripti=
on/" target=3D"_blank">Leetcode : 1. Two Sum (Easy)</a></p><p>=E5=
=8F=AF=E4=BB=A5=E5=85=88=E5=AF=B9=E6=95=B0=E7=BB=84=E8=BF=9B=E8=A1=
=8C=E6=8E=92=E5=BA=8F=EF=BC=8C=E7=84=B6=E5=90=8E=E4=BD=BF=E7=94=A8=
=E5=8F=8C=E6=8C=87=E9=92=88=E6=96=B9=E6=B3=95=E6=88=96=E8=80=85=E4=
=BA=8C=E5=88=86=E6=9F=A5=E6=89=BE=E6=96=B9=E6=B3=95=E3=80=82=E8=BF=
=99=E6=A0=B7=E5=81=9A=E7=9A=84=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=
=E5=BA=A6=E4=B8=BA O(nlgn)=EF=BC=8C=E7=A9=BA=E9=97=B4=E5=A4=8D=E6=
=9D=82=E5=BA=A6=E4=B8=BA O(1)=E3=80=82</p><p>=E7=94=A8 HashMap =E5=
=AD=98=E5=82=A8=E6=95=B0=E7=BB=84=E5=85=83=E7=B4=A0=E5=92=8C=E7=B4=
=A2=E5=BC=95=E7=9A=84=E6=98=A0=E5=B0=84=EF=BC=8C=E5=9C=A8=E8=AE=BF=
=E9=97=AE=E5=88=B0 nums[i] =E6=97=B6=EF=BC=8C=E5=88=A4=E6=96=AD H=
ashMap =E4=B8=AD=E6=98=AF=E5=90=A6=E5=AD=98=E5=9C=A8 target - num=
s[i] =EF=BC=8C=E5=A6=82=E6=9E=9C=E5=AD=98=E5=9C=A8=E8=AF=B4=E6=98=
=8E target - nums[i] =E6=89=80=E5=9C=A8=E7=9A=84=E7=B4=A2=E5=BC=95=
=E5=92=8C i =E5=B0=B1=E6=98=AF=E8=A6=81=E6=89=BE=E7=9A=84=E4=B8=A4=
=E4=B8=AA=E6=95=B0=E3=80=82=E8=AF=A5=E6=96=B9=E6=B3=95=E7=9A=84=E6=
=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E4=B8=BA O(n)=EF=BC=8C=
=E7=A9=BA=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E4=B8=BA O(n)=EF=BC=
=8C=E4=BD=BF=E7=94=A8=E7=A9=BA=E9=97=B4=E6=9D=A5=E6=8D=A2=E5=8F=96=
=E6=97=B6=E9=97=B4=E3=80=82</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">public</span> <span class=3D=
"pl-k">int</span>[] twoSum(<span class=3D"pl-k">int</span>[] nums=
, <span class=3D"pl-k">int</span> target) {=0A    <span class=3D"=
pl-k">HashMap&lt;<span class=3D"pl-smi">Integer</span>, <span cla=
ss=3D"pl-smi">Integer</span>&gt;</span> map <span class=3D"pl-k">=
=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl-k">H=
ashMap&lt;&gt;</span>();=0A    <span class=3D"pl-k">for</span>(<s=
pan class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span>=
 nums<span class=3D"pl-k">.</span>length; i<span class=3D"pl-k">+=
+</span>){=0A        <span class=3D"pl-k">if</span>(map<span clas=
s=3D"pl-k">.</span>containsKey(target <span class=3D"pl-k">-</spa=
n> nums[i])) <span class=3D"pl-k">return</span> <span class=3D"pl=
-k">new</span> <span class=3D"pl-smi">int</span>[]{map<span class=
=3D"pl-k">.</span>get(target <span class=3D"pl-k">-</span> nums[i=
]), i};=0A        <span class=3D"pl-k">else</span> map<span class=
=3D"pl-k">.</span>put(nums[i], i);=0A    }=0A    <span class=3D"p=
l-k">return</span> <span class=3D"pl-c1">null</span>;=0A}</pre></=
div><p>=E6=9C=80=E9=95=BF=E5=92=8C=E8=B0=90=E5=BA=8F=E5=88=97</p>=
<p>=E5=92=8C=E8=B0=90=E5=BA=8F=E5=88=97=E4=B8=AD=E6=9C=80=E5=A4=A7=
=E6=95=B0=E5=92=8C=E6=9C=80=E5=B0=8F=E6=95=B0=E5=8F=AA=E5=B7=AE=E6=
=AD=A3=E5=A5=BD=E4=B8=BA 1</p><p><a href=3D"https://leetcode.com/=
problems/longest-harmonious-subsequence/description/" target=3D"_=
blank">Leetcode : 594. Longest Harmonious Subsequence (Easy)</a><=
/p><div class=3D"highlight highlight-source-java"><pre><span clas=
s=3D"pl-k">public</span> <span class=3D"pl-k">int</span> findLHS(=
<span class=3D"pl-k">int</span>[] nums) {=0A    <span class=3D"pl=
-k">Map&lt;<span class=3D"pl-smi">Long</span>, <span class=3D"pl-=
smi">Integer</span>&gt;</span> map <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-k">new</span> <span class=3D"pl-k">HashMap&lt=
;&gt;</span>();=0A    <span class=3D"pl-k">for</span> (<span clas=
s=3D"pl-k">long</span> num <span class=3D"pl-k">:</span> nums) {=0A=
        map<span class=3D"pl-k">.</span>put(num, map<span class=3D=
"pl-k">.</span>getOrDefault(num, <span class=3D"pl-c1">0</span>)=20=
<span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>);=0A=
    }=0A    <span class=3D"pl-k">int</span> result <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A    <span cla=
ss=3D"pl-k">for</span> (<span class=3D"pl-k">long</span> key <spa=
n class=3D"pl-k">:</span> map<span class=3D"pl-k">.</span>keySet(=
)) {=0A        <span class=3D"pl-k">if</span> (map<span class=3D"=
pl-k">.</span>containsKey(key <span class=3D"pl-k">+</span> <span=
 class=3D"pl-c1">1</span>)) {=0A            result <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-smi">Math</span><span class=3D=
"pl-k">.</span>max(result, map<span class=3D"pl-k">.</span>get(ke=
y <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>) <=
span class=3D"pl-k">+</span> map<span class=3D"pl-k">.</span>get(=
key));=0A        }=0A    }=0A    <span class=3D"pl-k">return</spa=
n> result;=0A}</pre></div><h2>=E5=AD=97=E7=AC=A6=E4=B8=B2</h2><p>=
=E4=B8=A4=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E7=9A=84=E5=8C=85=E5=
=90=AB=E7=9A=84=E5=AD=97=E7=AC=A6=E6=98=AF=E5=90=A6=E5=AE=8C=E5=85=
=A8=E7=9B=B8=E5=90=8C</p><p><a href=3D"https://leetcode.com/probl=
ems/valid-anagram/description/" target=3D"_blank">Leetcode : 242.=
 Valid Anagram (Easy)</a></p><p>=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=8F=
=AA=E5=8C=85=E5=90=AB=E5=B0=8F=E5=86=99=E5=AD=97=E7=AC=A6=EF=BC=8C=
=E6=80=BB=E5=85=B1=E6=9C=89 26 =E4=B8=AA=E5=B0=8F=E5=86=99=E5=AD=97=
=E7=AC=A6=E3=80=82=E5=8F=AF=E4=BB=A5=E7=94=A8 Hash Table =E6=9D=A5=
=E6=98=A0=E5=B0=84=E5=AD=97=E7=AC=A6=E4=B8=8E=E5=87=BA=E7=8E=B0=E6=
=AC=A1=E6=95=B0=EF=BC=8C=E5=9B=A0=E4=B8=BA=E9=94=AE=E5=80=BC=E8=8C=
=83=E5=9B=B4=E5=BE=88=E5=B0=8F=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=8F=AF=
=E4=BB=A5=E7=94=A8=E6=95=B0=E7=BB=84=E6=9D=A5=E8=BF=9B=E8=A1=8C=E6=
=98=A0=E5=B0=84=E3=80=82</p><p>=E4=BD=BF=E7=94=A8=E9=95=BF=E5=BA=A6=
=E4=B8=BA 26 =E7=9A=84=E6=95=B4=E5=9E=8B=E6=95=B0=E7=BB=84=E5=AF=B9=
=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=87=BA=E7=8E=B0=E7=9A=84=E5=AD=97=E7=
=AC=A6=E8=BF=9B=E8=A1=8C=E7=BB=9F=E8=AE=A1=EF=BC=8C=E6=AF=94=E8=BE=
=83=E4=B8=A4=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=87=BA=E7=8E=B0=
=E7=9A=84=E5=AD=97=E7=AC=A6=E6=95=B0=E9=87=8F=E6=98=AF=E5=90=A6=E7=
=9B=B8=E5=90=8C=E3=80=82</p><div class=3D"highlight highlight-sou=
rce-java"><pre><span class=3D"pl-k">public</span> <span class=3D"=
pl-k">boolean</span> isAnagram(<span class=3D"pl-smi">String</spa=
n> s, <span class=3D"pl-smi">String</span> t) {=0A    <span class=
=3D"pl-k">int</span>[] cnts <span class=3D"pl-k">=3D</span> <span=
 class=3D"pl-k">new</span> <span class=3D"pl-smi">int</span>[<spa=
n class=3D"pl-c1">26</span>];=0A    <span class=3D"pl-k">for</spa=
n>(<span class=3D"pl-k">int</span> i  <span class=3D"pl-k">=3D</s=
pan> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;<=
/span> s<span class=3D"pl-k">.</span>length(); i<span class=3D"pl=
-k">++</span>) cnts[s<span class=3D"pl-k">.</span>charAt(i) <span=
 class=3D"pl-k">-</span> <span class=3D"pl-s"><span class=3D"pl-p=
ds">'</span>a<span class=3D"pl-pds">'</span></span>] <span class=3D=
"pl-k">++</span>;=0A    <span class=3D"pl-k">for</span>(<span cla=
ss=3D"pl-k">int</span> i  <span class=3D"pl-k">=3D</span> <span c=
lass=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> t<spa=
n class=3D"pl-k">.</span>length(); i<span class=3D"pl-k">++</span=
>) cnts[t<span class=3D"pl-k">.</span>charAt(i) <span class=3D"pl=
-k">-</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</span>=
a<span class=3D"pl-pds">'</span></span>] <span class=3D"pl-k">--<=
/span>;=0A    <span class=3D"pl-k">for</span>(<span class=3D"pl-k=
">int</span> i  <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-c1">0</span>; i <span class=3D"pl-k">&lt;</span> <span class=3D"=
pl-c1">26</span>; i<span class=3D"pl-k">++</span>) <span class=3D=
"pl-k">if</span>(cnts[i] <span class=3D"pl-k">!=3D</span> <span c=
lass=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> <span=
 class=3D"pl-c1">false</span>;=0A    <span class=3D"pl-k">return<=
/span> <span class=3D"pl-c1">true</span>;=0A}</pre></div><p>=E5=AD=
=97=E7=AC=A6=E4=B8=B2=E5=90=8C=E6=9E=84</p><p><a href=3D"https://=
leetcode.com/problems/isomorphic-strings/description/" target=3D"=
_blank">Leetcode : 205. Isomorphic Strings (Easy)</a></p><p>=E4=BE=
=8B=E5=A6=82 "egg" =E5=92=8C "add" =E5=B0=B1=E5=B1=9E=E4=BA=8E=E5=
=90=8C=E6=9E=84=E5=AD=97=E7=AC=A6=E4=B8=B2=E3=80=82</p><p>=E8=AE=B0=
=E5=BD=95=E4=B8=80=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=8A=E6=AC=A1=E5=
=87=BA=E7=8E=B0=E7=9A=84=E4=BD=8D=E7=BD=AE=EF=BC=8C=E5=A6=82=E6=9E=
=9C=E4=B8=A4=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E4=B8=AD=E6=9F=90=
=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=8A=E6=AC=A1=E5=87=BA=E7=8E=B0=E7=
=9A=84=E4=BD=8D=E7=BD=AE=E4=B8=80=E6=A0=B7=EF=BC=8C=E9=82=A3=E4=B9=
=88=E5=B0=B1=E5=B1=9E=E4=BA=8E=E5=90=8C=E6=9E=84=E3=80=82</p><div=
 class=3D"highlight highlight-source-java"><pre><span class=3D"pl=
-k">public</span> <span class=3D"pl-k">boolean</span> isIsomorphi=
c(<span class=3D"pl-smi">String</span> s, <span class=3D"pl-smi">=
String</span> t) {=0A    <span class=3D"pl-k">int</span>[] m1 <sp=
an class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <spa=
n class=3D"pl-smi">int</span>[<span class=3D"pl-c1">256</span>];=0A=
    <span class=3D"pl-k">int</span>[] m2 <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">in=
t</span>[<span class=3D"pl-c1">256</span>];=0A    <span class=3D"=
pl-k">for</span>(<span class=3D"pl-k">int</span> i <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span class=3D=
"pl-k">&lt;</span> s<span class=3D"pl-k">.</span>length(); i<span=
 class=3D"pl-k">++</span>){=0A        <span class=3D"pl-k">if</sp=
an>(m1[s<span class=3D"pl-k">.</span>charAt(i)] <span class=3D"pl=
-k">!=3D</span> m2[t<span class=3D"pl-k">.</span>charAt(i)]) {=0A=
            <span class=3D"pl-k">return</span> <span class=3D"pl-=
c1">false</span>;=0A        }=0A        m1[s<span class=3D"pl-k">=
.</span>charAt(i)] <span class=3D"pl-k">=3D</span> i <span class=3D=
"pl-k">+</span> <span class=3D"pl-c1">1</span>;=0A        m2[t<sp=
an class=3D"pl-k">.</span>charAt(i)] <span class=3D"pl-k">=3D</sp=
an> i <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span=
>;=0A    }=0A    <span class=3D"pl-k">return</span> <span class=3D=
"pl-c1">true</span>;=0A}</pre></div><p>=E8=AE=A1=E7=AE=97=E4=B8=80=
=E7=BB=84=E5=AD=97=E7=AC=A6=E9=9B=86=E5=90=88=E5=8F=AF=E4=BB=A5=E7=
=BB=84=E6=88=90=E7=9A=84=E5=9B=9E=E6=96=87=E5=AD=97=E7=AC=A6=E4=B8=
=B2=E7=9A=84=E6=9C=80=E5=A4=A7=E9=95=BF=E5=BA=A6</p><p><a href=3D=
"https://leetcode.com/problems/longest-palindrome/description/" t=
arget=3D"_blank">Leetcode : 409. Longest Palindrome</a></p><p>=E4=
=BD=BF=E7=94=A8=E9=95=BF=E5=BA=A6=E4=B8=BA 128 =E7=9A=84=E6=95=B4=
=E5=9E=8B=E6=95=B0=E7=BB=84=E6=9D=A5=E7=BB=9F=E8=AE=A1=E6=AF=8F=E4=
=B8=AA=E5=AD=97=E7=AC=A6=E5=87=BA=E7=8E=B0=E7=9A=84=E4=B8=AA=E6=95=
=B0=EF=BC=8C=E6=AF=8F=E4=B8=AA=E5=AD=97=E7=AC=A6=E6=9C=89=E5=81=B6=
=E6=95=B0=E4=B8=AA=E5=8F=AF=E4=BB=A5=E7=94=A8=E6=9D=A5=E6=9E=84=E6=
=88=90=E5=9B=9E=E6=96=87=E5=AD=97=E7=AC=A6=E4=B8=B2=E3=80=82=E5=9B=
=A0=E4=B8=BA=E5=9B=9E=E6=96=87=E5=AD=97=E7=AC=A6=E4=B8=B2=E6=9C=80=
=E4=B8=AD=E9=97=B4=E7=9A=84=E9=82=A3=E4=B8=AA=E5=AD=97=E7=AC=A6=E5=
=8F=AF=E4=BB=A5=E5=8D=95=E7=8B=AC=E5=87=BA=E7=8E=B0=EF=BC=8C=E6=89=
=80=E4=BB=A5=E5=A6=82=E6=9E=9C=E6=9C=89=E5=8D=95=E7=8B=AC=E7=9A=84=
=E5=AD=97=E7=AC=A6=E5=B0=B1=E6=8A=8A=E5=AE=83=E6=94=BE=E5=88=B0=E6=
=9C=80=E4=B8=AD=E9=97=B4=E3=80=82</p><div class=3D"highlight high=
light-source-java"><pre><span class=3D"pl-k">public</span> <span=20=
class=3D"pl-k">int</span> longestPalindrome(<span class=3D"pl-smi=
">String</span> s) {=0A    <span class=3D"pl-k">int</span>[] cnts=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span>=20=
<span class=3D"pl-smi">int</span>[<span class=3D"pl-c1">128</span=
>]; <span class=3D"pl-c"><span class=3D"pl-c">//</span> ascii =E7=
=A0=81=E6=80=BB=E5=85=B1 128 =E4=B8=AA</span>=0A    <span class=3D=
"pl-k">for</span>(<span class=3D"pl-k">char</span> c <span class=3D=
"pl-k">:</span> s<span class=3D"pl-k">.</span>toCharArray()) cnts=
[c]<span class=3D"pl-k">++</span>;=0A    <span class=3D"pl-k">int=
</span> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1"=
>0</span>;=0A    <span class=3D"pl-k">for</span>(<span class=3D"p=
l-k">int</span> cnt <span class=3D"pl-k">:</span> cnts)  ret <spa=
n class=3D"pl-k">+=3D</span> (cnt <span class=3D"pl-k">/</span> <=
span class=3D"pl-c1">2</span>) <span class=3D"pl-k">*</span> <spa=
n class=3D"pl-c1">2</span>;=0A    <span class=3D"pl-k">if</span>(=
ret <span class=3D"pl-k">&lt;</span> s<span class=3D"pl-k">.</spa=
n>length()) ret <span class=3D"pl-k">++</span>; <span class=3D"pl=
-c"><span class=3D"pl-c">//</span> =E8=BF=99=E4=B8=AA=E6=9D=A1=E4=
=BB=B6=E4=B8=8B s =E4=B8=AD=E4=B8=80=E5=AE=9A=E6=9C=89=E5=8D=95=E4=
=B8=AA=E6=9C=AA=E4=BD=BF=E7=94=A8=E7=9A=84=E5=AD=97=E7=AC=A6=E5=AD=
=98=E5=9C=A8=EF=BC=8C=E5=8F=AF=E4=BB=A5=E6=8A=8A=E8=BF=99=E4=B8=AA=
=E5=AD=97=E7=AC=A6=E6=94=BE=E5=88=B0=E5=9B=9E=E6=96=87=E7=9A=84=E6=
=9C=80=E4=B8=AD=E9=97=B4</span>=0A    <span class=3D"pl-k">return=
</span> ret;=0A}</pre></div><p>=E5=88=A4=E6=96=AD=E4=B8=80=E4=B8=AA=
=E6=95=B4=E6=95=B0=E6=98=AF=E5=90=A6=E6=98=AF=E5=9B=9E=E6=96=87=E6=
=95=B0</p><p><a href=3D"https://leetcode.com/problems/palindrome-=
number/description/" target=3D"_blank">Leetcode : 9. Palindrome N=
umber (Easy)</a></p><p>=E8=A6=81=E6=B1=82=E4=B8=8D=E8=83=BD=E4=BD=
=BF=E7=94=A8=E9=A2=9D=E5=A4=96=E7=A9=BA=E9=97=B4=EF=BC=8C=E4=B9=9F=
=E5=B0=B1=E4=B8=8D=E8=83=BD=E5=B0=86=E6=95=B4=E6=95=B0=E8=BD=AC=E6=
=8D=A2=E4=B8=BA=E5=AD=97=E7=AC=A6=E4=B8=B2=E8=BF=9B=E8=A1=8C=E5=88=
=A4=E6=96=AD=E3=80=82</p><p>=E5=B0=86=E6=95=B4=E6=95=B0=E5=88=86=E6=
=88=90=E5=B7=A6=E5=8F=B3=E4=B8=A4=E9=83=A8=E5=88=86=EF=BC=8C=E5=8F=
=B3=E8=BE=B9=E9=82=A3=E9=83=A8=E5=88=86=E9=9C=80=E8=A6=81=E8=BD=AC=
=E7=BD=AE=EF=BC=8C=E7=84=B6=E5=90=8E=E5=88=A4=E6=96=AD=E8=BF=99=E4=
=B8=A4=E9=83=A8=E5=88=86=E6=98=AF=E5=90=A6=E7=9B=B8=E7=AD=89=E3=80=
=82</p><div class=3D"highlight highlight-source-java"><pre><span=20=
class=3D"pl-k">public</span> <span class=3D"pl-k">boolean</span>=20=
isPalindrome(<span class=3D"pl-k">int</span> x) {=0A    <span cla=
ss=3D"pl-k">if</span>(x <span class=3D"pl-k">=3D=3D</span> <span=20=
class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</span> <spa=
n class=3D"pl-c1">true</span>;=0A    <span class=3D"pl-k">if</spa=
n>(x <span class=3D"pl-k">&lt;</span> <span class=3D"pl-c1">0</sp=
an>) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">fal=
se</span>;=0A    <span class=3D"pl-k">if</span>(x <span class=3D"=
pl-k">%</span> <span class=3D"pl-c1">10</span> <span class=3D"pl-=
k">=3D=3D</span> <span class=3D"pl-c1">0</span>) <span class=3D"p=
l-k">return</span> <span class=3D"pl-c1">false</span>;=0A    <spa=
n class=3D"pl-k">int</span> right <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">while=
</span>(x <span class=3D"pl-k">&gt;</span> right){=0A        righ=
t <span class=3D"pl-k">=3D</span> right <span class=3D"pl-k">*</s=
pan> <span class=3D"pl-c1">10</span> <span class=3D"pl-k">+</span=
> x <span class=3D"pl-k">%</span> <span class=3D"pl-c1">10</span>=
;=0A        x <span class=3D"pl-k">/=3D</span> <span class=3D"pl-=
c1">10</span>;=0A    }=0A    <span class=3D"pl-k">return</span> x=
 <span class=3D"pl-k">=3D=3D</span> right <span class=3D"pl-k">||=
</span> x <span class=3D"pl-k">=3D=3D</span> right <span class=3D=
"pl-k">/</span> <span class=3D"pl-c1">10</span>;=0A}</pre></div><=
p>=E5=9B=9E=E6=96=87=E5=AD=90=E5=AD=97=E7=AC=A6=E4=B8=B2</p><p><a=
 href=3D"https://leetcode.com/problems/palindromic-substrings/des=
cription/" target=3D"_blank">Leetcode : 647. Palindromic Substrin=
gs (Medium)</a></p><p>=E8=A7=A3=E5=86=B3=E6=96=B9=E6=A1=88=E6=98=AF=
=E4=BB=8E=E5=AD=97=E7=AC=A6=E4=B8=B2=E7=9A=84=E6=9F=90=E4=B8=80=E4=
=BD=8D=E5=BC=80=E5=A7=8B=EF=BC=8C=E5=B0=9D=E8=AF=95=E7=9D=80=E5=8E=
=BB=E6=89=A9=E5=B1=95=E5=AD=90=E5=AD=97=E7=AC=A6=E4=B8=B2=E3=80=82=
</p><div class=3D"highlight highlight-source-java"><pre><span cla=
ss=3D"pl-k">private</span> <span class=3D"pl-k">int</span> cnt <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A<=
span class=3D"pl-k">public</span> <span class=3D"pl-k">int</span>=
 countSubstrings(<span class=3D"pl-smi">String</span> s) {=0A   =20=
<span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</span> i=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=20=
i <span class=3D"pl-k">&lt;</span> s<span class=3D"pl-k">.</span>=
length(); i<span class=3D"pl-k">++</span>) {=0A        extendSubs=
trings(s, i, i);    <span class=3D"pl-c"><span class=3D"pl-c">//<=
/span> =E5=A5=87=E6=95=B0=E9=95=BF=E5=BA=A6</span>=0A        exte=
ndSubstrings(s, i, i <span class=3D"pl-k">+</span> <span class=3D=
"pl-c1">1</span>); <span class=3D"pl-c"><span class=3D"pl-c">//</=
span> =E5=81=B6=E6=95=B0=E9=95=BF=E5=BA=A6</span>=0A    }=0A    <=
span class=3D"pl-k">return</span> cnt;=0A}=0A=0A<span class=3D"pl=
-k">private</span> <span class=3D"pl-k">void</span> extendSubstri=
ngs(<span class=3D"pl-smi">String</span> s, <span class=3D"pl-k">=
int</span> start, <span class=3D"pl-k">int</span> end) {=0A    <s=
pan class=3D"pl-k">while</span>(start <span class=3D"pl-k">&gt;=3D=
</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;=
&amp;</span> end <span class=3D"pl-k">&lt;</span> s<span class=3D=
"pl-k">.</span>length() <span class=3D"pl-k">&amp;&amp;</span> s<=
span class=3D"pl-k">.</span>charAt(start) <span class=3D"pl-k">=3D=
=3D</span> s<span class=3D"pl-k">.</span>charAt(end)) {=0A      =20=
 start<span class=3D"pl-k">--</span>;=0A        end<span class=3D=
"pl-k">++</span>;=0A        cnt<span class=3D"pl-k">++</span>;=0A=
    }=0A}</pre></div><p>=E7=BB=9F=E8=AE=A1=E4=BA=8C=E8=BF=9B=E5=88=
=B6=E5=AD=97=E7=AC=A6=E4=B8=B2=E4=B8=AD=E8=BF=9E=E7=BB=AD 1 =E5=92=
=8C =E8=BF=9E=E7=BB=AD 0 =E6=95=B0=E9=87=8F=E7=9B=B8=E5=90=8C=E7=9A=
=84=E5=AD=90=E5=AD=97=E7=AC=A6=E4=B8=B2=E4=B8=AA=E6=95=B0</p><div=
 class=3D"highlight highlight-text-html-basic"><pre>Input: "00110=
011"=0AOutput: 6=0AExplanation: There are 6 substrings that have=20=
equal number of consecutive 1's and 0's: "0011", "01", "1100", "1=
0", "0011", and "01".</pre></div><p><a href=3D"https://leetcode.c=
om/problems/count-binary-substrings/description/" target=3D"_blan=
k">Leetcode : 696. Count Binary Substrings (Easy)</a></p><div cla=
ss=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">=
public</span> <span class=3D"pl-k">int</span> countBinarySubstrin=
gs(<span class=3D"pl-smi">String</span> s) {=0A    <span class=3D=
"pl-k">int</span> preLen <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-c1">0</span>, curLen <span class=3D"pl-k">=3D</span> <s=
pan class=3D"pl-c1">1</span>, ret <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">for</=
span>(<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D<=
/span> <span class=3D"pl-c1">1</span>; i <span class=3D"pl-k">&lt=
;</span> s<span class=3D"pl-k">.</span>length(); i<span class=3D"=
pl-k">++</span>){=0A        <span class=3D"pl-k">if</span>(s<span=
 class=3D"pl-k">.</span>charAt(i) <span class=3D"pl-k">=3D=3D</sp=
an> s<span class=3D"pl-k">.</span>charAt(i<span class=3D"pl-k">-<=
/span><span class=3D"pl-c1">1</span>)) curLen<span class=3D"pl-k"=
>++</span>;=0A        <span class=3D"pl-k">else</span>{=0A      =20=
     preLen <span class=3D"pl-k">=3D</span> curLen;=0A          =20=
 curLen <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</=
span>;=0A        }=0A=0A        <span class=3D"pl-k">if</span>(pr=
eLen <span class=3D"pl-k">&gt;=3D</span> curLen) ret<span class=3D=
"pl-k">++</span>;=0A    }=0A    <span class=3D"pl-k">return</span=
> ret;=0A}</pre></div><p>=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=BE=AA=E7=8E=
=AF=E7=A7=BB=E4=BD=8D=E5=8C=85=E5=90=AB</p><p><a href=3D"https://=
github.com/CyC2018/InterviewNotes/blob/master/notes/Leetcode%20%E=
9%A2%98%E8%A7%A3.md#" target=3D"_blank">=E7=BC=96=E7=A8=8B=E4=B9=8B=
=E7=BE=8E=EF=BC=9A3.1</a></p><p>=E7=BB=99=E5=AE=9A=E4=B8=A4=E4=B8=
=AA=E5=AD=97=E7=AC=A6=E4=B8=B2 s1 =E5=92=8C s2 =EF=BC=8C=E8=A6=81=
=E6=B1=82=E5=88=A4=E5=AE=9A s2 =E6=98=AF=E5=90=A6=E8=83=BD=E5=A4=9F=
=E8=A2=AB s1 =E5=81=9A=E5=BE=AA=E7=8E=AF=E7=A7=BB=E4=BD=8D=E5=BE=97=
=E5=88=B0=E7=9A=84=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=8C=85=E5=90=AB=E3=
=80=82</p><div class=3D"highlight highlight-text-html-basic"><pre=
>s1 =3D AABCD, s2 =3D CDAA=0AReturn : true</pre></div><p>s1 =E8=BF=
=9B=E8=A1=8C=E5=BE=AA=E7=8E=AF=E7=A7=BB=E4=BD=8D=E7=9A=84=E7=BB=93=
=E6=9E=9C=E6=98=AF s1s1 =E7=9A=84=E5=AD=90=E5=AD=97=E7=AC=A6=E4=B8=
=B2=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=8F=AA=E8=A6=81=E5=88=A4=E6=96=AD=
 s2 =E6=98=AF=E5=90=A6=E6=98=AF s1s1 =E7=9A=84=E5=AD=90=E5=AD=97=E7=
=AC=A6=E4=B8=B2=E5=8D=B3=E5=8F=AF=E3=80=82</p><p>=E5=AD=97=E7=AC=A6=
=E4=B8=B2=E5=BE=AA=E7=8E=AF=E7=A7=BB=E4=BD=8D</p><p><a href=3D"ht=
tps://github.com/CyC2018/InterviewNotes/blob/master/notes/Leetcod=
e%20%E9%A2%98%E8%A7%A3.md#" target=3D"_blank">=E7=BC=96=E7=A8=8B=E4=
=B9=8B=E7=BE=8E=EF=BC=9A2.17</a></p><p>=E5=B0=86=E5=AD=97=E7=AC=A6=
=E4=B8=B2=E5=90=91=E5=8F=B3=E5=BE=AA=E7=8E=AF=E7=A7=BB=E5=8A=A8 k=
 =E4=BD=8D=E3=80=82</p><p>=E4=BE=8B=E5=A6=82 abcd123 =E5=90=91=E5=
=8F=B3=E7=A7=BB=E5=8A=A8 3 =E4=BD=8D =E5=BE=97=E5=88=B0 123abcd</=
p><p>=E5=B0=86 abcd123 =E4=B8=AD=E7=9A=84 abcd =E5=92=8C 123 =E5=8D=
=95=E7=8B=AC=E9=80=86=E5=BA=8F=EF=BC=8C=E5=BE=97=E5=88=B0 dcba321=
=EF=BC=8C=E7=84=B6=E5=90=8E=E5=AF=B9=E6=95=B4=E4=B8=AA=E5=AD=97=E7=
=AC=A6=E4=B8=B2=E8=BF=9B=E8=A1=8C=E9=80=86=E5=BA=8F=EF=BC=8C=E5=BE=
=97=E5=88=B0123abcd=E3=80=82</p><p>=E5=AD=97=E7=AC=A6=E4=B8=B2=E4=
=B8=AD=E5=8D=95=E8=AF=8D=E7=9A=84=E7=BF=BB=E8=BD=AC</p><p><a href=
=3D"https://github.com/CyC2018/InterviewNotes/blob/master/notes/L=
eetcode%20%E9%A2%98%E8%A7%A3.md#" target=3D"_blank">=E7=A8=8B=E5=BA=
=8F=E5=91=98=E4=BB=A3=E7=A0=81=E9=9D=A2=E8=AF=95=E6=8C=87=E5=8D=97=
</a></p><p>=E4=BE=8B=E5=A6=82=E5=B0=86 "I am a student" =E7=BF=BB=
=E8=BD=AC=E6=88=90 "student a am I"</p><p>=E5=B0=86=E6=AF=8F=E4=B8=
=AA=E5=8D=95=E8=AF=8D=E9=80=86=E5=BA=8F=EF=BC=8C=E7=84=B6=E5=90=8E=
=E5=B0=86=E6=95=B4=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E9=80=86=E5=
=BA=8F=E3=80=82</p><h2>=E6=95=B0=E7=BB=84=E4=B8=8E=E7=9F=A9=E9=98=
=B5</h2><p>=E6=8A=8A=E6=95=B0=E7=BB=84=E4=B8=AD=E7=9A=84 0 =E7=A7=
=BB=E5=88=B0=E6=9C=AB=E5=B0=BE</p><p><a href=3D"https://leetcode.=
com/problems/move-zeroes/description/" target=3D"_blank">Leetcode=
 : 283. Move Zeroes (Easy)</a></p><div class=3D"highlight highlig=
ht-source-java"><pre>    <span class=3D"pl-k">public</span> <span=
 class=3D"pl-k">void</span> moveZeroes(<span class=3D"pl-k">int</=
span>[] nums) {=0A        <span class=3D"pl-k">int</span> n <span=
 class=3D"pl-k">=3D</span> nums<span class=3D"pl-k">.</span>lengt=
h;=0A        <span class=3D"pl-k">int</span> idx <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A        <span c=
lass=3D"pl-k">for</span>(<span class=3D"pl-k">int</span> i <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <span=
 class=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span>){=0A=
            <span class=3D"pl-k">if</span>(nums[i] <span class=3D=
"pl-k">!=3D</span> <span class=3D"pl-c1">0</span>) nums[idx<span=20=
class=3D"pl-k">++</span>] <span class=3D"pl-k">=3D</span> nums[i]=
;=0A        }=0A        <span class=3D"pl-k">while</span>(idx <sp=
an class=3D"pl-k">&lt;</span> n){=0A            nums[idx<span cla=
ss=3D"pl-k">++</span>] <span class=3D"pl-k">=3D</span> <span clas=
s=3D"pl-c1">0</span>;=0A        }=0A    }</pre></div><p>=E4=B8=80=
=E4=B8=AA=E6=95=B0=E7=BB=84=E5=85=83=E7=B4=A0=E5=9C=A8 [1, n] =E4=
=B9=8B=E9=97=B4=EF=BC=8C=E5=85=B6=E4=B8=AD=E4=B8=80=E4=B8=AA=E6=95=
=B0=E8=A2=AB=E6=9B=BF=E6=8D=A2=E4=B8=BA=E5=8F=A6=E4=B8=80=E4=B8=AA=
=E6=95=B0=EF=BC=8C=E6=89=BE=E5=87=BA=E4=B8=A2=E5=A4=B1=E7=9A=84=E6=
=95=B0=E5=92=8C=E9=87=8D=E5=A4=8D=E7=9A=84=E6=95=B0</p><p><a href=
=3D"https://leetcode.com/problems/set-mismatch/description/" targ=
et=3D"_blank">Leetcode : 645. Set Mismatch (Easy)</a></p><p>=E6=9C=
=80=E7=9B=B4=E6=8E=A5=E7=9A=84=E6=96=B9=E6=B3=95=E6=98=AF=E5=85=88=
=E5=AF=B9=E6=95=B0=E7=BB=84=E8=BF=9B=E8=A1=8C=E6=8E=92=E5=BA=8F=EF=
=BC=8C=E8=BF=99=E7=A7=8D=E6=96=B9=E6=B3=95=E6=97=B6=E9=97=B4=E5=A4=
=8D=E6=9D=82=E5=BA=A6=E4=B8=BA O(nlogn)=EF=BC=8C=E6=9C=AC=E9=A2=98=
=E5=8F=AF=E4=BB=A5=E4=BB=A5 O(n) =E7=9A=84=E6=97=B6=E9=97=B4=E5=A4=
=8D=E6=9D=82=E5=BA=A6=E3=80=81O(1) =E7=A9=BA=E9=97=B4=E5=A4=8D=E6=
=9D=82=E5=BA=A6=E6=9D=A5=E6=B1=82=E8=A7=A3=E3=80=82</p><p>=E4=B8=BB=
=E8=A6=81=E6=80=9D=E6=83=B3=E6=98=AF=E8=AE=A9=E9=80=9A=E8=BF=87=E4=
=BA=A4=E6=8D=A2=E6=95=B0=E7=BB=84=E5=85=83=E7=B4=A0=EF=BC=8C=E4=BD=
=BF=E5=BE=97=E6=95=B0=E7=BB=84=E4=B8=8A=E7=9A=84=E5=85=83=E7=B4=A0=
=E5=9C=A8=E6=AD=A3=E7=A1=AE=E7=9A=84=E4=BD=8D=E7=BD=AE=E4=B8=8A=E3=
=80=82</p><p>=E9=81=8D=E5=8E=86=E6=95=B0=E7=BB=84=EF=BC=8C=E5=A6=82=
=E6=9E=9C=E7=AC=AC i =E4=BD=8D=E4=B8=8A=E7=9A=84=E5=85=83=E7=B4=A0=
=E4=B8=8D=E6=98=AF i + 1 =EF=BC=8C=E9=82=A3=E4=B9=88=E5=B0=B1=E4=BA=
=A4=E6=8D=A2=E7=AC=AC i =E4=BD=8D =E5=92=8C nums[i] - 1 =E4=BD=8D=
=E4=B8=8A=E7=9A=84=E5=85=83=E7=B4=A0=EF=BC=8C=E4=BD=BF=E5=BE=97 n=
um[i] - 1 =E7=9A=84=E5=85=83=E7=B4=A0=E4=B8=BA nums[i] =EF=BC=8C=E4=
=B9=9F=E5=B0=B1=E6=98=AF=E8=AF=A5=E4=BD=8D=E7=9A=84=E5=85=83=E7=B4=
=A0=E6=98=AF=E6=AD=A3=E7=A1=AE=E7=9A=84=E3=80=82=E4=BA=A4=E6=8D=A2=
=E6=93=8D=E4=BD=9C=E9=9C=80=E8=A6=81=E5=BE=AA=E7=8E=AF=E8=BF=9B=E8=
=A1=8C=EF=BC=8C=E5=9B=A0=E4=B8=BA=E4=B8=80=E6=AC=A1=E4=BA=A4=E6=8D=
=A2=E6=B2=A1=E5=8A=9E=E6=B3=95=E4=BD=BF=E5=BE=97=E7=AC=AC i =E4=BD=
=8D=E4=B8=8A=E7=9A=84=E5=85=83=E7=B4=A0=E6=98=AF=E6=AD=A3=E7=A1=AE=
=E7=9A=84=E3=80=82=E4=BD=86=E6=98=AF=E8=A6=81=E4=BA=A4=E6=8D=A2=E7=
=9A=84=E4=B8=A4=E4=B8=AA=E5=85=83=E7=B4=A0=E5=8F=AF=E8=83=BD=E5=B0=
=B1=E6=98=AF=E9=87=8D=E5=A4=8D=E5=85=83=E7=B4=A0=EF=BC=8C=E9=82=A3=
=E4=B9=88=E5=BE=AA=E7=8E=AF=E5=B0=B1=E5=8F=AF=E8=83=BD=E6=B0=B8=E8=
=BF=9C=E8=BF=9B=E8=A1=8C=E4=B8=8B=E5=8E=BB=EF=BC=8C=E7=BB=88=E6=AD=
=A2=E5=BE=AA=E7=8E=AF=E7=9A=84=E6=96=B9=E6=B3=95=E6=98=AF=E5=8A=A0=
=E4=B8=8A nums[i] !=3D nums[nums[i] - 1 =E6=9D=A1=E4=BB=B6=E3=80=82=
</p><p>=E7=B1=BB=E4=BC=BC=E9=A2=98=E7=9B=AE=EF=BC=9A</p><ul><li><=
a href=3D"https://leetcode.com/problems/find-all-numbers-disappea=
red-in-an-array/description/" target=3D"_blank">Leetcode :448. Fi=
nd All Numbers Disappeared in an Array (Easy)</a>=EF=BC=8C=E5=AF=BB=
=E6=89=BE=E6=89=80=E6=9C=89=E4=B8=A2=E5=A4=B1=E7=9A=84=E5=85=83=E7=
=B4=A0</li><li><a href=3D"https://leetcode.com/problems/find-all-=
duplicates-in-an-array/description/" target=3D"_blank">Leetcode :=
 442. Find All Duplicates in an Array (Medium)</a>=EF=BC=8C=E5=AF=
=BB=E6=89=BE=E6=89=80=E6=9C=89=E9=87=8D=E5=A4=8D=E7=9A=84=E5=85=83=
=E7=B4=A0=E3=80=82</li></ul><div class=3D"highlight highlight-sou=
rce-java"><pre><span class=3D"pl-k">public</span> <span class=3D"=
pl-k">int</span>[] findErrorNums(<span class=3D"pl-k">int</span>[=
] nums) {=0A    <span class=3D"pl-k">for</span>(<span class=3D"pl=
-k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D"p=
l-c1">0</span>; i <span class=3D"pl-k">&lt;</span> nums<span clas=
s=3D"pl-k">.</span>length; i<span class=3D"pl-k">++</span>){=0A =20=
      <span class=3D"pl-k">while</span>(nums[i] <span class=3D"pl=
-k">!=3D</span> i <span class=3D"pl-k">+</span> <span class=3D"pl=
-c1">1</span> <span class=3D"pl-k">&amp;&amp;</span> nums[i] <spa=
n class=3D"pl-k">!=3D</span> nums[nums[i] <span class=3D"pl-k">-<=
/span> <span class=3D"pl-c1">1</span>]) swap(nums, i, nums[i] <sp=
an class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>);=0A  =20=
 }=0A    =0A    <span class=3D"pl-k">for</span>(<span class=3D"pl=
-k">int</span> i <span class=3D"pl-k">=3D</span> <span class=3D"p=
l-c1">0</span>; i <span class=3D"pl-k">&lt;</span> nums<span clas=
s=3D"pl-k">.</span>length; i<span class=3D"pl-k">++</span>){=0A =20=
      <span class=3D"pl-k">if</span>(i <span class=3D"pl-k">+</sp=
an> <span class=3D"pl-c1">1</span> <span class=3D"pl-k">!=3D</spa=
n> nums[i]) <span class=3D"pl-k">return</span> <span class=3D"pl-=
k">new</span> <span class=3D"pl-smi">int</span>[]{nums[i], i <spa=
n class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>};=0A   =20=
}=0A    =0A    <span class=3D"pl-k">return</span> <span class=3D"=
pl-c1">null</span>;=0A}=0A=0A<span class=3D"pl-k">private</span>=20=
<span class=3D"pl-k">void</span> swap(<span class=3D"pl-k">int</s=
pan>[] nums, <span class=3D"pl-k">int</span> i, <span class=3D"pl=
-k">int</span> j){=0A    <span class=3D"pl-k">int</span> tmp <spa=
n class=3D"pl-k">=3D</span> nums[i];=0A    nums[i] <span class=3D=
"pl-k">=3D</span> nums[j];=0A    nums[j] <span class=3D"pl-k">=3D=
</span> tmp;=0A}</pre></div><p>=E6=89=BE=E5=87=BA=E6=95=B0=E7=BB=84=
=E4=B8=AD=E9=87=8D=E5=A4=8D=E7=9A=84=E6=95=B0=EF=BC=8C=E6=95=B0=E7=
=BB=84=E5=80=BC=E5=9C=A8 [0, n-1] =E4=B9=8B=E9=97=B4</p><p><a hre=
f=3D"https://leetcode.com/problems/find-the-duplicate-number/desc=
ription/" target=3D"_blank">Leetcode : 287. Find the Duplicate Nu=
mber (Medium)</a></p><p>=E4=BA=8C=E5=88=86=E6=9F=A5=E6=89=BE=E8=A7=
=A3=E6=B3=95=EF=BC=9A</p><div class=3D"highlight highlight-source=
-java"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-=
k">int</span> findDuplicate(<span class=3D"pl-k">int</span>[] num=
s) {=0A     <span class=3D"pl-k">int</span> l <span class=3D"pl-k=
">=3D</span> <span class=3D"pl-c1">1</span>, h <span class=3D"pl-=
k">=3D</span> nums<span class=3D"pl-k">.</span>length <span class=
=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>;=0A     <span c=
lass=3D"pl-k">while</span> (l <span class=3D"pl-k">&lt;=3D</span>=
 h) {=0A         <span class=3D"pl-k">int</span> mid <span class=3D=
"pl-k">=3D</span> l <span class=3D"pl-k">+</span> (h <span class=3D=
"pl-k">-</span> l) <span class=3D"pl-k">/</span> <span class=3D"p=
l-c1">2</span>;=0A         <span class=3D"pl-k">int</span> cnt <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A=20=
        <span class=3D"pl-k">for</span> (<span class=3D"pl-k">int=
</span> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0=
</span>; i <span class=3D"pl-k">&lt;</span> nums<span class=3D"pl=
-k">.</span>length; i<span class=3D"pl-k">++</span>) {=0A       =20=
     <span class=3D"pl-k">if</span> (nums[i] <span class=3D"pl-k"=
>&lt;=3D</span> mid) cnt<span class=3D"pl-k">++</span>;=0A      =20=
  }=0A         <span class=3D"pl-k">if</span> (cnt <span class=3D=
"pl-k">&gt;</span> mid) h <span class=3D"pl-k">=3D</span> mid <sp=
an class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>;=0A   =20=
     <span class=3D"pl-k">else</span> l <span class=3D"pl-k">=3D<=
/span> mid <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1<=
/span>;=0A     }=0A     <span class=3D"pl-k">return</span> l;=0A}=
</pre></div><p>=E5=8F=8C=E6=8C=87=E9=92=88=E8=A7=A3=E6=B3=95=EF=BC=
=8C=E7=B1=BB=E4=BC=BC=E4=BA=8E=E6=9C=89=E7=8E=AF=E9=93=BE=E8=A1=A8=
=E4=B8=AD=E6=89=BE=E5=87=BA=E7=8E=AF=E7=9A=84=E5=85=A5=E5=8F=A3=EF=
=BC=9A</p><div class=3D"highlight highlight-source-java"><pre><sp=
an class=3D"pl-k">public</span> <span class=3D"pl-k">int</span> f=
indDuplicate(<span class=3D"pl-k">int</span>[] nums) {=0A      <s=
pan class=3D"pl-k">int</span> slow <span class=3D"pl-k">=3D</span=
> nums[<span class=3D"pl-c1">0</span>], fast <span class=3D"pl-k"=
>=3D</span> nums[nums[<span class=3D"pl-c1">0</span>]];=0A      <=
span class=3D"pl-k">while</span> (slow <span class=3D"pl-k">!=3D<=
/span> fast) {=0A          slow <span class=3D"pl-k">=3D</span> n=
ums[slow];=0A          fast <span class=3D"pl-k">=3D</span> nums[=
nums[fast]];=0A      }=0A=0A      fast <span class=3D"pl-k">=3D</=
span> <span class=3D"pl-c1">0</span>;=0A      <span class=3D"pl-k=
">while</span> (slow <span class=3D"pl-k">!=3D</span> fast) {=0A=20=
         slow <span class=3D"pl-k">=3D</span> nums[slow];=0A    =20=
     fast <span class=3D"pl-k">=3D</span> nums[fast];=0A      }=0A=
      <span class=3D"pl-k">return</span> slow;=0A}</pre></div><h3=
>=E6=9C=89=E5=BA=8F=E7=9F=A9=E9=98=B5</h3><p>=E6=9C=89=E5=BA=8F=E7=
=9F=A9=E9=98=B5=E6=8C=87=E7=9A=84=E6=98=AF=E8=A1=8C=E5=92=8C=E5=88=
=97=E5=88=86=E5=88=AB=E6=9C=89=E5=BA=8F=E7=9A=84=E7=9F=A9=E9=98=B5=
=E3=80=82</p><p>=E4=B8=80=E8=88=AC=E5=8F=AF=E4=BB=A5=E5=88=A9=E7=94=
=A8=E6=9C=89=E5=BA=8F=E6=80=A7=E4=BD=BF=E7=94=A8=E4=BA=8C=E5=88=86=
=E6=9F=A5=E6=89=BE=E6=96=B9=E6=B3=95=E3=80=82</p><div class=3D"hi=
ghlight highlight-text-html-basic"><pre>[=0A   [ 1,  5,  9],=0A =20=
 [10, 11, 13],=0A   [12, 13, 15]=0A]</pre></div><p>=E6=9C=89=E5=BA=
=8F=E7=9F=A9=E9=98=B5=E6=9F=A5=E6=89=BE</p><p><a href=3D"https://=
leetcode.com/problems/search-a-2d-matrix-ii/description/" target=3D=
"_blank">Leetocde : 240. Search a 2D Matrix II (Medium)</a></p><d=
iv class=3D"highlight highlight-source-java"><pre><span class=3D"=
pl-k">public</span> <span class=3D"pl-k">boolean</span> searchMat=
rix(<span class=3D"pl-k">int</span>[][] matrix, <span class=3D"pl=
-k">int</span> target) {=0A    <span class=3D"pl-k">if</span> (ma=
trix <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">nul=
l</span> <span class=3D"pl-k">||</span> matrix<span class=3D"pl-k=
">.</span>length <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">0</span> <span class=3D"pl-k">||</span> matrix[<span clas=
s=3D"pl-c1">0</span>]<span class=3D"pl-k">.</span>length <span cl=
ass=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>) <span=20=
class=3D"pl-k">return</span> <span class=3D"pl-c1">false</span>;=0A=
    <span class=3D"pl-k">int</span> m <span class=3D"pl-k">=3D</s=
pan> matrix<span class=3D"pl-k">.</span>length, n <span class=3D"=
pl-k">=3D</span> matrix[<span class=3D"pl-c1">0</span>]<span clas=
s=3D"pl-k">.</span>length;=0A    <span class=3D"pl-k">int</span>=20=
row <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span=
>, col <span class=3D"pl-k">=3D</span> n <span class=3D"pl-k">-</=
span> <span class=3D"pl-c1">1</span>;=0A    <span class=3D"pl-k">=
while</span> (row <span class=3D"pl-k">&lt;</span> m <span class=3D=
"pl-k">&amp;&amp;</span> col <span class=3D"pl-k">&gt;=3D</span>=20=
<span class=3D"pl-c1">0</span>) {=0A        <span class=3D"pl-k">=
if</span> (target <span class=3D"pl-k">=3D=3D</span> matrix[row][=
col]) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">tr=
ue</span>;=0A        <span class=3D"pl-k">else</span> <span class=
=3D"pl-k">if</span> (target <span class=3D"pl-k">&lt;</span> matr=
ix[row][col]) col<span class=3D"pl-k">--</span>;=0A        <span=20=
class=3D"pl-k">else</span> row<span class=3D"pl-k">++</span>;=0A=20=
   }=0A    <span class=3D"pl-k">return</span> <span class=3D"pl-c=
1">false</span>;=0A}</pre></div><p>=E6=9C=89=E5=BA=8F=E7=9F=A9=E9=
=98=B5=E7=9A=84 Kth Element</p><p><a href=3D"https://leetcode.com=
/problems/kth-smallest-element-in-a-sorted-matrix/description/" t=
arget=3D"_blank">Leetcode : 378. Kth Smallest Element in a Sorted=
 Matrix ((Medium))</a></p><div class=3D"highlight highlight-text-=
html-basic"><pre>matrix =3D [=0A  [ 1,  5,  9],=0A  [10, 11, 13],=
=0A  [12, 13, 15]=0A],=0Ak =3D 8,=0A=0Areturn 13.</pre></div><p>=E8=
=A7=A3=E9=A2=98=E5=8F=82=E8=80=83=EF=BC=9A<a href=3D"https://leet=
code.com/problems/kth-smallest-element-in-a-sorted-matrix/discuss=
/85173" target=3D"_blank">Share my thoughts and Clean Java Code</=
a></p><p>=E4=BA=8C=E5=88=86=E6=9F=A5=E6=89=BE=E8=A7=A3=E6=B3=95=EF=
=BC=9A</p><div class=3D"highlight highlight-source-java"><pre><sp=
an class=3D"pl-k">public</span> <span class=3D"pl-k">int</span> k=
thSmallest(<span class=3D"pl-k">int</span>[][] matrix, <span clas=
s=3D"pl-k">int</span> k) {=0A    <span class=3D"pl-k">int</span>=20=
m <span class=3D"pl-k">=3D</span> matrix<span class=3D"pl-k">.</s=
pan>length, n <span class=3D"pl-k">=3D</span> matrix[<span class=3D=
"pl-c1">0</span>]<span class=3D"pl-k">.</span>length;=0A    <span=
 class=3D"pl-k">int</span> lo <span class=3D"pl-k">=3D</span> mat=
rix[<span class=3D"pl-c1">0</span>][<span class=3D"pl-c1">0</span=
>], hi <span class=3D"pl-k">=3D</span> matrix[m <span class=3D"pl=
-k">-</span> <span class=3D"pl-c1">1</span>][n <span class=3D"pl-=
k">-</span> <span class=3D"pl-c1">1</span>];=0A    <span class=3D=
"pl-k">while</span>(lo <span class=3D"pl-k">&lt;=3D</span> hi) {=0A=
        <span class=3D"pl-k">int</span> mid <span class=3D"pl-k">=
=3D</span> lo <span class=3D"pl-k">+</span> (hi <span class=3D"pl=
-k">-</span> lo) <span class=3D"pl-k">/</span> <span class=3D"pl-=
c1">2</span>;=0A        <span class=3D"pl-k">int</span> cnt <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A   =20=
    <span class=3D"pl-k">for</span>(<span class=3D"pl-k">int</spa=
n> i <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</spa=
n>; i <span class=3D"pl-k">&lt;</span> m; i<span class=3D"pl-k">+=
+</span>) {=0A            <span class=3D"pl-k">for</span>(<span c=
lass=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> <span=20=
class=3D"pl-c1">0</span>; j <span class=3D"pl-k">&lt;</span> n <s=
pan class=3D"pl-k">&amp;&amp;</span> matrix[i][j] <span class=3D"=
pl-k">&lt;=3D</span> mid; j<span class=3D"pl-k">++</span>) {=0A =20=
              cnt<span class=3D"pl-k">++</span>;=0A            }=0A=
        }=0A        <span class=3D"pl-k">if</span>(cnt <span clas=
s=3D"pl-k">&lt;</span> k) lo <span class=3D"pl-k">=3D</span> mid=20=
<span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>;=0A=20=
       <span class=3D"pl-k">else</span> hi <span class=3D"pl-k">=3D=
</span> mid <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1=
</span>;=0A    }=0A    <span class=3D"pl-k">return</span> lo;=0A}=
</pre></div><p>=E5=A0=86=E8=A7=A3=E6=B3=95=EF=BC=9A</p><div class=
=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">pu=
blic</span> <span class=3D"pl-k">int</span> kthSmallest(<span cla=
ss=3D"pl-k">int</span>[][] matrix, <span class=3D"pl-k">int</span=
> k) {=0A    <span class=3D"pl-k">int</span> m <span class=3D"pl-=
k">=3D</span> matrix<span class=3D"pl-k">.</span>length, n <span=20=
class=3D"pl-k">=3D</span> matrix[<span class=3D"pl-c1">0</span>]<=
span class=3D"pl-k">.</span>length;=0A    <span class=3D"pl-k">Pr=
iorityQueue&lt;<span class=3D"pl-smi">Tuple</span>&gt;</span> pq=20=
<span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <=
span class=3D"pl-k">PriorityQueue&lt;<span class=3D"pl-smi">Tuple=
</span>&gt;</span>();=0A    <span class=3D"pl-k">for</span>(<span=
 class=3D"pl-k">int</span> j <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-c1">0</span>; j <span class=3D"pl-k">&lt;</span> n;=
 j<span class=3D"pl-k">++</span>) pq<span class=3D"pl-k">.</span>=
offer(<span class=3D"pl-k">new</span> <span class=3D"pl-smi">Tupl=
e</span>(<span class=3D"pl-c1">0</span>, j, matrix[<span class=3D=
"pl-c1">0</span>][j]));=0A    <span class=3D"pl-k">for</span>(<sp=
an class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <s=
pan class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span>=20=
k <span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>; i=
<span class=3D"pl-k">++</span>) { <span class=3D"pl-c"><span clas=
s=3D"pl-c">//</span> =E5=B0=8F=E6=A0=B9=E5=A0=86=EF=BC=8C=E5=8E=BB=
=E6=8E=89 k - 1 =E4=B8=AA=E5=A0=86=E9=A1=B6=E5=85=83=E7=B4=A0=EF=BC=
=8C=E6=AD=A4=E6=97=B6=E5=A0=86=E9=A1=B6=E5=85=83=E7=B4=A0=E5=B0=B1=
=E6=98=AF=E7=AC=AC k =E7=9A=84=E6=95=B0</span>=0A        <span cl=
ass=3D"pl-smi">Tuple</span> t <span class=3D"pl-k">=3D</span> pq<=
span class=3D"pl-k">.</span>poll();=0A        <span class=3D"pl-k=
">if</span>(t<span class=3D"pl-k">.</span>x <span class=3D"pl-k">=
=3D=3D</span> m <span class=3D"pl-k">-</span> <span class=3D"pl-c=
1">1</span>) <span class=3D"pl-k">continue</span>;=0A        pq<s=
pan class=3D"pl-k">.</span>offer(<span class=3D"pl-k">new</span>=20=
<span class=3D"pl-smi">Tuple</span>(t<span class=3D"pl-k">.</span=
>x <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>,=20=
t<span class=3D"pl-k">.</span>y, matrix[t<span class=3D"pl-k">.</=
span>x <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</spa=
n>][t<span class=3D"pl-k">.</span>y]));=0A    }=0A    <span class=
=3D"pl-k">return</span> pq<span class=3D"pl-k">.</span>poll()<spa=
n class=3D"pl-k">.</span>val;=0A}=0A=0A<span class=3D"pl-k">class=
</span> <span class=3D"pl-en">Tuple</span> <span class=3D"pl-k">i=
mplements</span> <span class=3D"pl-e">Comparable&lt;<span class=3D=
"pl-smi">Tuple</span>&gt;</span> {=0A    <span class=3D"pl-k">int=
</span> x, y, val;=0A    <span class=3D"pl-k">public</span> <span=
 class=3D"pl-en">Tuple</span>(<span class=3D"pl-k">int</span> <sp=
an class=3D"pl-v">x</span>, <span class=3D"pl-k">int</span> <span=
 class=3D"pl-v">y</span>, <span class=3D"pl-k">int</span> <span c=
lass=3D"pl-v">val</span>) {=0A        <span class=3D"pl-c1">this<=
/span><span class=3D"pl-k">.</span>x <span class=3D"pl-k">=3D</sp=
an> x; <span class=3D"pl-c1">this</span><span class=3D"pl-k">.</s=
pan>y <span class=3D"pl-k">=3D</span> y; <span class=3D"pl-c1">th=
is</span><span class=3D"pl-k">.</span>val <span class=3D"pl-k">=3D=
</span> val;=0A    }=0A=0A    <span class=3D"pl-k">@Override</spa=
n>=0A    <span class=3D"pl-k">public</span> <span class=3D"pl-k">=
int</span> <span class=3D"pl-en">compareTo</span>(<span class=3D"=
pl-smi">Tuple</span> <span class=3D"pl-v">that</span>) {=0A     =20=
  <span class=3D"pl-k">return</span> <span class=3D"pl-c1">this</=
span><span class=3D"pl-k">.</span>val <span class=3D"pl-k">-</spa=
n> that<span class=3D"pl-k">.</span>val;=0A    }=0A}</pre></div><=
h2>=E9=93=BE=E8=A1=A8</h2><p>=E5=88=A4=E6=96=AD=E4=B8=A4=E4=B8=AA=
=E9=93=BE=E8=A1=A8=E7=9A=84=E4=BA=A4=E7=82=B9</p><p><a href=3D"ht=
tps://leetcode.com/problems/intersection-of-two-linked-lists/desc=
ription/" target=3D"_blank">Leetcode : 160. Intersection of Two L=
inked Lists</a></p><div class=3D"highlight highlight-text-html-ba=
sic"><pre>A:          a1 =E2=86=92 a2=0A                  =E2=86=98=
=0A                    c1 =E2=86=92 c2 =E2=86=92 c3=0A          =20=
       =E2=86=97=0AB:    b1 =E2=86=92 b2 =E2=86=92 b3</pre></div>=
<p>=E8=A6=81=E6=B1=82=EF=BC=9A=E6=97=B6=E9=97=B4=E5=A4=8D=E6=9D=82=
=E5=BA=A6=E4=B8=BA O(n) =E7=A9=BA=E9=97=B4=E5=A4=8D=E6=9D=82=E5=BA=
=A6=E4=B8=BA O(1)</p><p>=E8=AE=BE A =E7=9A=84=E9=95=BF=E5=BA=A6=E4=
=B8=BA a + c=EF=BC=8CB =E7=9A=84=E9=95=BF=E5=BA=A6=E4=B8=BA b + c=
=EF=BC=8C=E5=85=B6=E4=B8=AD c =E4=B8=BA=E5=B0=BE=E9=83=A8=E5=85=AC=
=E5=85=B1=E9=83=A8=E5=88=86=E9=95=BF=E5=BA=A6=EF=BC=8C=E5=8F=AF=E7=
=9F=A5 a + c + b =3D b + c + a=E3=80=82</p><p>=E5=BD=93=E8=AE=BF=E9=
=97=AE A =E9=93=BE=E8=A1=A8=E7=9A=84=E6=8C=87=E9=92=88=E8=AE=BF=E9=
=97=AE=E5=88=B0=E9=93=BE=E8=A1=A8=E5=B0=BE=E9=83=A8=E6=97=B6=EF=BC=
=8C=E4=BB=A4=E5=AE=83=E4=BB=8E=E9=93=BE=E8=A1=A8 B =E7=9A=84=E5=A4=
=B4=E9=83=A8=E5=BC=80=E5=A7=8B=E8=AE=BF=E9=97=AE=E9=93=BE=E8=A1=A8=
 B=EF=BC=9B=E5=90=8C=E6=A0=B7=E5=9C=B0=EF=BC=8C=E5=BD=93=E8=AE=BF=
=E9=97=AE B =E9=93=BE=E8=A1=A8=E7=9A=84=E6=8C=87=E9=92=88=E8=AE=BF=
=E9=97=AE=E5=88=B0=E9=93=BE=E8=A1=A8=E5=B0=BE=E9=83=A8=E6=97=B6=EF=
=BC=8C=E4=BB=A4=E5=AE=83=E4=BB=8E=E9=93=BE=E8=A1=A8 A =E7=9A=84=E5=
=A4=B4=E9=83=A8=E5=BC=80=E5=A7=8B=E8=AE=BF=E9=97=AE=E9=93=BE=E8=A1=
=A8 A=E3=80=82=E8=BF=99=E6=A0=B7=E5=B0=B1=E8=83=BD=E6=8E=A7=E5=88=
=B6=E8=AE=BF=E9=97=AE A =E5=92=8C B =E4=B8=A4=E4=B8=AA=E9=93=BE=E8=
=A1=A8=E7=9A=84=E6=8C=87=E9=92=88=E8=83=BD=E5=90=8C=E6=97=B6=E8=AE=
=BF=E9=97=AE=E5=88=B0=E4=BA=A4=E7=82=B9=E3=80=82</p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">publi=
c</span> <span class=3D"pl-smi">ListNode</span> getIntersectionNo=
de(<span class=3D"pl-smi">ListNode</span> headA, <span class=3D"p=
l-smi">ListNode</span> headB) {=0A    <span class=3D"pl-k">if</sp=
an>(headA <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1=
">null</span> <span class=3D"pl-k">||</span> headB <span class=3D=
"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <span cla=
ss=3D"pl-k">return</span> <span class=3D"pl-c1">null</span>;=0A =20=
  <span class=3D"pl-smi">ListNode</span> l1 <span class=3D"pl-k">=
=3D</span> headA, l2 <span class=3D"pl-k">=3D</span> headB;=0A  =20=
 <span class=3D"pl-k">while</span>(l1 <span class=3D"pl-k">!=3D</=
span> l2){=0A        l1 <span class=3D"pl-k">=3D</span> (l1 <span=
 class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>)=20=
<span class=3D"pl-k">?</span> headB <span class=3D"pl-k">:</span>=
 l1<span class=3D"pl-k">.</span>next;=0A        l2 <span class=3D=
"pl-k">=3D</span> (l2 <span class=3D"pl-k">=3D=3D</span> <span cl=
ass=3D"pl-c1">null</span>) <span class=3D"pl-k">?</span> headA <s=
pan class=3D"pl-k">:</span> l2<span class=3D"pl-k">.</span>next;=0A=
    }=0A    <span class=3D"pl-k">return</span> l1;=0A}</pre></div=
><p>=E5=A6=82=E6=9E=9C=E5=8F=AA=E6=98=AF=E5=88=A4=E6=96=AD=E6=98=AF=
=E5=90=A6=E5=AD=98=E5=9C=A8=E4=BA=A4=E7=82=B9=EF=BC=8C=E9=82=A3=E4=
=B9=88=E5=B0=B1=E6=98=AF=E5=8F=A6=E4=B8=80=E4=B8=AA=E9=97=AE=E9=A2=
=98=EF=BC=8C=E5=8D=B3 =E7=BC=96=E7=A8=8B=E4=B9=8B=E7=BE=8E=EF=BC=9A=
3.6 =E7=9A=84=E9=97=AE=E9=A2=98=E3=80=82=E6=9C=89=E4=B8=A4=E7=A7=8D=
=E8=A7=A3=E6=B3=95=EF=BC=9A=E6=8A=8A=E7=AC=AC=E4=B8=80=E4=B8=AA=E9=
=93=BE=E8=A1=A8=E7=9A=84=E7=BB=93=E5=B0=BE=E8=BF=9E=E6=8E=A5=E5=88=
=B0=E7=AC=AC=E4=BA=8C=E4=B8=AA=E9=93=BE=E8=A1=A8=E7=9A=84=E5=BC=80=
=E5=A4=B4=EF=BC=8C=E7=9C=8B=E7=AC=AC=E4=BA=8C=E4=B8=AA=E9=93=BE=E8=
=A1=A8=E6=98=AF=E5=90=A6=E5=AD=98=E5=9C=A8=E7=8E=AF=EF=BC=9B=E6=88=
=96=E8=80=85=E7=9B=B4=E6=8E=A5=E6=AF=94=E8=BE=83=E7=AC=AC=E4=B8=80=
=E4=B8=AA=E9=93=BE=E8=A1=A8=E6=9C=80=E5=90=8E=E4=B8=80=E4=B8=AA=E8=
=8A=82=E7=82=B9=E5=92=8C=E7=AC=AC=E4=BA=8C=E4=B8=AA=E9=93=BE=E8=A1=
=A8=E6=9C=80=E5=90=8E=E4=B8=80=E4=B8=AA=E8=8A=82=E7=82=B9=E6=98=AF=
=E5=90=A6=E7=9B=B8=E5=90=8C=E3=80=82</p><p>=E9=93=BE=E8=A1=A8=E5=8F=
=8D=E8=BD=AC</p><p><a href=3D"https://leetcode.com/problems/rever=
se-linked-list/description/" target=3D"_blank">Leetcode : 206. Re=
verse Linked List</a></p><p>=E5=A4=B4=E6=8F=92=E6=B3=95=E8=83=BD=E5=
=A4=9F=E6=8C=89=E9=80=86=E5=BA=8F=E6=9E=84=E5=BB=BA=E9=93=BE=E8=A1=
=A8=E3=80=82</p><div class=3D"highlight highlight-source-java"><p=
re><span class=3D"pl-k">public</span> <span class=3D"pl-smi">List=
Node</span> reverseList(<span class=3D"pl-smi">ListNode</span> he=
ad) {=0A    <span class=3D"pl-smi">ListNode</span> newHead <span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-c1">null</span>; <spa=
n class=3D"pl-c"><span class=3D"pl-c">//</span> =E8=AE=BE=E4=B8=BA=
 null =EF=BC=8C=E4=BD=9C=E4=B8=BA=E6=96=B0=E9=93=BE=E8=A1=A8=E7=9A=
=84=E7=BB=93=E5=B0=BE</span>=0A    <span class=3D"pl-k">while</sp=
an>(head <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">n=
ull</span>){=0A        <span class=3D"pl-smi">ListNode</span> nex=
tNode <span class=3D"pl-k">=3D</span> head<span class=3D"pl-k">.<=
/span>next;=0A        head<span class=3D"pl-k">.</span>next <span=
 class=3D"pl-k">=3D</span> newHead;=0A        newHead <span class=
=3D"pl-k">=3D</span> head;=0A        head <span class=3D"pl-k">=3D=
</span> nextNode;=0A    }=0A    <span class=3D"pl-k">return</span=
> newHead;=0A}</pre></div><p>=E5=BD=92=E5=B9=B6=E4=B8=A4=E4=B8=AA=
=E6=9C=89=E5=BA=8F=E7=9A=84=E9=93=BE=E8=A1=A8</p><p><a href=3D"ht=
tps://leetcode.com/problems/merge-two-sorted-lists/description/"=20=
target=3D"_blank">Leetcode : 21. Merge Two Sorted Lists</a></p><p=
>=E9=93=BE=E8=A1=A8=E5=92=8C=E6=A0=91=E4=B8=80=E6=A0=B7=EF=BC=8C=E5=
=8F=AF=E4=BB=A5=E7=94=A8=E9=80=92=E5=BD=92=E6=96=B9=E5=BC=8F=E6=9D=
=A5=E5=AE=9A=E4=B9=89=EF=BC=9A=E9=93=BE=E8=A1=A8=E6=98=AF=E7=A9=BA=
=E8=8A=82=E7=82=B9=EF=BC=8C=E6=88=96=E8=80=85=E6=9C=89=E4=B8=80=E4=
=B8=AA=E5=80=BC=E5=92=8C=E4=B8=80=E4=B8=AA=E6=8C=87=E5=90=91=E4=B8=
=8B=E4=B8=80=E4=B8=AA=E9=93=BE=E8=A1=A8=E7=9A=84=E6=8C=87=E9=92=88=
=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=BE=88=E5=A4=9A=E9=93=BE=E8=A1=A8=E9=
=97=AE=E9=A2=98=E5=8F=AF=E4=BB=A5=E7=94=A8=E9=80=92=E5=BD=92=E6=9D=
=A5=E5=A4=84=E7=90=86=E3=80=82</p><div class=3D"highlight highlig=
ht-source-java"><pre><span class=3D"pl-k">public</span> <span cla=
ss=3D"pl-smi">ListNode</span> mergeTwoLists(<span class=3D"pl-smi=
">ListNode</span> l1, <span class=3D"pl-smi">ListNode</span> l2)=20=
{=0A    <span class=3D"pl-k">if</span>(l1 <span class=3D"pl-k">=3D=
=3D</span> <span class=3D"pl-c1">null</span>) <span class=3D"pl-k=
">return</span> l2;=0A    <span class=3D"pl-k">if</span>(l2 <span=
 class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>)=20=
<span class=3D"pl-k">return</span> l1;=0A    <span class=3D"pl-sm=
i">ListNode</span> newHead <span class=3D"pl-k">=3D</span> <span=20=
class=3D"pl-c1">null</span>;=0A    <span class=3D"pl-k">if</span>=
(l1<span class=3D"pl-k">.</span>val <span class=3D"pl-k">&lt;</sp=
an> l2<span class=3D"pl-k">.</span>val){=0A        newHead <span=20=
class=3D"pl-k">=3D</span> l1;=0A        newHead<span class=3D"pl-=
k">.</span>next <span class=3D"pl-k">=3D</span> mergeTwoLists(l1<=
span class=3D"pl-k">.</span>next, l2);=0A    } <span class=3D"pl-=
k">else</span>{=0A        newHead <span class=3D"pl-k">=3D</span>=
 l2;=0A        newHead<span class=3D"pl-k">.</span>next <span cla=
ss=3D"pl-k">=3D</span> mergeTwoLists(l1, l2<span class=3D"pl-k">.=
</span>next);=0A    }=0A    <span class=3D"pl-k">return</span> ne=
wHead;=0A}</pre></div><p>=E4=BB=8E=E6=9C=89=E5=BA=8F=E9=93=BE=E8=A1=
=A8=E4=B8=AD=E5=88=A0=E9=99=A4=E9=87=8D=E5=A4=8D=E8=8A=82=E7=82=B9=
</p><p><a href=3D"https://leetcode.com/problems/remove-duplicates=
-from-sorted-list/description/" target=3D"_blank">Leetcode : 83.=20=
Remove Duplicates from Sorted List (Easy)</a></p><div class=3D"hi=
ghlight highlight-source-java"><pre><span class=3D"pl-k">public</=
span> <span class=3D"pl-smi">ListNode</span> deleteDuplicates(<sp=
an class=3D"pl-smi">ListNode</span> head) {=0A    <span class=3D"=
pl-k">if</span>(head <span class=3D"pl-k">=3D=3D</span> <span cla=
ss=3D"pl-c1">null</span> <span class=3D"pl-k">||</span> head<span=
 class=3D"pl-k">.</span>next <span class=3D"pl-k">=3D=3D</span> <=
span class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</sp=
an> head;=0A    head<span class=3D"pl-k">.</span>next <span class=
=3D"pl-k">=3D</span> deleteDuplicates(head<span class=3D"pl-k">.<=
/span>next);=0A    <span class=3D"pl-k">return</span> head<span c=
lass=3D"pl-k">.</span>next <span class=3D"pl-k">!=3D</span> <span=
 class=3D"pl-c1">null</span> <span class=3D"pl-k">&amp;&amp;</spa=
n> head<span class=3D"pl-k">.</span>val <span class=3D"pl-k">=3D=3D=
</span> head<span class=3D"pl-k">.</span>next<span class=3D"pl-k"=
>.</span>val <span class=3D"pl-k">?</span> head<span class=3D"pl-=
k">.</span>next <span class=3D"pl-k">:</span> head;=0A}</pre></di=
v><p>=E5=9B=9E=E6=96=87=E9=93=BE=E8=A1=A8</p><p><a href=3D"https:=
//leetcode.com/problems/palindrome-linked-list/description/" targ=
et=3D"_blank">Leetcode : 234. Palindrome Linked List (Easy)</a></=
p><p>=E5=88=87=E6=88=90=E4=B8=A4=E5=8D=8A=EF=BC=8C=E6=8A=8A=E5=90=
=8E=E5=8D=8A=E6=AE=B5=E5=8F=8D=E8=BD=AC=EF=BC=8C=E7=84=B6=E5=90=8E=
=E6=AF=94=E8=BE=83=E4=B8=A4=E5=8D=8A=E6=98=AF=E5=90=A6=E7=9B=B8=E7=
=AD=89=E3=80=82</p><div class=3D"highlight highlight-source-java"=
><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">boo=
lean</span> isPalindrome(<span class=3D"pl-smi">ListNode</span> h=
ead) {=0A    <span class=3D"pl-k">if</span>(head <span class=3D"p=
l-k">=3D=3D</span> <span class=3D"pl-c1">null</span> <span class=3D=
"pl-k">||</span> head<span class=3D"pl-k">.</span>next <span clas=
s=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <span=
 class=3D"pl-k">return</span> <span class=3D"pl-c1">true</span>;=0A=
    <span class=3D"pl-smi">ListNode</span> slow <span class=3D"pl=
-k">=3D</span> head, fast <span class=3D"pl-k">=3D</span> head<sp=
an class=3D"pl-k">.</span>next;=0A    <span class=3D"pl-k">while<=
/span>(fast <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1=
">null</span> <span class=3D"pl-k">&amp;&amp;</span> fast<span cl=
ass=3D"pl-k">.</span>next <span class=3D"pl-k">!=3D</span> <span=20=
class=3D"pl-c1">null</span>){=0A        slow <span class=3D"pl-k"=
>=3D</span> slow<span class=3D"pl-k">.</span>next;=0A        fast=
 <span class=3D"pl-k">=3D</span> fast<span class=3D"pl-k">.</span=
>next<span class=3D"pl-k">.</span>next;=0A    }=0A=0A    <span cl=
ass=3D"pl-k">if</span>(fast <span class=3D"pl-k">!=3D</span> <spa=
n class=3D"pl-c1">null</span>){  <span class=3D"pl-c"><span class=
=3D"pl-c">//</span> =E5=81=B6=E6=95=B0=E8=8A=82=E7=82=B9=EF=BC=8C=
=E8=AE=A9 slow =E6=8C=87=E5=90=91=E4=B8=8B=E4=B8=80=E4=B8=AA=E8=8A=
=82=E7=82=B9</span>=0A        slow <span class=3D"pl-k">=3D</span=
> slow<span class=3D"pl-k">.</span>next;=0A    }=0A=0A    cut(hea=
d, slow); <span class=3D"pl-c"><span class=3D"pl-c">//</span> =E5=
=88=87=E6=88=90=E4=B8=A4=E4=B8=AA=E9=93=BE=E8=A1=A8</span>=0A   =20=
<span class=3D"pl-smi">ListNode</span> l1 <span class=3D"pl-k">=3D=
</span> head, l2 <span class=3D"pl-k">=3D</span> slow;=0A    l2 <=
span class=3D"pl-k">=3D</span> reverse(l2);=0A    <span class=3D"=
pl-k">return</span> isEqual(l1, l2);=0A}=0A=0A<span class=3D"pl-k=
">private</span> <span class=3D"pl-k">void</span> cut(<span class=
=3D"pl-smi">ListNode</span> head, <span class=3D"pl-smi">ListNode=
</span> cutNode){=0A    <span class=3D"pl-k">while</span>( head<s=
pan class=3D"pl-k">.</span>next <span class=3D"pl-k">!=3D</span>=20=
cutNode ) head <span class=3D"pl-k">=3D</span> head<span class=3D=
"pl-k">.</span>next;=0A    head<span class=3D"pl-k">.</span>next=20=
<span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">null</span>=
;=0A}=0A=0A<span class=3D"pl-k">private</span> <span class=3D"pl-=
smi">ListNode</span> reverse(<span class=3D"pl-smi">ListNode</spa=
n> head){=0A    <span class=3D"pl-smi">ListNode</span> newHead <s=
pan class=3D"pl-k">=3D</span> <span class=3D"pl-c1">null</span>;=0A=
    <span class=3D"pl-k">while</span>(head <span class=3D"pl-k">!=
=3D</span> <span class=3D"pl-c1">null</span>){=0A        <span cl=
ass=3D"pl-smi">ListNode</span> nextNode <span class=3D"pl-k">=3D<=
/span> head<span class=3D"pl-k">.</span>next;=0A        head<span=
 class=3D"pl-k">.</span>next <span class=3D"pl-k">=3D</span> newH=
ead;=0A        newHead <span class=3D"pl-k">=3D</span> head;=0A =20=
      head <span class=3D"pl-k">=3D</span> nextNode;=0A    }=0A =20=
  <span class=3D"pl-k">return</span> newHead;=0A}=0A=0A<span clas=
s=3D"pl-k">private</span> <span class=3D"pl-k">boolean</span> isE=
qual(<span class=3D"pl-smi">ListNode</span> l1, <span class=3D"pl=
-smi">ListNode</span> l2){=0A    <span class=3D"pl-k">while</span=
>(l1 <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">null<=
/span> <span class=3D"pl-k">&amp;&amp;</span> l2 <span class=3D"p=
l-k">!=3D</span> <span class=3D"pl-c1">null</span>){=0A        <s=
pan class=3D"pl-k">if</span>(l1<span class=3D"pl-k">.</span>val <=
span class=3D"pl-k">!=3D</span> l2<span class=3D"pl-k">.</span>va=
l) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">false=
</span>;=0A        l1 <span class=3D"pl-k">=3D</span> l1<span cla=
ss=3D"pl-k">.</span>next;=0A        l2 <span class=3D"pl-k">=3D</=
span> l2<span class=3D"pl-k">.</span>next;=0A    }=0A    <span cl=
ass=3D"pl-k">return</span> <span class=3D"pl-c1">true</span>;=0A}=
</pre></div><p>=E4=BB=8E=E9=93=BE=E8=A1=A8=E4=B8=AD=E5=88=A0=E9=99=
=A4=E8=8A=82=E7=82=B9</p><p><a href=3D"https://github.com/CyC2018=
/InterviewNotes/blob/master/notes" target=3D"_blank">=E7=BC=96=E7=
=A8=8B=E4=B9=8B=E7=BE=8E=EF=BC=9A3.4</a></p><p><a href=3D"https:/=
/github.com/CyC2018/InterviewNotes/blob/master/pics/2c968ec5-0967=
-49ce-ac06-f8f5c9ab33bc.jpg" target=3D"_blank"><img src=3D"D:\=E6=
=96=87=E6=A1=A3\My Knowledge\temp\969fb8f2-eb58-4891-86ea-51bce0e=
90052\128\index_files\0.4476754305459396.png" alt=3D""></a></p><d=
iv class=3D"highlight highlight-source-java"><pre><span class=3D"=
pl-smi">B</span><span class=3D"pl-k">.</span>val <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-smi">C</span><span class=3D"pl-=
k">.</span>val;=0A<span class=3D"pl-smi">B</span><span class=3D"p=
l-k">.</span>next <span class=3D"pl-k">=3D</span> <span class=3D"=
pl-smi">C</span><span class=3D"pl-k">.</span>next;</pre></div><p>=
=E9=93=BE=E8=A1=A8=E5=85=83=E7=B4=A0=E6=8C=89=E5=A5=87=E5=81=B6=E8=
=81=9A=E9=9B=86</p><p><a href=3D"https://leetcode.com/problems/od=
d-even-linked-list/description/" target=3D"_blank">Leetcode : 328=
. Odd Even Linked List (Medium)</a></p><div class=3D"highlight hi=
ghlight-source-java"><pre><span class=3D"pl-k">public</span> <spa=
n class=3D"pl-smi">ListNode</span> oddEvenList(<span class=3D"pl-=
smi">ListNode</span> head) {=0A    <span class=3D"pl-k">if</span>=
 (head <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">n=
ull</span>) {=0A        <span class=3D"pl-k">return</span> head;=0A=
    }=0A    <span class=3D"pl-smi">ListNode</span> odd <span clas=
s=3D"pl-k">=3D</span> head, even <span class=3D"pl-k">=3D</span>=20=
head<span class=3D"pl-k">.</span>next, evenHead <span class=3D"pl=
-k">=3D</span> even;=0A    <span class=3D"pl-k">while</span> (eve=
n <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">null</sp=
an> <span class=3D"pl-k">&amp;&amp;</span> even<span class=3D"pl-=
k">.</span>next <span class=3D"pl-k">!=3D</span> <span class=3D"p=
l-c1">null</span>) {=0A        odd<span class=3D"pl-k">.</span>ne=
xt <span class=3D"pl-k">=3D</span> odd<span class=3D"pl-k">.</spa=
n>next<span class=3D"pl-k">.</span>next;=0A        odd <span clas=
s=3D"pl-k">=3D</span> odd<span class=3D"pl-k">.</span>next;=0A  =20=
     even<span class=3D"pl-k">.</span>next <span class=3D"pl-k">=3D=
</span> even<span class=3D"pl-k">.</span>next<span class=3D"pl-k"=
>.</span>next;=0A        even <span class=3D"pl-k">=3D</span> eve=
n<span class=3D"pl-k">.</span>next;=0A    }=0A    odd<span class=3D=
"pl-k">.</span>next <span class=3D"pl-k">=3D</span> evenHead;=0A=20=
   <span class=3D"pl-k">return</span> head;=0A}</pre></div><h2>=E6=
=A0=91</h2><h3>=E9=80=92=E5=BD=92</h3><p>=E4=B8=80=E6=A3=B5=E6=A0=
=91=E8=A6=81=E4=B9=88=E6=98=AF=E7=A9=BA=E6=A0=91=EF=BC=8C=E8=A6=81=
=E4=B9=88=E6=9C=89=E4=B8=A4=E4=B8=AA=E6=8C=87=E9=92=88=EF=BC=8C=E6=
=AF=8F=E4=B8=AA=E6=8C=87=E9=92=88=E6=8C=87=E5=90=91=E4=B8=80=E6=A3=
=B5=E6=A0=91=E3=80=82=E6=A0=91=E6=98=AF=E4=B8=80=E7=A7=8D=E9=80=92=
=E5=BD=92=E7=BB=93=E6=9E=84=EF=BC=8C=E5=BE=88=E5=A4=9A=E6=A0=91=E7=
=9A=84=E9=97=AE=E9=A2=98=E5=8F=AF=E4=BB=A5=E4=BD=BF=E7=94=A8=E9=80=
=92=E5=BD=92=E6=9D=A5=E5=A4=84=E7=90=86=E3=80=82</p><p>=E6=A0=91=E7=
=9A=84=E9=AB=98=E5=BA=A6</p><p><a href=3D"https://leetcode.com/pr=
oblems/maximum-depth-of-binary-tree/description/" target=3D"_blan=
k">Leetcode : 104. Maximum Depth of Binary Tree (Easy)</a></p><di=
v class=3D"highlight highlight-source-java"><pre><span class=3D"p=
l-k">public</span> <span class=3D"pl-k">int</span> maxDepth(<span=
 class=3D"pl-smi">TreeNode</span> root) {=0A    <span class=3D"pl=
-k">if</span>(root <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span> <span=20=
class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">return</span=
> <span class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>=
max(maxDepth(root<span class=3D"pl-k">.</span>left), maxDepth(roo=
t<span class=3D"pl-k">.</span>right)) <span class=3D"pl-k">+</spa=
n> <span class=3D"pl-c1">1</span>;=0A}</pre></div><p>=E7=BF=BB=E8=
=BD=AC=E6=A0=91</p><p><a href=3D"https://leetcode.com/problems/in=
vert-binary-tree/description/" target=3D"_blank">Leetcode : 226.=20=
Invert Binary Tree (Easy)</a></p><div class=3D"highlight highligh=
t-source-java"><pre><span class=3D"pl-k">public</span> <span clas=
s=3D"pl-smi">TreeNode</span> invertTree(<span class=3D"pl-smi">Tr=
eeNode</span> root) {=0A    <span class=3D"pl-k">if</span>(root <=
span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</spa=
n>) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">null=
</span>;=0A    <span class=3D"pl-smi">TreeNode</span> left <span=20=
class=3D"pl-k">=3D</span> root<span class=3D"pl-k">.</span>left;=20=
<span class=3D"pl-c"><span class=3D"pl-c">//</span> =E5=90=8E=E9=9D=
=A2=E7=9A=84=E6=93=8D=E4=BD=9C=E4=BC=9A=E6=94=B9=E5=8F=98 left =E6=
=8C=87=E9=92=88=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=85=88=E4=BF=9D=E5=AD=
=98=E4=B8=8B=E6=9D=A5</span>=0A    root<span class=3D"pl-k">.</sp=
an>left <span class=3D"pl-k">=3D</span> invertTree(root<span clas=
s=3D"pl-k">.</span>right);=0A    root<span class=3D"pl-k">.</span=
>right <span class=3D"pl-k">=3D</span> invertTree(left);=0A    <s=
pan class=3D"pl-k">return</span> root;=0A}</pre></div><p>=E5=BD=92=
=E5=B9=B6=E4=B8=A4=E6=A3=B5=E6=A0=91</p><p><a href=3D"https://lee=
tcode.com/problems/merge-two-binary-trees/description/" target=3D=
"_blank">Leetcode : 617. Merge Two Binary Trees (Easy)</a></p><di=
v class=3D"highlight highlight-source-java"><pre><span class=3D"p=
l-k">public</span> <span class=3D"pl-smi">TreeNode</span> mergeTr=
ees(<span class=3D"pl-smi">TreeNode</span> t1, <span class=3D"pl-=
smi">TreeNode</span> t2) {=0A    <span class=3D"pl-k">if</span>(t=
1 <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</=
span> <span class=3D"pl-k">&amp;&amp;</span> t2 <span class=3D"pl=
-k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <span class=3D=
"pl-k">return</span> <span class=3D"pl-c1">null</span>;=0A    <sp=
an class=3D"pl-k">if</span>(t1 <span class=3D"pl-k">=3D=3D</span>=
 <span class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</=
span> t2;=0A    <span class=3D"pl-k">if</span>(t2 <span class=3D"=
pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <span clas=
s=3D"pl-k">return</span> t1;=0A    <span class=3D"pl-smi">TreeNod=
e</span> root <span class=3D"pl-k">=3D</span> <span class=3D"pl-k=
">new</span> <span class=3D"pl-smi">TreeNode</span>(t1<span class=
=3D"pl-k">.</span>val <span class=3D"pl-k">+</span> t2<span class=
=3D"pl-k">.</span>val);=0A    root<span class=3D"pl-k">.</span>le=
ft <span class=3D"pl-k">=3D</span> mergeTrees(t1<span class=3D"pl=
-k">.</span>left, t2<span class=3D"pl-k">.</span>left);=0A    roo=
t<span class=3D"pl-k">.</span>right <span class=3D"pl-k">=3D</spa=
n> mergeTrees(t1<span class=3D"pl-k">.</span>right, t2<span class=
=3D"pl-k">.</span>right);=0A    <span class=3D"pl-k">return</span=
> root;=0A}</pre></div><p>=E5=88=A4=E6=96=AD=E8=B7=AF=E5=BE=84=E5=
=92=8C=E6=98=AF=E5=90=A6=E7=AD=89=E4=BA=8E=E4=B8=80=E4=B8=AA=E6=95=
=B0</p><p><a href=3D"https://leetcode.com/problems/path-sum/descr=
iption/" target=3D"_blank">Leetcdoe : 112. Path Sum (Easy)</a></p=
><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E8=B7=AF=E5=BE=84=
=E5=92=8C=E5=AE=9A=E4=B9=89=E4=B8=BA=E4=BB=8E root =E5=88=B0 leaf=
 =E7=9A=84=E6=89=80=E6=9C=89=E8=8A=82=E7=82=B9=E7=9A=84=E5=92=8C<=
/p><div class=3D"highlight highlight-source-java"><pre><span clas=
s=3D"pl-k">public</span> <span class=3D"pl-k">boolean</span> hasP=
athSum(<span class=3D"pl-smi">TreeNode</span> root, <span class=3D=
"pl-k">int</span> sum) {=0A    <span class=3D"pl-k">if</span>(roo=
t <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</=
span>) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">f=
alse</span>;=0A    <span class=3D"pl-k">if</span>(root<span class=
=3D"pl-k">.</span>left <span class=3D"pl-k">=3D=3D</span> <span c=
lass=3D"pl-c1">null</span> <span class=3D"pl-k">&amp;&amp;</span>=
 root<span class=3D"pl-k">.</span>right <span class=3D"pl-k">=3D=3D=
</span> <span class=3D"pl-c1">null</span> <span class=3D"pl-k">&a=
mp;&amp;</span> root<span class=3D"pl-k">.</span>val <span class=3D=
"pl-k">=3D=3D</span> sum) <span class=3D"pl-k">return</span> <spa=
n class=3D"pl-c1">true</span>;=0A    <span class=3D"pl-k">return<=
/span> hasPathSum(root<span class=3D"pl-k">.</span>left, sum <spa=
n class=3D"pl-k">-</span> root<span class=3D"pl-k">.</span>val) <=
span class=3D"pl-k">||</span> hasPathSum(root<span class=3D"pl-k"=
>.</span>right, sum <span class=3D"pl-k">-</span> root<span class=
=3D"pl-k">.</span>val);=0A}</pre></div><p>=E7=BB=9F=E8=AE=A1=E8=B7=
=AF=E5=BE=84=E5=92=8C=E7=AD=89=E4=BA=8E=E4=B8=80=E4=B8=AA=E6=95=B0=
=E7=9A=84=E8=B7=AF=E5=BE=84=E6=95=B0=E9=87=8F</p><p><a href=3D"ht=
tps://leetcode.com/problems/path-sum-iii/description/" target=3D"=
_blank">Leetcode : 437. Path Sum III (Easy)</a></p><p>=E9=A2=98=E7=
=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E8=B7=AF=E5=BE=84=E4=B8=8D=E4=B8=
=80=E5=AE=9A=E4=BB=A5 root =E5=BC=80=E5=A4=B4=E5=B9=B6=E4=BB=A5 l=
eaf =E7=BB=93=E5=B0=BE=EF=BC=8C=E4=BD=86=E6=98=AF=E5=BF=85=E9=A1=BB=
=E8=BF=9E=E7=BB=AD</p><p>pathSumStartWithRoot() =E6=96=B9=E6=B3=95=
=E7=BB=9F=E8=AE=A1=E4=BB=A5=E6=9F=90=E4=B8=AA=E8=8A=82=E7=82=B9=E5=
=BC=80=E5=A4=B4=E7=9A=84=E8=B7=AF=E5=BE=84=E4=B8=AA=E6=95=B0=E3=80=
=82</p><div class=3D"highlight highlight-source-java"><pre><span=20=
class=3D"pl-k">public</span> <span class=3D"pl-k">int</span> path=
Sum(<span class=3D"pl-smi">TreeNode</span> root, <span class=3D"p=
l-k">int</span> sum) {=0A    <span class=3D"pl-k">if</span>(root=20=
<span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</sp=
an>) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">0</=
span>;=0A    <span class=3D"pl-k">int</span> ret <span class=3D"p=
l-k">=3D</span> pathSumStartWithRoot(root, sum) <span class=3D"pl=
-k">+</span> pathSum(root<span class=3D"pl-k">.</span>left, sum)=20=
<span class=3D"pl-k">+</span> pathSum(root<span class=3D"pl-k">.<=
/span>right, sum);=0A    <span class=3D"pl-k">return</span> ret;=0A=
}=0A=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k">i=
nt</span> pathSumStartWithRoot(<span class=3D"pl-smi">TreeNode</s=
pan> root, <span class=3D"pl-k">int</span> sum){=0A    <span clas=
s=3D"pl-k">if</span>(root <span class=3D"pl-k">=3D=3D</span> <spa=
n class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span>=
 <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</=
span> ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0=
</span>;=0A    <span class=3D"pl-k">if</span>(root<span class=3D"=
pl-k">.</span>val <span class=3D"pl-k">=3D=3D</span> sum) ret<spa=
n class=3D"pl-k">++</span>;=0A    ret <span class=3D"pl-k">+=3D</=
span> pathSumStartWithRoot(root<span class=3D"pl-k">.</span>left,=
 sum <span class=3D"pl-k">-</span> root<span class=3D"pl-k">.</sp=
an>val) <span class=3D"pl-k">+</span> pathSumStartWithRoot(root<s=
pan class=3D"pl-k">.</span>right, sum <span class=3D"pl-k">-</spa=
n> root<span class=3D"pl-k">.</span>val);=0A    <span class=3D"pl=
-k">return</span> ret;=0A}</pre></div><p>=E6=A0=91=E7=9A=84=E5=AF=
=B9=E7=A7=B0</p><p><a href=3D"https://leetcode.com/problems/symme=
tric-tree/description/" target=3D"_blank">Leetcode : 101. Symmetr=
ic Tree (Easy)</a></p><div class=3D"highlight highlight-source-ja=
va"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">=
boolean</span> isSymmetric(<span class=3D"pl-smi">TreeNode</span>=
 root) {=0A    <span class=3D"pl-k">if</span>(root <span class=3D=
"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <span cla=
ss=3D"pl-k">return</span> <span class=3D"pl-c1">true</span>;=0A =20=
  <span class=3D"pl-k">return</span> isSymmetric(root<span class=3D=
"pl-k">.</span>left, root<span class=3D"pl-k">.</span>right);=0A}=
=0A=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k">bo=
olean</span> isSymmetric(<span class=3D"pl-smi">TreeNode</span> t=
1, <span class=3D"pl-smi">TreeNode</span> t2){=0A    <span class=3D=
"pl-k">if</span>(t1 <span class=3D"pl-k">=3D=3D</span> <span clas=
s=3D"pl-c1">null</span> <span class=3D"pl-k">&amp;&amp;</span> t2=
 <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</s=
pan>) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">tr=
ue</span>;=0A    <span class=3D"pl-k">if</span>(t1 <span class=3D=
"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span> <span clas=
s=3D"pl-k">||</span> t2 <span class=3D"pl-k">=3D=3D</span> <span=20=
class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span> <=
span class=3D"pl-c1">false</span>;=0A    <span class=3D"pl-k">if<=
/span>(t1<span class=3D"pl-k">.</span>val <span class=3D"pl-k">!=3D=
</span> t2<span class=3D"pl-k">.</span>val) <span class=3D"pl-k">=
return</span> <span class=3D"pl-c1">false</span>;=0A    <span cla=
ss=3D"pl-k">return</span> isSymmetric(t1<span class=3D"pl-k">.</s=
pan>left, t2<span class=3D"pl-k">.</span>right) <span class=3D"pl=
-k">&amp;&amp;</span> isSymmetric(t1<span class=3D"pl-k">.</span>=
right, t2<span class=3D"pl-k">.</span>left);=0A}</pre></div><p>=E5=
=B9=B3=E8=A1=A1=E6=A0=91</p><p><a href=3D"https://leetcode.com/pr=
oblems/balanced-binary-tree/description/" target=3D"_blank">Leetc=
ode : 110. Balanced Binary Tree (Easy)</a></p><p>=E9=A2=98=E7=9B=AE=
=E6=8F=8F=E8=BF=B0=EF=BC=9A=E5=B7=A6=E5=8F=B3=E5=AD=90=E6=A0=91=E9=
=AB=98=E5=BA=A6=E5=B7=AE=E6=98=AF=E5=90=A6=E9=83=BD=E5=B0=8F=E4=BA=
=8E=E7=AD=89=E4=BA=8E 1</p><div class=3D"highlight highlight-sour=
ce-java"><pre><span class=3D"pl-k">private</span> <span class=3D"=
pl-k">boolean</span> result <span class=3D"pl-k">=3D</span> <span=
 class=3D"pl-c1">true</span>;=0A=0A<span class=3D"pl-k">public</s=
pan> <span class=3D"pl-k">boolean</span> isBalanced(<span class=3D=
"pl-smi">TreeNode</span> root) {=0A    maxDepth(root);=0A    <spa=
n class=3D"pl-k">return</span> result;=0A}=0A=0A<span class=3D"pl=
-k">public</span> <span class=3D"pl-k">int</span> maxDepth(<span=20=
class=3D"pl-smi">TreeNode</span> root) {=0A    <span class=3D"pl-=
k">if</span> (root <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span> <span=20=
class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</span> l=
 <span class=3D"pl-k">=3D</span> maxDepth(root<span class=3D"pl-k=
">.</span>left);=0A    <span class=3D"pl-k">int</span> r <span cl=
ass=3D"pl-k">=3D</span> maxDepth(root<span class=3D"pl-k">.</span=
>right);=0A    <span class=3D"pl-k">if</span> (<span class=3D"pl-=
smi">Math</span><span class=3D"pl-k">.</span>abs(l <span class=3D=
"pl-k">-</span> r) <span class=3D"pl-k">&gt;</span> <span class=3D=
"pl-c1">1</span>) result <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-c1">false</span>;=0A    <span class=3D"pl-k">return</sp=
an> <span class=3D"pl-c1">1</span> <span class=3D"pl-k">+</span>=20=
<span class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>ma=
x(l, r);=0A}</pre></div><p>=E6=9C=80=E5=B0=8F=E8=B7=AF=E5=BE=84</=
p><p><a href=3D"https://leetcode.com/problems/minimum-depth-of-bi=
nary-tree/description/" target=3D"_blank">Leetcode : 111. Minimum=
 Depth of Binary Tree (Easy)</a></p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=
=E8=BF=B0=EF=BC=9A=E6=A0=91=E7=9A=84=E6=A0=B9=E8=8A=82=E7=82=B9=E5=
=88=B0=E5=8F=B6=E5=AD=90=E8=8A=82=E7=82=B9=E7=9A=84=E6=9C=80=E5=B0=
=8F=E9=95=BF=E5=BA=A6</p><div class=3D"highlight highlight-source=
-java"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-=
k">int</span> minDepth(<span class=3D"pl-smi">TreeNode</span> roo=
t) {=0A    <span class=3D"pl-k">if</span>(root <span class=3D"pl-=
k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <span class=3D=
"pl-k">return</span> <span class=3D"pl-c1">0</span>;=0A    <span=20=
class=3D"pl-k">int</span> left <span class=3D"pl-k">=3D</span> mi=
nDepth(root<span class=3D"pl-k">.</span>left);=0A    <span class=3D=
"pl-k">int</span> right <span class=3D"pl-k">=3D</span> minDepth(=
root<span class=3D"pl-k">.</span>right);=0A    <span class=3D"pl-=
k">if</span>(left <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">0</span> <span class=3D"pl-k">||</span> right <span class=
=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>) <span cla=
ss=3D"pl-k">return</span> left <span class=3D"pl-k">+</span> righ=
t <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>;=0A=
    <span class=3D"pl-k">return</span> <span class=3D"pl-smi">Mat=
h</span><span class=3D"pl-k">.</span>min(left, right) <span class=
=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>;=0A}</pre></div=
><p>=E7=BB=9F=E8=AE=A1=E5=B7=A6=E5=8F=B6=E5=AD=90=E8=8A=82=E7=82=B9=
=E7=9A=84=E5=92=8C</p><p><a href=3D"https://leetcode.com/problems=
/sum-of-left-leaves/description/" target=3D"_blank">Leetcode : 40=
4. Sum of Left Leaves (Easy)</a></p><div class=3D"highlight highl=
ight-source-java"><pre><span class=3D"pl-k">public</span> <span c=
lass=3D"pl-k">int</span> sumOfLeftLeaves(<span class=3D"pl-smi">T=
reeNode</span> root) {=0A    <span class=3D"pl-k">if</span>(root=20=
<span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</sp=
an>) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">0</=
span>;=0A    <span class=3D"pl-k">if</span>(isLeaf(root<span clas=
s=3D"pl-k">.</span>left)) <span class=3D"pl-k">return</span> root=
<span class=3D"pl-k">.</span>left<span class=3D"pl-k">.</span>val=
 <span class=3D"pl-k">+</span>  sumOfLeftLeaves(root<span class=3D=
"pl-k">.</span>right);=0A    <span class=3D"pl-k">return</span> s=
umOfLeftLeaves(root<span class=3D"pl-k">.</span>left) <span class=
=3D"pl-k">+</span> sumOfLeftLeaves(root<span class=3D"pl-k">.</sp=
an>right);=0A}=0A=0A<span class=3D"pl-k">private</span> <span cla=
ss=3D"pl-k">boolean</span> isLeaf(<span class=3D"pl-smi">TreeNode=
</span> node){=0A    <span class=3D"pl-k">if</span>(node <span cl=
ass=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <sp=
an class=3D"pl-k">return</span> <span class=3D"pl-c1">false</span=
>;=0A    <span class=3D"pl-k">return</span> node<span class=3D"pl=
-k">.</span>left <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">null</span> <span class=3D"pl-k">&amp;&amp;</span> node<s=
pan class=3D"pl-k">.</span>right <span class=3D"pl-k">=3D=3D</spa=
n> <span class=3D"pl-c1">null</span>;=0A}</pre></div><p>=E4=BF=AE=
=E5=89=AA=E4=B8=80=E6=A3=B5=E6=A0=91</p><p><a href=3D"https://lee=
tcode.com/problems/trim-a-binary-search-tree/description/" target=
=3D"_blank">Leetcode : 669. Trim a Binary Search Tree (Easy)</a><=
/p><p>=E9=A2=98=E7=9B=AE=E6=8F=8F=E8=BF=B0=EF=BC=9A=E5=8F=AA=E4=BF=
=9D=E7=95=99=E5=80=BC=E5=9C=A8 L ~ R =E4=B9=8B=E9=97=B4=E7=9A=84=E8=
=8A=82=E7=82=B9</p><div class=3D"highlight highlight-source-java"=
><pre><span class=3D"pl-k">public</span> <span class=3D"pl-smi">T=
reeNode</span> trimBST(<span class=3D"pl-smi">TreeNode</span> roo=
t, <span class=3D"pl-k">int</span> <span class=3D"pl-smi">L</span=
>, <span class=3D"pl-k">int</span> <span class=3D"pl-smi">R</span=
>) {=0A    <span class=3D"pl-k">if</span>(root <span class=3D"pl-=
k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <span class=3D=
"pl-k">return</span> <span class=3D"pl-c1">null</span>;=0A    <sp=
an class=3D"pl-k">if</span>(root<span class=3D"pl-k">.</span>val=20=
<span class=3D"pl-k">&gt;</span> <span class=3D"pl-smi">R</span>)=
 <span class=3D"pl-k">return</span> trimBST(root<span class=3D"pl=
-k">.</span>left, <span class=3D"pl-smi">L</span>, <span class=3D=
"pl-smi">R</span>);=0A    <span class=3D"pl-k">if</span>(root<spa=
n class=3D"pl-k">.</span>val <span class=3D"pl-k">&lt;</span> <sp=
an class=3D"pl-smi">L</span>) <span class=3D"pl-k">return</span>=20=
trimBST(root<span class=3D"pl-k">.</span>right, <span class=3D"pl=
-smi">L</span>, <span class=3D"pl-smi">R</span>);=0A    root<span=
 class=3D"pl-k">.</span>left <span class=3D"pl-k">=3D</span> trim=
BST(root<span class=3D"pl-k">.</span>left, <span class=3D"pl-smi"=
>L</span>, <span class=3D"pl-smi">R</span>);=0A    root<span clas=
s=3D"pl-k">.</span>right <span class=3D"pl-k">=3D</span> trimBST(=
root<span class=3D"pl-k">.</span>right, <span class=3D"pl-smi">L<=
/span>, <span class=3D"pl-smi">R</span>);=0A    <span class=3D"pl=
-k">return</span> root;=0A}</pre></div><p>=E5=AD=90=E6=A0=91</p><=
p><a href=3D"https://leetcode.com/problems/subtree-of-another-tre=
e/description/" target=3D"_blank">Leetcode : 572. Subtree of Anot=
her Tree (Easy)</a></p><div class=3D"highlight highlight-source-j=
ava"><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k"=
>boolean</span> isSubtree(<span class=3D"pl-smi">TreeNode</span>=20=
s, <span class=3D"pl-smi">TreeNode</span> t) {=0A    <span class=3D=
"pl-k">if</span>(s <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">null</span> <span class=3D"pl-k">&amp;&amp;</span> t <=
span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</spa=
n>) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">true=
</span>;=0A    <span class=3D"pl-k">if</span>(s <span class=3D"pl=
-k">=3D=3D</span> <span class=3D"pl-c1">null</span> <span class=3D=
"pl-k">||</span> t <span class=3D"pl-k">=3D=3D</span> <span class=
=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span> <span=20=
class=3D"pl-c1">false</span>;=0A    <span class=3D"pl-k">if</span=
>(s<span class=3D"pl-k">.</span>val <span class=3D"pl-k">=3D=3D</=
span> t<span class=3D"pl-k">.</span>val <span class=3D"pl-k">&amp=
;&amp;</span> isSame(s, t)) <span class=3D"pl-k">return</span> <s=
pan class=3D"pl-c1">true</span>;=0A    <span class=3D"pl-k">retur=
n</span> isSubtree(s<span class=3D"pl-k">.</span>left, t) <span c=
lass=3D"pl-k">||</span> isSubtree(s<span class=3D"pl-k">.</span>r=
ight, t);=0A}=0A=0A<span class=3D"pl-k">private</span> <span clas=
s=3D"pl-k">boolean</span> isSame(<span class=3D"pl-smi">TreeNode<=
/span> s, <span class=3D"pl-smi">TreeNode</span> t){=0A    <span=20=
class=3D"pl-k">if</span>(s <span class=3D"pl-k">=3D=3D</span> <sp=
an class=3D"pl-c1">null</span> <span class=3D"pl-k">&amp;&amp;</s=
pan> t <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">n=
ull</span>) <span class=3D"pl-k">return</span> <span class=3D"pl-=
c1">true</span>;=0A    <span class=3D"pl-k">if</span>(s <span cla=
ss=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span> <span=
 class=3D"pl-k">||</span> t <span class=3D"pl-k">=3D=3D</span> <s=
pan class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</spa=
n> <span class=3D"pl-c1">false</span>;=0A    <span class=3D"pl-k"=
>if</span>(s<span class=3D"pl-k">.</span>val <span class=3D"pl-k"=
>!=3D</span> t<span class=3D"pl-k">.</span>val) <span class=3D"pl=
-k">return</span> <span class=3D"pl-c1">false</span>;=0A    <span=
 class=3D"pl-k">return</span> isSame(s<span class=3D"pl-k">.</spa=
n>left, t<span class=3D"pl-k">.</span>left) <span class=3D"pl-k">=
&amp;&amp;</span> isSame(s<span class=3D"pl-k">.</span>right, t<s=
pan class=3D"pl-k">.</span>right);=0A}</pre></div><p>=E4=BB=8E=E6=
=9C=89=E5=BA=8F=E6=95=B0=E7=BB=84=E4=B8=AD=E6=9E=84=E9=80=A0=E4=BA=
=8C=E5=8F=89=E6=9F=A5=E6=89=BE=E6=A0=91</p><p><a href=3D"https://=
leetcode.com/problems/convert-sorted-array-to-binary-search-tree/=
description/" target=3D"_blank">Leetcode : 108. Convert Sorted Ar=
ray to Binary Search Tree (Easy)</a></p><p>=E4=BA=8C=E5=8F=89=E6=9F=
=A5=E6=89=BE=E6=A0=91=EF=BC=88BST=EF=BC=89=EF=BC=9A=E6=A0=B9=E8=8A=
=82=E7=82=B9=E5=A4=A7=E4=BA=8E=E7=AD=89=E4=BA=8E=E5=B7=A6=E5=AD=90=
=E6=A0=91=E6=89=80=E6=9C=89=E8=8A=82=E7=82=B9=EF=BC=8C=E5=B0=8F=E4=
=BA=8E=E7=AD=89=E4=BA=8E=E5=8F=B3=E5=AD=90=E6=A0=91=E6=89=80=E6=9C=
=89=E8=8A=82=E7=82=B9=E3=80=82</p><div class=3D"highlight highlig=
ht-source-java"><pre><span class=3D"pl-k">public</span> <span cla=
ss=3D"pl-smi">TreeNode</span> sortedArrayToBST(<span class=3D"pl-=
k">int</span>[] nums) {=0A    <span class=3D"pl-k">return</span>=20=
toBST(nums, <span class=3D"pl-c1">0</span>, nums<span class=3D"pl=
-k">.</span>length <span class=3D"pl-k">-</span> <span class=3D"p=
l-c1">1</span>);=0A}=0A=0A<span class=3D"pl-k">private</span> <sp=
an class=3D"pl-smi">TreeNode</span> toBST(<span class=3D"pl-k">in=
t</span>[] nums, <span class=3D"pl-k">int</span> sIdx, <span clas=
s=3D"pl-k">int</span> eIdx){=0A    <span class=3D"pl-k">if</span>=
(sIdx <span class=3D"pl-k">&gt;</span> eIdx) <span class=3D"pl-k"=
>return</span> <span class=3D"pl-c1">null</span>;=0A    <span cla=
ss=3D"pl-k">int</span> mIdx <span class=3D"pl-k">=3D</span> (sIdx=
 <span class=3D"pl-k">+</span> eIdx) <span class=3D"pl-k">/</span=
> <span class=3D"pl-c1">2</span>;=0A    <span class=3D"pl-smi">Tr=
eeNode</span> root <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-k">new</span> <span class=3D"pl-smi">TreeNode</span>(nums[mId=
x]);=0A    root<span class=3D"pl-k">.</span>left <span class=3D"p=
l-k">=3D</span>  toBST(nums, sIdx, mIdx <span class=3D"pl-k">-</s=
pan> <span class=3D"pl-c1">1</span>);=0A    root<span class=3D"pl=
-k">.</span>right <span class=3D"pl-k">=3D</span> toBST(nums, mId=
x <span class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>, e=
Idx);=0A    <span class=3D"pl-k">return</span> root;=0A}</pre></d=
iv><p>=E4=B8=A4=E8=8A=82=E7=82=B9=E7=9A=84=E6=9C=80=E9=95=BF=E8=B7=
=AF=E5=BE=84</p><div class=3D"highlight highlight-text-html-basic=
"><pre>          1=0A        / \=0A        2  3=0A      / \=0A  =20=
   4  5=0A=0AReturn 3, which is the length of the path [4,2,1,3]=20=
or [5,2,1,3].</pre></div><div class=3D"highlight highlight-source=
-java"><pre><span class=3D"pl-k">private</span> <span class=3D"pl=
-k">int</span> max <span class=3D"pl-k">=3D</span> <span class=3D=
"pl-c1">0</span>;=0A=0A<span class=3D"pl-k">public</span> <span c=
lass=3D"pl-k">int</span> diameterOfBinaryTree(<span class=3D"pl-s=
mi">TreeNode</span> root) {=0A    depth(root);=0A    <span class=3D=
"pl-k">return</span> max;=0A}=0A=0A<span class=3D"pl-k">private</=
span> <span class=3D"pl-k">int</span> depth(<span class=3D"pl-smi=
">TreeNode</span> root) {=0A    <span class=3D"pl-k">if</span> (r=
oot <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null=
</span>) {=0A        <span class=3D"pl-k">return</span> <span cla=
ss=3D"pl-c1">0</span>;=0A    }=0A    <span class=3D"pl-k">int</sp=
an> leftDepth <span class=3D"pl-k">=3D</span> depth(root<span cla=
ss=3D"pl-k">.</span>left);=0A    <span class=3D"pl-k">int</span>=20=
rightDepth <span class=3D"pl-k">=3D</span> depth(root<span class=3D=
"pl-k">.</span>right);=0A    max <span class=3D"pl-k">=3D</span>=20=
<span class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>ma=
x(max, leftDepth <span class=3D"pl-k">+</span> rightDepth);=0A  =20=
 <span class=3D"pl-k">return</span> <span class=3D"pl-smi">Math</=
span><span class=3D"pl-k">.</span>max(leftDepth, rightDepth) <spa=
n class=3D"pl-k">+</span> <span class=3D"pl-c1">1</span>;=0A}</pr=
e></div><p>=E6=89=BE=E5=87=BA=E4=BA=8C=E5=8F=89=E6=A0=91=E4=B8=AD=
=E7=AC=AC=E4=BA=8C=E5=B0=8F=E7=9A=84=E8=8A=82=E7=82=B9</p><p><a h=
ref=3D"https://leetcode.com/problems/second-minimum-node-in-a-bin=
ary-tree/description/" target=3D"_blank">Leetcode : 671. Second M=
inimum Node In a Binary Tree (Easy)</a></p><div class=3D"highligh=
t highlight-text-html-basic"><pre>Input:=0A    2=0A  / \=0A  2  5=
=0A    / \=0A    5  7=0A=0AOutput: 5</pre></div><p>=E4=B8=80=E4=B8=
=AA=E8=8A=82=E7=82=B9=E8=A6=81=E4=B9=88=E5=85=B7=E6=9C=89 0 =E4=B8=
=AA=E6=88=96 2 =E4=B8=AA=E5=AD=90=E8=8A=82=E7=82=B9=EF=BC=8C=E5=A6=
=82=E6=9E=9C=E6=9C=89=E5=AD=90=E8=8A=82=E7=82=B9=EF=BC=8C=E9=82=A3=
=E4=B9=88=E6=A0=B9=E8=8A=82=E7=82=B9=E6=98=AF=E6=9C=80=E5=B0=8F=E7=
=9A=84=E8=8A=82=E7=82=B9=E3=80=82</p><div class=3D"highlight high=
light-source-java"><pre><span class=3D"pl-k">public</span> <span=20=
class=3D"pl-k">int</span> findSecondMinimumValue(<span class=3D"p=
l-smi">TreeNode</span> root) {=0A    <span class=3D"pl-k">if</spa=
n>(root <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">=
null</span>) <span class=3D"pl-k">return</span> <span class=3D"pl=
-k">-</span><span class=3D"pl-c1">1</span>;=0A    <span class=3D"=
pl-k">if</span>(root<span class=3D"pl-k">.</span>left <span class=
=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span> <span c=
lass=3D"pl-k">&amp;&amp;</span> root<span class=3D"pl-k">.</span>=
right <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">nu=
ll</span>) <span class=3D"pl-k">return</span> <span class=3D"pl-k=
">-</span><span class=3D"pl-c1">1</span>;=0A    <span class=3D"pl=
-k">int</span> leftVal <span class=3D"pl-k">=3D</span> root<span=20=
class=3D"pl-k">.</span>left<span class=3D"pl-k">.</span>val;=0A =20=
  <span class=3D"pl-k">int</span> rightVal <span class=3D"pl-k">=3D=
</span> root<span class=3D"pl-k">.</span>right<span class=3D"pl-k=
">.</span>val;=0A    <span class=3D"pl-k">if</span>(leftVal <span=
 class=3D"pl-k">=3D=3D</span> root<span class=3D"pl-k">.</span>va=
l) leftVal <span class=3D"pl-k">=3D</span> findSecondMinimumValue=
(root<span class=3D"pl-k">.</span>left);=0A    <span class=3D"pl-=
k">if</span>(rightVal <span class=3D"pl-k">=3D=3D</span> root<spa=
n class=3D"pl-k">.</span>val) rightVal <span class=3D"pl-k">=3D</=
span> findSecondMinimumValue(root<span class=3D"pl-k">.</span>rig=
ht);=0A    <span class=3D"pl-k">if</span>(leftVal <span class=3D"=
pl-k">!=3D</span> <span class=3D"pl-k">-</span><span class=3D"pl-=
c1">1</span> <span class=3D"pl-k">&amp;&amp;</span> rightVal <spa=
n class=3D"pl-k">!=3D</span> <span class=3D"pl-k">-</span><span c=
lass=3D"pl-c1">1</span>) <span class=3D"pl-k">return</span> <span=
 class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>min(lef=
tVal, rightVal);=0A    <span class=3D"pl-k">if</span>(leftVal <sp=
an class=3D"pl-k">!=3D</span> <span class=3D"pl-k">-</span><span=20=
class=3D"pl-c1">1</span>) <span class=3D"pl-k">return</span> left=
Val;=0A    <span class=3D"pl-k">return</span> rightVal;=0A}</pre>=
</div><p>=E5=AF=BB=E6=89=BE=E4=B8=A4=E4=B8=AA=E8=8A=82=E7=82=B9=E7=
=9A=84=E6=9C=80=E8=BF=91=E5=85=AC=E5=85=B1=E7=A5=96=E5=85=88</p><=
p><a href=3D"https://leetcode.com/problems/lowest-common-ancestor=
-of-a-binary-search-tree/description/" target=3D"_blank">Leetcode=
 : 235. Lowest Common Ancestor of a Binary Search Tree (Easy)</a>=
</p><div class=3D"highlight highlight-source-java"><pre><span cla=
ss=3D"pl-k">public</span> <span class=3D"pl-smi">TreeNode</span>=20=
lowestCommonAncestor(<span class=3D"pl-smi">TreeNode</span> root,=
 <span class=3D"pl-smi">TreeNode</span> p, <span class=3D"pl-smi"=
>TreeNode</span> q) {=0A    <span class=3D"pl-k">if</span>(root<s=
pan class=3D"pl-k">.</span>val <span class=3D"pl-k">&gt;</span> p=
<span class=3D"pl-k">.</span>val <span class=3D"pl-k">&amp;&amp;<=
/span> root<span class=3D"pl-k">.</span>val <span class=3D"pl-k">=
&gt;</span> q<span class=3D"pl-k">.</span>val) <span class=3D"pl-=
k">return</span> lowestCommonAncestor(root<span class=3D"pl-k">.<=
/span>left, p, q);=0A    <span class=3D"pl-k">if</span>(root<span=
 class=3D"pl-k">.</span>val <span class=3D"pl-k">&lt;</span> p<sp=
an class=3D"pl-k">.</span>val <span class=3D"pl-k">&amp;&amp;</sp=
an> root<span class=3D"pl-k">.</span>val <span class=3D"pl-k">&lt=
;</span> q<span class=3D"pl-k">.</span>val) <span class=3D"pl-k">=
return</span> lowestCommonAncestor(root<span class=3D"pl-k">.</sp=
an>right, p, q);=0A    <span class=3D"pl-k">return</span> root;=0A=
}</pre></div><p>=E6=9C=80=E8=BF=91=E5=85=AC=E5=85=B1=E7=A5=96=E5=85=
=88</p><p><a href=3D"https://leetcode.com/problems/lowest-common-=
ancestor-of-a-binary-tree/description/" target=3D"_blank">Leetcod=
e : 236. Lowest Common Ancestor of a Binary Tree (Medium)</a></p>=
<div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-smi">TreeNode</span> lowes=
tCommonAncestor(<span class=3D"pl-smi">TreeNode</span> root, <spa=
n class=3D"pl-smi">TreeNode</span> p, <span class=3D"pl-smi">Tree=
Node</span> q) {=0A    <span class=3D"pl-k">if</span> (root <span=
 class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span> <=
span class=3D"pl-k">||</span> root <span class=3D"pl-k">=3D=3D</s=
pan> p <span class=3D"pl-k">||</span> root <span class=3D"pl-k">=3D=
=3D</span> q) <span class=3D"pl-k">return</span> root;=0A    <spa=
n class=3D"pl-smi">TreeNode</span> left <span class=3D"pl-k">=3D<=
/span> lowestCommonAncestor(root<span class=3D"pl-k">.</span>left=
, p, q);=0A    <span class=3D"pl-smi">TreeNode</span> right <span=
 class=3D"pl-k">=3D</span> lowestCommonAncestor(root<span class=3D=
"pl-k">.</span>right, p, q);=0A    <span class=3D"pl-k">return</s=
pan> left <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1=
">null</span> <span class=3D"pl-k">?</span> right <span class=3D"=
pl-k">:</span> right <span class=3D"pl-k">=3D=3D</span> <span cla=
ss=3D"pl-c1">null</span> <span class=3D"pl-k">?</span> left <span=
 class=3D"pl-k">:</span> root;=0A}</pre></div><p>=E6=9C=80=E5=A4=A7=
=E7=9B=B8=E5=90=8C=E8=8A=82=E7=82=B9=E5=80=BC=E7=9A=84=E8=B7=AF=E5=
=BE=84=E9=95=BF=E5=BA=A6</p><p><a href=3D"https://pomotodo.com/ap=
p/" target=3D"_blank">Leetcode : 687. Longest Univalue Path (Easy=
)</a></p><div class=3D"highlight highlight-text-html-basic"><pre>=
              1=0A            / \=0A            4  5=0A         =20=
/ \  \=0A          4  4  5=0A=0AOutput : 2</pre></div><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">priva=
te</span> <span class=3D"pl-k">int</span> path <span class=3D"pl-=
k">=3D</span> <span class=3D"pl-c1">0</span>;=0A<span class=3D"pl=
-k">public</span> <span class=3D"pl-k">int</span> longestUnivalue=
Path(<span class=3D"pl-smi">TreeNode</span> root) {=0A    dfs(roo=
t);=0A    <span class=3D"pl-k">return</span> path;=0A}=0A=0A<span=
 class=3D"pl-k">private</span> <span class=3D"pl-k">int</span> df=
s(<span class=3D"pl-smi">TreeNode</span> root){=0A    <span class=
=3D"pl-k">if</span>(root <span class=3D"pl-k">=3D=3D</span> <span=
 class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span>=20=
<span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</s=
pan> left <span class=3D"pl-k">=3D</span> dfs(root<span class=3D"=
pl-k">.</span>left);=0A    <span class=3D"pl-k">int</span> right=20=
<span class=3D"pl-k">=3D</span> dfs(root<span class=3D"pl-k">.</s=
pan>right);=0A    <span class=3D"pl-k">int</span> leftPath <span=20=
class=3D"pl-k">=3D</span> root<span class=3D"pl-k">.</span>left <=
span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">null</span>=
 <span class=3D"pl-k">&amp;&amp;</span> root<span class=3D"pl-k">=
.</span>left<span class=3D"pl-k">.</span>val <span class=3D"pl-k"=
>=3D=3D</span> root<span class=3D"pl-k">.</span>val <span class=3D=
"pl-k">?</span> left <span class=3D"pl-k">+</span> <span class=3D=
"pl-c1">1</span> <span class=3D"pl-k">:</span> <span class=3D"pl-=
c1">0</span>;=0A    <span class=3D"pl-k">int</span> rightPath <sp=
an class=3D"pl-k">=3D</span> root<span class=3D"pl-k">.</span>rig=
ht <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">null</s=
pan> <span class=3D"pl-k">&amp;&amp;</span> root<span class=3D"pl=
-k">.</span>right<span class=3D"pl-k">.</span>val <span class=3D"=
pl-k">=3D=3D</span> root<span class=3D"pl-k">.</span>val <span cl=
ass=3D"pl-k">?</span> right <span class=3D"pl-k">+</span> <span c=
lass=3D"pl-c1">1</span> <span class=3D"pl-k">:</span> <span class=
=3D"pl-c1">0</span>;=0A    path <span class=3D"pl-k">=3D</span> <=
span class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>max=
(path, leftPath <span class=3D"pl-k">+</span> rightPath);=0A    <=
span class=3D"pl-k">return</span> <span class=3D"pl-smi">Math</sp=
an><span class=3D"pl-k">.</span>max(leftPath, rightPath);=0A}</pr=
e></div><p>=E9=97=B4=E9=9A=94=E9=81=8D=E5=8E=86</p><p><a href=3D"=
https://leetcode.com/problems/house-robber-iii/description/" targ=
et=3D"_blank">Leetcode : 337. House Robber III (Medium)</a></p><d=
iv class=3D"highlight highlight-source-java"><pre><span class=3D"=
pl-k">public</span> <span class=3D"pl-k">int</span> rob(<span cla=
ss=3D"pl-smi">TreeNode</span> root) {=0A    <span class=3D"pl-k">=
if</span> (root <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">null</span>) <span class=3D"pl-k">return</span> <span cla=
ss=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">int</span> val1=
 <span class=3D"pl-k">=3D</span> root<span class=3D"pl-k">.</span=
>val;=0A    <span class=3D"pl-k">if</span> (root<span class=3D"pl=
-k">.</span>left <span class=3D"pl-k">!=3D</span> <span class=3D"=
pl-c1">null</span>) {=0A        val1 <span class=3D"pl-k">+=3D</s=
pan> rob(root<span class=3D"pl-k">.</span>left<span class=3D"pl-k=
">.</span>left) <span class=3D"pl-k">+</span> rob(root<span class=
=3D"pl-k">.</span>left<span class=3D"pl-k">.</span>right);=0A   =20=
}=0A    <span class=3D"pl-k">if</span> (root<span class=3D"pl-k">=
.</span>right <span class=3D"pl-k">!=3D</span> <span class=3D"pl-=
c1">null</span>) {=0A        val1 <span class=3D"pl-k">+=3D</span=
> rob(root<span class=3D"pl-k">.</span>right<span class=3D"pl-k">=
.</span>left) <span class=3D"pl-k">+</span> rob(root<span class=3D=
"pl-k">.</span>right<span class=3D"pl-k">.</span>right);=0A    }=0A=
    <span class=3D"pl-k">int</span> val2 <span class=3D"pl-k">=3D=
</span> rob(root<span class=3D"pl-k">.</span>left) <span class=3D=
"pl-k">+</span> rob(root<span class=3D"pl-k">.</span>right);=0A =20=
  <span class=3D"pl-k">return</span> <span class=3D"pl-smi">Math<=
/span><span class=3D"pl-k">.</span>max(val1, val2);=0A}</pre></di=
v><h3>=E5=B1=82=E6=AC=A1=E9=81=8D=E5=8E=86</h3><p>=E4=BD=BF=E7=94=
=A8 BFS=EF=BC=8C=E4=B8=8D=E9=9C=80=E8=A6=81=E4=BD=BF=E7=94=A8=E4=B8=
=A4=E4=B8=AA=E9=98=9F=E5=88=97=E6=9D=A5=E5=88=86=E5=88=AB=E5=AD=98=
=E5=82=A8=E5=BD=93=E5=89=8D=E5=B1=82=E7=9A=84=E8=8A=82=E7=82=B9=E5=
=92=8C=E4=B8=8B=E4=B8=80=E5=B1=82=E7=9A=84=E8=8A=82=E7=82=B9=EF=BC=
=8C =E5=9B=A0=E4=B8=BA=E5=9C=A8=E5=BC=80=E5=A7=8B=E9=81=8D=E5=8E=86=
=E4=B8=80=E5=B1=82=E7=9A=84=E8=8A=82=E7=82=B9=E6=97=B6=EF=BC=8C=E5=
=BD=93=E5=89=8D=E9=98=9F=E5=88=97=E4=B8=AD=E7=9A=84=E8=8A=82=E7=82=
=B9=E6=95=B0=E5=B0=B1=E6=98=AF=E5=BD=93=E5=89=8D=E5=B1=82=E7=9A=84=
=E8=8A=82=E7=82=B9=E6=95=B0=EF=BC=8C=E5=8F=AA=E8=A6=81=E6=8E=A7=E5=
=88=B6=E9=81=8D=E5=8E=86=E8=BF=99=E4=B9=88=E5=A4=9A=E8=8A=82=E7=82=
=B9=E6=95=B0=EF=BC=8C=E5=B0=B1=E8=83=BD=E4=BF=9D=E8=AF=81=E8=BF=99=
=E6=AC=A1=E9=81=8D=E5=8E=86=E7=9A=84=E9=83=BD=E6=98=AF=E5=BD=93=E5=
=89=8D=E5=B1=82=E7=9A=84=E8=8A=82=E7=82=B9=E3=80=82</p><p>=E8=AE=A1=
=E7=AE=97=E4=B8=80=E6=A3=B5=E6=A0=91=E6=AF=8F=E5=B1=82=E8=8A=82=E7=
=82=B9=E7=9A=84=E5=B9=B3=E5=9D=87=E6=95=B0</p><p><a href=3D"https=
://leetcode.com/problems/average-of-levels-in-binary-tree/descrip=
tion/" target=3D"_blank">637. Average of Levels in Binary Tree (E=
asy)</a></p><div class=3D"highlight highlight-source-java"><pre><=
span class=3D"pl-k">public</span> <span class=3D"pl-k">List&lt;<s=
pan class=3D"pl-smi">Double</span>&gt;</span> averageOfLevels(<sp=
an class=3D"pl-smi">TreeNode</span> root) {=0A    <span class=3D"=
pl-k">List&lt;<span class=3D"pl-smi">Double</span>&gt;</span> ret=
 <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span>=20=
<span class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <span clas=
s=3D"pl-k">if</span>(root <span class=3D"pl-k">=3D=3D</span> <spa=
n class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span>=
 ret;=0A    <span class=3D"pl-k">Queue&lt;<span class=3D"pl-smi">=
TreeNode</span>&gt;</span> queue <span class=3D"pl-k">=3D</span>=20=
<span class=3D"pl-k">new</span> <span class=3D"pl-k">LinkedList&l=
t;&gt;</span>();=0A    queue<span class=3D"pl-k">.</span>add(root=
);=0A    <span class=3D"pl-k">while</span>(<span class=3D"pl-k">!=
</span>queue<span class=3D"pl-k">.</span>isEmpty()){=0A        <s=
pan class=3D"pl-k">int</span> cnt <span class=3D"pl-k">=3D</span>=
 queue<span class=3D"pl-k">.</span>size();=0A        <span class=3D=
"pl-k">double</span> sum <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-c1">0</span>;=0A        <span class=3D"pl-k">for</span>=
(<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</sp=
an> cnt; i<span class=3D"pl-k">++</span>){=0A            <span cl=
ass=3D"pl-smi">TreeNode</span> node <span class=3D"pl-k">=3D</spa=
n> queue<span class=3D"pl-k">.</span>poll();=0A            sum <s=
pan class=3D"pl-k">+=3D</span> node<span class=3D"pl-k">.</span>v=
al;=0A            <span class=3D"pl-k">if</span>(node<span class=3D=
"pl-k">.</span>left <span class=3D"pl-k">!=3D</span> <span class=3D=
"pl-c1">null</span>) queue<span class=3D"pl-k">.</span>add(node<s=
pan class=3D"pl-k">.</span>left);=0A            <span class=3D"pl=
-k">if</span>(node<span class=3D"pl-k">.</span>right <span class=3D=
"pl-k">!=3D</span> <span class=3D"pl-c1">null</span>) queue<span=20=
class=3D"pl-k">.</span>add(node<span class=3D"pl-k">.</span>right=
);=0A        }=0A        ret<span class=3D"pl-k">.</span>add(sum=20=
<span class=3D"pl-k">/</span> cnt);=0A    }=0A    <span class=3D"=
pl-k">return</span> ret;=0A}</pre></div><p>=E5=BE=97=E5=88=B0=E5=B7=
=A6=E4=B8=8B=E8=A7=92=E7=9A=84=E8=8A=82=E7=82=B9</p><p><a href=3D=
"https://leetcode.com/problems/find-bottom-left-tree-value/descri=
ption/" target=3D"_blank">Leetcode : 513. Find Bottom Left Tree V=
alue (Easy)</a></p><div class=3D"highlight highlight-source-java"=
><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">int=
</span> findBottomLeftValue(<span class=3D"pl-smi">TreeNode</span=
> root) {=0A    <span class=3D"pl-k">Queue&lt;<span class=3D"pl-s=
mi">TreeNode</span>&gt;</span> queue <span class=3D"pl-k">=3D</sp=
an> <span class=3D"pl-k">new</span> <span class=3D"pl-k">LinkedLi=
st&lt;&gt;</span>();=0A    queue<span class=3D"pl-k">.</span>add(=
root);=0A    <span class=3D"pl-k">while</span>(<span class=3D"pl-=
k">!</span>queue<span class=3D"pl-k">.</span>isEmpty()){=0A     =20=
  root <span class=3D"pl-k">=3D</span> queue<span class=3D"pl-k">=
.</span>poll();=0A        <span class=3D"pl-k">if</span>(root<spa=
n class=3D"pl-k">.</span>right <span class=3D"pl-k">!=3D</span> <=
span class=3D"pl-c1">null</span>) queue<span class=3D"pl-k">.</sp=
an>add(root<span class=3D"pl-k">.</span>right);=0A        <span c=
lass=3D"pl-k">if</span>(root<span class=3D"pl-k">.</span>left <sp=
an class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">null</span>)=20=
queue<span class=3D"pl-k">.</span>add(root<span class=3D"pl-k">.<=
/span>left);=0A    }=0A    <span class=3D"pl-k">return</span> roo=
t<span class=3D"pl-k">.</span>val;=0A}</pre></div><h3>=E5=89=8D=E4=
=B8=AD=E5=90=8E=E5=BA=8F=E9=81=8D=E5=8E=86</h3><div class=3D"high=
light highlight-text-html-basic"><pre>   1=0A  / \=0A  2  3=0A /=20=
\  \=0A4  5  6</pre></div><p>=E5=B1=82=E6=AC=A1=E9=81=8D=E5=8E=86=
=E9=A1=BA=E5=BA=8F=EF=BC=9A[1 2 3 4 5 6]=E5=89=8D=E5=BA=8F=E9=81=8D=
=E5=8E=86=E9=A1=BA=E5=BA=8F=EF=BC=9A[1 2 4 5 3 6]=E4=B8=AD=E5=BA=8F=
=E9=81=8D=E5=8E=86=E9=A1=BA=E5=BA=8F=EF=BC=9A[4 2 5 1 3 6]=E5=90=8E=
=E5=BA=8F=E9=81=8D=E5=8E=86=E9=A1=BA=E5=BA=8F=EF=BC=9A[4 5 2 6 3=20=
1]</p><p>=E5=B1=82=E6=AC=A1=E9=81=8D=E5=8E=86=E4=BD=BF=E7=94=A8 B=
FS =E5=AE=9E=E7=8E=B0=EF=BC=8C=E5=88=A9=E7=94=A8=E7=9A=84=E5=B0=B1=
=E6=98=AF BFS =E4=B8=80=E5=B1=82=E4=B8=80=E5=B1=82=E9=81=8D=E5=8E=
=86=E7=9A=84=E7=89=B9=E6=80=A7=EF=BC=9B=E8=80=8C=E5=89=8D=E5=BA=8F=
=E3=80=81=E4=B8=AD=E5=BA=8F=E3=80=81=E5=90=8E=E5=BA=8F=E9=81=8D=E5=
=8E=86=E5=88=A9=E7=94=A8=E4=BA=86 DFS =E5=AE=9E=E7=8E=B0=E3=80=82=
</p><p>=E5=89=8D=E5=BA=8F=E3=80=81=E4=B8=AD=E5=BA=8F=E3=80=81=E5=90=
=8E=E5=BA=8F=E9=81=8D=E5=8F=AA=E6=98=AF=E5=9C=A8=E5=AF=B9=E8=8A=82=
=E7=82=B9=E8=AE=BF=E9=97=AE=E7=9A=84=E9=A1=BA=E5=BA=8F=E6=9C=89=E4=
=B8=80=E7=82=B9=E4=B8=8D=E5=90=8C=EF=BC=8C=E5=85=B6=E5=AE=83=E9=83=
=BD=E7=9B=B8=E5=90=8C=E3=80=82</p><p>=E2=91=A0 =E5=89=8D=E5=BA=8F=
</p><div class=3D"highlight highlight-source-java"><pre><span cla=
ss=3D"pl-k">void</span> dfs(<span class=3D"pl-smi">TreeNode</span=
> root){=0A    visit(root);=0A    dfs(root<span class=3D"pl-k">.<=
/span>left);=0A    dfs(root<span class=3D"pl-k">.</span>right);=0A=
}</pre></div><p>=E2=91=A1 =E4=B8=AD=E5=BA=8F</p><div class=3D"hig=
hlight highlight-source-java"><pre><span class=3D"pl-k">void</spa=
n> dfs(<span class=3D"pl-smi">TreeNode</span> root){=0A    dfs(ro=
ot<span class=3D"pl-k">.</span>left);=0A    visit(root);=0A    df=
s(root<span class=3D"pl-k">.</span>right);=0A}</pre></div><p>=E2=91=
=A2 =E5=90=8E=E5=BA=8F</p><div class=3D"highlight highlight-sourc=
e-java"><pre><span class=3D"pl-k">void</span> dfs(<span class=3D"=
pl-smi">TreeNode</span> root){=0A    dfs(root<span class=3D"pl-k"=
>.</span>left);=0A    dfs(root<span class=3D"pl-k">.</span>right)=
;=0A    visit(root);=0A}</pre></div><p>=E9=9D=9E=E9=80=92=E5=BD=92=
=E5=AE=9E=E7=8E=B0=E4=BA=8C=E5=8F=89=E6=A0=91=E7=9A=84=E5=89=8D=E5=
=BA=8F=E9=81=8D=E5=8E=86</p><p><a href=3D"https://leetcode.com/pr=
oblems/binary-tree-preorder-traversal/description/" target=3D"_bl=
ank">Leetcode : 144. Binary Tree Preorder Traversal (Medium)</a><=
/p><div class=3D"highlight highlight-source-java"><pre><span clas=
s=3D"pl-k">public</span> <span class=3D"pl-k">List&lt;<span class=
=3D"pl-smi">Integer</span>&gt;</span> preorderTraversal(<span cla=
ss=3D"pl-smi">TreeNode</span> root) {=0A    <span class=3D"pl-k">=
List&lt;<span class=3D"pl-smi">Integer</span>&gt;</span> ret <spa=
n class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span=
 class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    <span class=3D"=
pl-k">if</span> (root <span class=3D"pl-k">=3D=3D</span> <span cl=
ass=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span> ret=
;=0A    <span class=3D"pl-k">Stack&lt;<span class=3D"pl-smi">Tree=
Node</span>&gt;</span> stack <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-k">new</span> <span class=3D"pl-k">Stack&lt;&gt;</s=
pan>();=0A    stack<span class=3D"pl-k">.</span>push(root);=0A  =20=
 <span class=3D"pl-k">while</span> (<span class=3D"pl-k">!</span>=
stack<span class=3D"pl-k">.</span>isEmpty()) {=0A        <span cl=
ass=3D"pl-smi">TreeNode</span> node <span class=3D"pl-k">=3D</spa=
n> stack<span class=3D"pl-k">.</span>pop();=0A        ret<span cl=
ass=3D"pl-k">.</span>add(node<span class=3D"pl-k">.</span>val);=0A=
        <span class=3D"pl-k">if</span> (node<span class=3D"pl-k">=
.</span>right <span class=3D"pl-k">!=3D</span> <span class=3D"pl-=
c1">null</span>) stack<span class=3D"pl-k">.</span>push(node<span=
 class=3D"pl-k">.</span>right);=0A        <span class=3D"pl-k">if=
</span> (node<span class=3D"pl-k">.</span>left <span class=3D"pl-=
k">!=3D</span> <span class=3D"pl-c1">null</span>) stack<span clas=
s=3D"pl-k">.</span>push(node<span class=3D"pl-k">.</span>left); <=
span class=3D"pl-c"><span class=3D"pl-c">//</span> =E5=85=88=E6=B7=
=BB=E5=8A=A0=E5=8F=B3=E5=AD=90=E6=A0=91=E5=86=8D=E6=B7=BB=E5=8A=A0=
=E5=B7=A6=E5=AD=90=E6=A0=91=EF=BC=8C=E8=BF=99=E6=A0=B7=E6=98=AF=E4=
=B8=BA=E4=BA=86=E8=AE=A9=E5=B7=A6=E5=AD=90=E6=A0=91=E5=9C=A8=E6=A0=
=88=E9=A1=B6</span>=0A    }=0A    <span class=3D"pl-k">return</sp=
an> ret;=0A}</pre></div><p>=E9=9D=9E=E9=80=92=E5=BD=92=E5=AE=9E=E7=
=8E=B0=E4=BA=8C=E5=8F=89=E6=A0=91=E7=9A=84=E5=90=8E=E7=BB=AD=E9=81=
=8D=E5=8E=86</p><p><a href=3D"https://leetcode.com/problems/binar=
y-tree-postorder-traversal/description/" target=3D"_blank">Leetco=
de : ### 145. Binary Tree Postorder Traversal (Medium)</a></p><p>=
=E5=89=8D=E5=BA=8F=E9=81=8D=E5=8E=86=E4=B8=BA root -&gt; left -&g=
t; right=EF=BC=8C=E5=90=8E=E5=BA=8F=E9=81=8D=E5=8E=86=E4=B8=BA le=
ft -&gt; right -&gt; root=EF=BC=8C=E5=8F=AF=E4=BB=A5=E4=BF=AE=E6=94=
=B9=E5=89=8D=E5=BA=8F=E9=81=8D=E5=8E=86=E6=88=90=E4=B8=BA root -&=
gt; right -&gt; left=EF=BC=8C=E9=82=A3=E4=B9=88=E8=BF=99=E4=B8=AA=
=E9=A1=BA=E5=BA=8F=E5=B0=B1=E5=92=8C=E5=90=8E=E5=BA=8F=E9=81=8D=E5=
=8E=86=E6=AD=A3=E5=A5=BD=E7=9B=B8=E5=8F=8D=E3=80=82</p><div class=
=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">pu=
blic</span> <span class=3D"pl-k">List&lt;<span class=3D"pl-smi">I=
nteger</span>&gt;</span> postorderTraversal(<span class=3D"pl-smi=
">TreeNode</span> root) {=0A    <span class=3D"pl-k">List&lt;<spa=
n class=3D"pl-smi">Integer</span>&gt;</span> ret <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl=
-k">ArrayList&lt;&gt;</span>();=0A    <span class=3D"pl-k">if</sp=
an> (root <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1=
">null</span>) <span class=3D"pl-k">return</span> ret;=0A    <spa=
n class=3D"pl-k">Stack&lt;<span class=3D"pl-smi">TreeNode</span>&=
gt;</span> stack <span class=3D"pl-k">=3D</span> <span class=3D"p=
l-k">new</span> <span class=3D"pl-k">Stack&lt;&gt;</span>();=0A =20=
  stack<span class=3D"pl-k">.</span>push(root);=0A    <span class=
=3D"pl-k">while</span> (<span class=3D"pl-k">!</span>stack<span c=
lass=3D"pl-k">.</span>isEmpty()) {=0A        <span class=3D"pl-sm=
i">TreeNode</span> node <span class=3D"pl-k">=3D</span> stack<spa=
n class=3D"pl-k">.</span>pop();=0A        ret<span class=3D"pl-k"=
>.</span>add(node<span class=3D"pl-k">.</span>val);=0A        <sp=
an class=3D"pl-k">if</span> (node<span class=3D"pl-k">.</span>lef=
t <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">null</sp=
an>) stack<span class=3D"pl-k">.</span>push(node<span class=3D"pl=
-k">.</span>left);=0A        <span class=3D"pl-k">if</span> (node=
<span class=3D"pl-k">.</span>right <span class=3D"pl-k">!=3D</spa=
n> <span class=3D"pl-c1">null</span>) stack<span class=3D"pl-k">.=
</span>push(node<span class=3D"pl-k">.</span>right);=0A    }=0A =20=
  <span class=3D"pl-smi">Collections</span><span class=3D"pl-k">.=
</span>reverse(ret);=0A    <span class=3D"pl-k">return</span> ret=
;=0A}</pre></div><p>=E9=9D=9E=E9=80=92=E5=BD=92=E5=AE=9E=E7=8E=B0=
=E4=BA=8C=E5=8F=89=E6=A0=91=E7=9A=84=E4=B8=AD=E5=BA=8F=E9=81=8D=E5=
=8E=86</p><p><a href=3D"https://leetcode.com/problems/binary-tree=
-inorder-traversal/description/" target=3D"_blank">Leetcode : 94.=
 Binary Tree Inorder Traversal (Medium)</a></p><div class=3D"high=
light highlight-source-java"><pre><span class=3D"pl-k">public</sp=
an> <span class=3D"pl-k">List&lt;<span class=3D"pl-smi">Integer</=
span>&gt;</span> inorderTraversal(<span class=3D"pl-smi">TreeNode=
</span> root) {=0A    <span class=3D"pl-k">List&lt;<span class=3D=
"pl-smi">Integer</span>&gt;</span> ret <span class=3D"pl-k">=3D</=
span> <span class=3D"pl-k">new</span> <span class=3D"pl-k">ArrayL=
ist&lt;&gt;</span>();=0A    <span class=3D"pl-k">Stack&lt;<span c=
lass=3D"pl-smi">TreeNode</span>&gt;</span> stack <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl=
-k">Stack&lt;&gt;</span>();=0A    <span class=3D"pl-smi">TreeNode=
</span> cur <span class=3D"pl-k">=3D</span> root;=0A    <span cla=
ss=3D"pl-k">while</span>(cur <span class=3D"pl-k">!=3D</span> <sp=
an class=3D"pl-c1">null</span> <span class=3D"pl-k">||</span> <sp=
an class=3D"pl-k">!</span>stack<span class=3D"pl-k">.</span>isEmp=
ty()) {=0A        <span class=3D"pl-k">while</span>(cur <span cla=
ss=3D"pl-k">!=3D</span> <span class=3D"pl-c1">null</span>) { <spa=
n class=3D"pl-c"><span class=3D"pl-c">//</span> =E6=A8=A1=E6=8B=9F=
=E9=80=92=E5=BD=92=E6=A0=88=E7=9A=84=E4=B8=8D=E6=96=AD=E6=B7=B1=E5=
=85=A5</span>=0A            stack<span class=3D"pl-k">.</span>add=
(cur);=0A            cur <span class=3D"pl-k">=3D</span> cur<span=
 class=3D"pl-k">.</span>left;=0A        }=0A        <span class=3D=
"pl-smi">TreeNode</span> node <span class=3D"pl-k">=3D</span> sta=
ck<span class=3D"pl-k">.</span>pop();=0A        ret<span class=3D=
"pl-k">.</span>add(node<span class=3D"pl-k">.</span>val);=0A    =20=
   cur <span class=3D"pl-k">=3D</span> node<span class=3D"pl-k">.=
</span>right;=0A    }=0A    <span class=3D"pl-k">return</span> re=
t;=0A}</pre></div><p>=E4=BD=BF=E7=94=A8=E4=B8=AD=E5=BA=8F=E9=81=8D=
=E5=8E=86=E5=92=8C=E5=89=8D=E5=BA=8F=E9=81=8D=E5=8E=86=E5=BA=8F=E5=
=88=97=E9=87=8D=E5=BB=BA=E4=BA=8C=E5=8F=89=E6=A0=91<span class=3D=
"Apple-converted-space">&nbsp;</span>//TODO</p><h3>BST</h3><p>=E4=
=B8=BB=E8=A6=81=E5=88=A9=E7=94=A8 BST =E4=B8=AD=E5=BA=8F=E9=81=8D=
=E5=8E=86=E6=9C=89=E5=BA=8F=E7=9A=84=E7=89=B9=E7=82=B9=E3=80=82</=
p><p>=E5=9C=A8 BST =E4=B8=AD=E5=AF=BB=E6=89=BE=E4=B8=A4=E4=B8=AA=E8=
=8A=82=E7=82=B9=EF=BC=8C=E4=BD=BF=E5=AE=83=E4=BB=AC=E7=9A=84=E5=92=
=8C=E4=B8=BA=E4=B8=80=E4=B8=AA=E7=BB=99=E5=AE=9A=E5=80=BC=E3=80=82=
</p><p><a href=3D"https://leetcode.com/problems/two-sum-iv-input-=
is-a-bst/description/" target=3D"_blank">653. Two Sum IV - Input=20=
is a BST</a></p><p>=E4=BD=BF=E7=94=A8=E4=B8=AD=E5=BA=8F=E9=81=8D=E5=
=8E=86=E5=BE=97=E5=88=B0=E6=9C=89=E5=BA=8F=E6=95=B0=E7=BB=84=E4=B9=
=8B=E5=90=8E=EF=BC=8C=E5=86=8D=E5=88=A9=E7=94=A8=E5=8F=8C=E6=8C=87=
=E9=92=88=E5=AF=B9=E6=95=B0=E7=BB=84=E8=BF=9B=E8=A1=8C=E6=9F=A5=E6=
=89=BE=E3=80=82</p><p>=E5=BA=94=E8=AF=A5=E6=B3=A8=E6=84=8F=E5=88=B0=
=EF=BC=8C=E8=BF=99=E4=B8=80=E9=A2=98=E4=B8=8D=E8=83=BD=E7=94=A8=E5=
=88=86=E5=88=AB=E5=9C=A8=E5=B7=A6=E5=8F=B3=E5=AD=90=E6=A0=91=E4=B8=
=A4=E9=83=A8=E5=88=86=E6=9D=A5=E5=A4=84=E7=90=86=E8=BF=99=E7=A7=8D=
=E6=80=9D=E6=83=B3=EF=BC=8C=E5=9B=A0=E4=B8=BA=E4=B8=A4=E4=B8=AA=E5=
=BE=85=E6=B1=82=E7=9A=84=E8=8A=82=E7=82=B9=E5=8F=AF=E8=83=BD=E5=88=
=86=E5=88=AB=E5=9C=A8=E5=B7=A6=E5=8F=B3=E5=AD=90=E6=A0=91=E4=B8=AD=
=E3=80=82</p><div class=3D"highlight highlight-source-java"><pre>=
<span class=3D"pl-k">public</span> <span class=3D"pl-k">boolean</=
span> findTarget(<span class=3D"pl-smi">TreeNode</span> root, <sp=
an class=3D"pl-k">int</span> k) {=0A    <span class=3D"pl-k">List=
&lt;<span class=3D"pl-smi">Integer</span>&gt;</span> nums <span c=
lass=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span cl=
ass=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    inOrder(root, nums=
);=0A    <span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-c1">0</span>, j <span class=3D"pl-k">=3D=
</span> nums<span class=3D"pl-k">.</span>size() <span class=3D"pl=
-k">-</span> <span class=3D"pl-c1">1</span>;=0A    <span class=3D=
"pl-k">while</span>(i <span class=3D"pl-k">&lt;</span> j){=0A   =20=
    <span class=3D"pl-k">int</span> sum <span class=3D"pl-k">=3D<=
/span> nums<span class=3D"pl-k">.</span>get(i) <span class=3D"pl-=
k">+</span> nums<span class=3D"pl-k">.</span>get(j);=0A        <s=
pan class=3D"pl-k">if</span>(sum <span class=3D"pl-k">=3D=3D</spa=
n> k) <span class=3D"pl-k">return</span> <span class=3D"pl-c1">tr=
ue</span>;=0A        <span class=3D"pl-k">if</span>(sum <span cla=
ss=3D"pl-k">&lt;</span> k) i<span class=3D"pl-k">++</span>;=0A  =20=
     <span class=3D"pl-k">else</span> j<span class=3D"pl-k">--</s=
pan>;=0A    }=0A    <span class=3D"pl-k">return</span> <span clas=
s=3D"pl-c1">false</span>;=0A}=0A=0A<span class=3D"pl-k">private</=
span> <span class=3D"pl-k">void</span> inOrder(<span class=3D"pl-=
smi">TreeNode</span> root, <span class=3D"pl-k">List&lt;<span cla=
ss=3D"pl-smi">Integer</span>&gt;</span> nums){=0A    <span class=3D=
"pl-k">if</span>(root <span class=3D"pl-k">=3D=3D</span> <span cl=
ass=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span>;=0A=
    inOrder(root<span class=3D"pl-k">.</span>left, nums);=0A    n=
ums<span class=3D"pl-k">.</span>add(root<span class=3D"pl-k">.</s=
pan>val);=0A    inOrder(root<span class=3D"pl-k">.</span>right, n=
ums);=0A}</pre></div><p>=E5=9C=A8 BST =E4=B8=AD=E6=9F=A5=E6=89=BE=
=E6=9C=80=E5=B0=8F=E7=9A=84=E4=B8=A4=E4=B8=AA=E8=8A=82=E7=82=B9=E4=
=B9=8B=E5=B7=AE=E7=9A=84=E7=BB=9D=E5=AF=B9=E5=80=BC</p><p><a href=
=3D"https://leetcode.com/problems/minimum-absolute-difference-in-=
bst/description/" target=3D"_blank">Leetcode : 530. Minimum Absol=
ute Difference in BST (Easy)</a></p><p>=E5=88=A9=E7=94=A8 BST =E7=
=9A=84=E4=B8=AD=E5=BA=8F=E9=81=8D=E5=8E=86=E4=B8=BA=E6=9C=89=E5=BA=
=8F=E7=9A=84=E6=80=A7=E8=B4=A8=EF=BC=8C=E8=AE=A1=E7=AE=97=E4=B8=AD=
=E5=BA=8F=E9=81=8D=E5=8E=86=E4=B8=AD=E4=B8=B4=E8=BF=91=E7=9A=84=E4=
=B8=A4=E4=B8=AA=E8=8A=82=E7=82=B9=E4=B9=8B=E5=B7=AE=E7=9A=84=E7=BB=
=9D=E5=AF=B9=E5=80=BC=EF=BC=8C=E5=8F=96=E6=9C=80=E5=B0=8F=E5=80=BC=
=E3=80=82</p><div class=3D"highlight highlight-source-java"><pre>=
<span class=3D"pl-k">private</span> <span class=3D"pl-k">int</spa=
n> minDiff <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi"=
>Integer</span><span class=3D"pl-c1"><span class=3D"pl-k">.</span=
>MAX_VALUE</span>;=0A<span class=3D"pl-k">private</span> <span cl=
ass=3D"pl-k">int</span> preVal <span class=3D"pl-k">=3D</span> <s=
pan class=3D"pl-k">-</span><span class=3D"pl-c1">1</span>;=0A=0A<=
span class=3D"pl-k">public</span> <span class=3D"pl-k">int</span>=
 getMinimumDifference(<span class=3D"pl-smi">TreeNode</span> root=
) {=0A    inorder(root);=0A    <span class=3D"pl-k">return</span>=
 minDiff;=0A}=0A=0A<span class=3D"pl-k">private</span> <span clas=
s=3D"pl-k">void</span> inorder(<span class=3D"pl-smi">TreeNode</s=
pan> node){=0A    <span class=3D"pl-k">if</span>(node <span class=
=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>) <span=20=
class=3D"pl-k">return</span>;=0A    inorder(node<span class=3D"pl=
-k">.</span>left);=0A    <span class=3D"pl-k">if</span>(preVal <s=
pan class=3D"pl-k">!=3D</span> <span class=3D"pl-k">-</span><span=
 class=3D"pl-c1">1</span>) minDiff <span class=3D"pl-k">=3D</span=
> <span class=3D"pl-smi">Math</span><span class=3D"pl-k">.</span>=
min(minDiff, <span class=3D"pl-smi">Math</span><span class=3D"pl-=
k">.</span>abs(node<span class=3D"pl-k">.</span>val <span class=3D=
"pl-k">-</span> preVal));=0A    preVal <span class=3D"pl-k">=3D</=
span> node<span class=3D"pl-k">.</span>val;=0A    inorder(node<sp=
an class=3D"pl-k">.</span>right);=0A}</pre></div><p>=E6=8A=8A BST=
 =E6=AF=8F=E4=B8=AA=E8=8A=82=E7=82=B9=E7=9A=84=E5=80=BC=E9=83=BD=E5=
=8A=A0=E4=B8=8A=E6=AF=94=E5=AE=83=E5=A4=A7=E7=9A=84=E8=8A=82=E7=82=
=B9=E7=9A=84=E5=80=BC</p><p><a href=3D"https://leetcode.com/probl=
ems/convert-bst-to-greater-tree/description/" target=3D"_blank">L=
eetcode : Convert BST to Greater Tree (Easy)</a></p><p>=E5=85=88=E9=
=81=8D=E5=8E=86=E5=8F=B3=E5=AD=90=E6=A0=91=E3=80=82</p><div class=
=3D"highlight highlight-source-java"><pre><span class=3D"pl-k">pr=
ivate</span> <span class=3D"pl-k">int</span> sum <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-c1">0</span>;=0A=0A<span class=3D=
"pl-k">public</span> <span class=3D"pl-smi">TreeNode</span> conve=
rtBST(<span class=3D"pl-smi">TreeNode</span> root) {=0A    traver=
(root);=0A    <span class=3D"pl-k">return</span> root;=0A}=0A=0A<=
span class=3D"pl-k">private</span> <span class=3D"pl-k">void</spa=
n> traver(<span class=3D"pl-smi">TreeNode</span> root) {=0A    <s=
pan class=3D"pl-k">if</span> (root <span class=3D"pl-k">=3D=3D</s=
pan> <span class=3D"pl-c1">null</span>) {=0A        <span class=3D=
"pl-k">return</span>;=0A    }=0A    <span class=3D"pl-k">if</span=
> (root<span class=3D"pl-k">.</span>right <span class=3D"pl-k">!=3D=
</span> <span class=3D"pl-c1">null</span>) {=0A        traver(roo=
t<span class=3D"pl-k">.</span>right);=0A    }=0A    sum <span cla=
ss=3D"pl-k">+=3D</span> root<span class=3D"pl-k">.</span>val;=0A=20=
   root<span class=3D"pl-k">.</span>val <span class=3D"pl-k">=3D<=
/span> sum;=0A    <span class=3D"pl-k">if</span> (root<span class=
=3D"pl-k">.</span>left <span class=3D"pl-k">!=3D</span> <span cla=
ss=3D"pl-c1">null</span>) {=0A        traver(root<span class=3D"p=
l-k">.</span>left);=0A    }=0A}</pre></div><p>=E5=AF=BB=E6=89=BE=20=
BST =E4=B8=AD=E5=87=BA=E7=8E=B0=E6=AC=A1=E6=95=B0=E6=9C=80=E5=A4=9A=
=E7=9A=84=E8=8A=82=E7=82=B9</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">private</span> <span class=
=3D"pl-k">int</span> cnt <span class=3D"pl-k">=3D</span> <span cl=
ass=3D"pl-c1">1</span>;=0A<span class=3D"pl-k">private</span> <sp=
an class=3D"pl-k">int</span> maxCnt <span class=3D"pl-k">=3D</spa=
n> <span class=3D"pl-c1">1</span>;=0A<span class=3D"pl-k">private=
</span> <span class=3D"pl-smi">TreeNode</span> preNode <span clas=
s=3D"pl-k">=3D</span> <span class=3D"pl-c1">null</span>;=0A<span=20=
class=3D"pl-k">private</span> <span class=3D"pl-k">List&lt;<span=20=
class=3D"pl-smi">Integer</span>&gt;</span> list;=0A=0A<span class=
=3D"pl-k">public</span> <span class=3D"pl-k">int</span>[] findMod=
e(<span class=3D"pl-smi">TreeNode</span> root) {=0A    list <span=
 class=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span=20=
class=3D"pl-k">ArrayList&lt;&gt;</span>();=0A    inorder(root);=0A=
    <span class=3D"pl-k">int</span>[] ret <span class=3D"pl-k">=3D=
</span> <span class=3D"pl-k">new</span> <span class=3D"pl-smi">in=
t</span>[list<span class=3D"pl-k">.</span>size()];=0A    <span cl=
ass=3D"pl-k">int</span> idx <span class=3D"pl-k">=3D</span> <span=
 class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">for</span>(=
<span class=3D"pl-k">int</span> num <span class=3D"pl-k">:</span>=
 list){=0A        ret[idx<span class=3D"pl-k">++</span>] <span cl=
ass=3D"pl-k">=3D</span> num;=0A    }=0A    <span class=3D"pl-k">r=
eturn</span> ret;=0A}=0A=0A<span class=3D"pl-k">private</span> <s=
pan class=3D"pl-k">void</span> inorder(<span class=3D"pl-smi">Tre=
eNode</span> node){=0A    <span class=3D"pl-k">if</span>(node <sp=
an class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">null</span>=
) <span class=3D"pl-k">return</span>;=0A    inorder(node<span cla=
ss=3D"pl-k">.</span>left);=0A    <span class=3D"pl-k">if</span>(p=
reNode <span class=3D"pl-k">!=3D</span> <span class=3D"pl-c1">nul=
l</span>){=0A        <span class=3D"pl-k">if</span>(preNode<span=20=
class=3D"pl-k">.</span>val <span class=3D"pl-k">=3D=3D</span> nod=
e<span class=3D"pl-k">.</span>val) cnt<span class=3D"pl-k">++</sp=
an>;=0A        <span class=3D"pl-k">else</span> cnt <span class=3D=
"pl-k">=3D</span> <span class=3D"pl-c1">1</span>;=0A    }=0A    <=
span class=3D"pl-k">if</span>(cnt <span class=3D"pl-k">&gt;</span=
> maxCnt){=0A        maxCnt <span class=3D"pl-k">=3D</span> cnt;=0A=
        list<span class=3D"pl-k">.</span>clear();=0A        list<=
span class=3D"pl-k">.</span>add(node<span class=3D"pl-k">.</span>=
val);=0A    } <span class=3D"pl-k">else</span> <span class=3D"pl-=
k">if</span>(cnt <span class=3D"pl-k">=3D=3D</span> maxCnt){=0A =20=
      list<span class=3D"pl-k">.</span>add(node<span class=3D"pl-=
k">.</span>val);=0A    }=0A    preNode <span class=3D"pl-k">=3D</=
span> node;=0A    inorder(node<span class=3D"pl-k">.</span>right)=
;=0A}</pre></div><p>=E5=AF=BB=E6=89=BE BST =E7=9A=84=E7=AC=AC k =E4=
=B8=AA=E5=85=83=E7=B4=A0</p><p><a href=3D"https://leetcode.com/pr=
oblems/kth-smallest-element-in-a-bst/description/" target=3D"_bla=
nk">Leetcode : 230. Kth Smallest Element in a BST (Medium)</a></p=
><p>=E9=80=92=E5=BD=92=E8=A7=A3=E6=B3=95=EF=BC=9A</p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">publi=
c</span> <span class=3D"pl-k">int</span> kthSmallest(<span class=3D=
"pl-smi">TreeNode</span> root, <span class=3D"pl-k">int</span> k)=
 {=0A    <span class=3D"pl-k">int</span> leftCnt <span class=3D"p=
l-k">=3D</span> count(root<span class=3D"pl-k">.</span>left);=0A=20=
   <span class=3D"pl-k">if</span>(leftCnt <span class=3D"pl-k">=3D=
=3D</span> k <span class=3D"pl-k">-</span> <span class=3D"pl-c1">=
1</span>) <span class=3D"pl-k">return</span> root<span class=3D"p=
l-k">.</span>val;=0A    <span class=3D"pl-k">if</span>(leftCnt <s=
pan class=3D"pl-k">&gt;</span> k <span class=3D"pl-k">-</span> <s=
pan class=3D"pl-c1">1</span>) <span class=3D"pl-k">return</span>=20=
kthSmallest(root<span class=3D"pl-k">.</span>left, k);=0A    <spa=
n class=3D"pl-k">return</span> kthSmallest(root<span class=3D"pl-=
k">.</span>right, k <span class=3D"pl-k">-</span> leftCnt <span c=
lass=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>);=0A}=0A=0A=
<span class=3D"pl-k">private</span> <span class=3D"pl-k">int</spa=
n> count(<span class=3D"pl-smi">TreeNode</span> node) {=0A    <sp=
an class=3D"pl-k">if</span>(node <span class=3D"pl-k">=3D=3D</spa=
n> <span class=3D"pl-c1">null</span>) <span class=3D"pl-k">return=
</span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k=
">return</span> <span class=3D"pl-c1">1</span> <span class=3D"pl-=
k">+</span> count(node<span class=3D"pl-k">.</span>left) <span cl=
ass=3D"pl-k">+</span> count(node<span class=3D"pl-k">.</span>righ=
t);=0A}</pre></div><p>=E4=B8=AD=E5=BA=8F=E9=81=8D=E5=8E=86=E8=A7=A3=
=E6=B3=95=EF=BC=9A</p><div class=3D"highlight highlight-source-ja=
va"><pre><span class=3D"pl-k">private</span> <span class=3D"pl-k"=
>int</span> cnt <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-c1">0</span>;=0A<span class=3D"pl-k">private</span> <span class=3D=
"pl-k">int</span> val;=0A=0A<span class=3D"pl-k">public</span> <s=
pan class=3D"pl-k">int</span> kthSmallest(<span class=3D"pl-smi">=
TreeNode</span> root, <span class=3D"pl-k">int</span> k) {=0A   =20=
inorder(root, k);=0A    <span class=3D"pl-k">return</span> val;=0A=
}=0A=0A<span class=3D"pl-k">private</span> <span class=3D"pl-k">v=
oid</span> inorder(<span class=3D"pl-smi">TreeNode</span> node, <=
span class=3D"pl-k">int</span> k) {=0A    <span class=3D"pl-k">if=
</span>(node <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl=
-c1">null</span>) <span class=3D"pl-k">return</span>;=0A    inord=
er(node<span class=3D"pl-k">.</span>left, k);=0A    cnt<span clas=
s=3D"pl-k">++</span>;=0A    <span class=3D"pl-k">if</span>(cnt <s=
pan class=3D"pl-k">=3D=3D</span> k) {=0A        val <span class=3D=
"pl-k">=3D</span> node<span class=3D"pl-k">.</span>val;=0A      =20=
 <span class=3D"pl-k">return</span>;=0A    }=0A    inorder(node<s=
pan class=3D"pl-k">.</span>right, k);=0A}</pre></div><h3>Trie</h3=
><p><a href=3D"https://github.com/CyC2018/InterviewNotes/blob/mas=
ter/pics/5c638d59-d4ae-4ba4-ad44-80bdc30f38dd.jpg" target=3D"_bla=
nk"><img src=3D"D:\=E6=96=87=E6=A1=A3\My Knowledge\temp\969fb8f2-=
eb58-4891-86ea-51bce0e90052\128\index_files\0.6935629784724526.pn=
g" alt=3D""></a></p><p>Trie=EF=BC=8C=E5=8F=88=E7=A7=B0=E5=89=8D=E7=
=BC=80=E6=A0=91=E6=88=96=E5=AD=97=E5=85=B8=E6=A0=91=EF=BC=8C=E7=94=
=A8=E4=BA=8E=E5=88=A4=E6=96=AD=E5=AD=97=E7=AC=A6=E4=B8=B2=E6=98=AF=
=E5=90=A6=E5=AD=98=E5=9C=A8=E6=88=96=E8=80=85=E6=98=AF=E5=90=A6=E5=
=85=B7=E6=9C=89=E6=9F=90=E7=A7=8D=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=89=
=8D=E7=BC=80=E3=80=82</p><p>=E5=AE=9E=E7=8E=B0=E4=B8=80=E4=B8=AA=20=
Trie</p><p><a href=3D"https://leetcode.com/problems/implement-tri=
e-prefix-tree/description/" target=3D"_blank">Leetcode : 208. Imp=
lement Trie (Prefix Tree) (Medium)</a></p><div class=3D"highlight=
 highlight-source-java"><pre><span class=3D"pl-k">class</span> <s=
pan class=3D"pl-en">Trie</span> {=0A    =0A    <span class=3D"pl-=
k">private</span> <span class=3D"pl-k">class</span> <span class=3D=
"pl-en">Node</span>{=0A        <span class=3D"pl-k">Node</span>[]=
 childs <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new<=
/span> <span class=3D"pl-smi">Node</span>[<span class=3D"pl-c1">2=
6</span>];=0A        <span class=3D"pl-k">boolean</span> isLeaf;=0A=
    }=0A    =0A    <span class=3D"pl-k">private</span> <span clas=
s=3D"pl-smi">Node</span> root <span class=3D"pl-k">=3D</span> <sp=
an class=3D"pl-k">new</span> <span class=3D"pl-smi">Node</span>()=
;=0A    =0A    <span class=3D"pl-c"><span class=3D"pl-c">/*</span=
>* Initialize your data structure here. <span class=3D"pl-c">*/</=
span></span>=0A    <span class=3D"pl-k">public</span> <span class=
=3D"pl-en">Trie</span>() {=0A    }=0A    =0A    <span class=3D"pl=
-c"><span class=3D"pl-c">/*</span>* Inserts a word into the trie.=
 <span class=3D"pl-c">*/</span></span>=0A    <span class=3D"pl-k"=
>public</span> <span class=3D"pl-k">void</span> <span class=3D"pl=
-en">insert</span>(<span class=3D"pl-smi">String</span> <span cla=
ss=3D"pl-v">word</span>) {=0A        <span class=3D"pl-k">int</sp=
an> idx <span class=3D"pl-k">=3D</span> word<span class=3D"pl-k">=
.</span>charAt(<span class=3D"pl-c1">0</span>) <span class=3D"pl-=
k">-</span> <span class=3D"pl-s"><span class=3D"pl-pds">'</span>a=
<span class=3D"pl-pds">'</span></span>;=0A        insert(word, ro=
ot);=0A    }=0A    =0A    <span class=3D"pl-k">private</span> <sp=
an class=3D"pl-k">void</span> <span class=3D"pl-en">insert</span>=
(<span class=3D"pl-smi">String</span> <span class=3D"pl-v">word</=
span>, <span class=3D"pl-smi">Node</span> <span class=3D"pl-v">no=
de</span>){=0A        <span class=3D"pl-k">int</span> idx <span c=
lass=3D"pl-k">=3D</span> word<span class=3D"pl-k">.</span>charAt(=
<span class=3D"pl-c1">0</span>) <span class=3D"pl-k">-</span> <sp=
an class=3D"pl-s"><span class=3D"pl-pds">'</span>a<span class=3D"=
pl-pds">'</span></span>;=0A        <span class=3D"pl-k">if</span>=
(node<span class=3D"pl-k">.</span>childs[idx] <span class=3D"pl-k=
">=3D=3D</span> <span class=3D"pl-c1">null</span>){=0A          =20=
 node<span class=3D"pl-k">.</span>childs[idx] <span class=3D"pl-k=
">=3D</span> <span class=3D"pl-k">new</span> <span class=3D"pl-sm=
i">Node</span>();=0A        }=0A        <span class=3D"pl-k">if</=
span>(word<span class=3D"pl-k">.</span>length() <span class=3D"pl=
-k">=3D=3D</span> <span class=3D"pl-c1">1</span>) node<span class=
=3D"pl-k">.</span>childs[idx]<span class=3D"pl-k">.</span>isLeaf=20=
<span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">true</span>=
;=0A        <span class=3D"pl-k">else</span> insert(word<span cla=
ss=3D"pl-k">.</span>substring(<span class=3D"pl-c1">1</span>), no=
de<span class=3D"pl-k">.</span>childs[idx]);=0A    }=0A    =0A  =20=
 <span class=3D"pl-c"><span class=3D"pl-c">/*</span>* Returns if=20=
the word is in the trie. <span class=3D"pl-c">*/</span></span>=0A=
    <span class=3D"pl-k">public</span> <span class=3D"pl-k">boole=
an</span> <span class=3D"pl-en">search</span>(<span class=3D"pl-s=
mi">String</span> <span class=3D"pl-v">word</span>) {=0A        <=
span class=3D"pl-k">return</span> search(word, root); =0A    }=0A=
    =0A    <span class=3D"pl-k">private</span> <span class=3D"pl-=
k">boolean</span> <span class=3D"pl-en">search</span>(<span class=
=3D"pl-smi">String</span> <span class=3D"pl-v">word</span>, <span=
 class=3D"pl-smi">Node</span> <span class=3D"pl-v">node</span>){=0A=
        <span class=3D"pl-k">if</span>(node <span class=3D"pl-k">=
=3D=3D</span> <span class=3D"pl-c1">null</span>) <span class=3D"p=
l-k">return</span> <span class=3D"pl-c1">false</span>;=0A       =20=
<span class=3D"pl-k">int</span> idx <span class=3D"pl-k">=3D</spa=
n> word<span class=3D"pl-k">.</span>charAt(<span class=3D"pl-c1">=
0</span>) <span class=3D"pl-k">-</span> <span class=3D"pl-s"><spa=
n class=3D"pl-pds">'</span>a<span class=3D"pl-pds">'</span></span=
>;=0A        <span class=3D"pl-k">if</span>(node<span class=3D"pl=
-k">.</span>childs[idx] <span class=3D"pl-k">=3D=3D</span> <span=20=
class=3D"pl-c1">null</span>) <span class=3D"pl-k">return</span> <=
span class=3D"pl-c1">false</span>;=0A        <span class=3D"pl-k"=
>if</span>(word<span class=3D"pl-k">.</span>length() <span class=3D=
"pl-k">=3D=3D</span> <span class=3D"pl-c1">1</span>) <span class=3D=
"pl-k">return</span> node<span class=3D"pl-k">.</span>childs[idx]=
<span class=3D"pl-k">.</span>isLeaf;=0A        <span class=3D"pl-=
k">return</span> search(word<span class=3D"pl-k">.</span>substrin=
g(<span class=3D"pl-c1">1</span>), node<span class=3D"pl-k">.</sp=
an>childs[idx]);=0A    }=0A    =0A    <span class=3D"pl-c"><span=20=
class=3D"pl-c">/*</span>* Returns if there is any word in the tri=
e that starts with the given prefix. <span class=3D"pl-c">*/</spa=
n></span>=0A    <span class=3D"pl-k">public</span> <span class=3D=
"pl-k">boolean</span> <span class=3D"pl-en">startsWith</span>(<sp=
an class=3D"pl-smi">String</span> <span class=3D"pl-v">prefix</sp=
an>) {=0A        <span class=3D"pl-k">return</span> startWith(pre=
fix, root);=0A    }=0A    =0A    <span class=3D"pl-k">private</sp=
an> <span class=3D"pl-k">boolean</span> <span class=3D"pl-en">sta=
rtWith</span>(<span class=3D"pl-smi">String</span> <span class=3D=
"pl-v">prefix</span>, <span class=3D"pl-smi">Node</span> <span cl=
ass=3D"pl-v">node</span>){=0A        <span class=3D"pl-k">if</spa=
n>(node <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1">=
null</span>) <span class=3D"pl-k">return</span> <span class=3D"pl=
-c1">false</span>;=0A        <span class=3D"pl-k">if</span>(prefi=
x<span class=3D"pl-k">.</span>length() <span class=3D"pl-k">=3D=3D=
</span> <span class=3D"pl-c1">0</span>) <span class=3D"pl-k">retu=
rn</span> <span class=3D"pl-c1">true</span>;=0A        <span clas=
s=3D"pl-k">int</span> idx <span class=3D"pl-k">=3D</span> prefix<=
span class=3D"pl-k">.</span>charAt(<span class=3D"pl-c1">0</span>=
) <span class=3D"pl-k">-</span> <span class=3D"pl-s"><span class=3D=
"pl-pds">'</span>a<span class=3D"pl-pds">'</span></span>;=0A    =20=
   <span class=3D"pl-k">return</span> startWith(prefix<span class=
=3D"pl-k">.</span>substring(<span class=3D"pl-c1">1</span>), node=
<span class=3D"pl-k">.</span>childs[idx]);=0A    }=0A}</pre></div=
><p>=E5=AE=9E=E7=8E=B0=E4=B8=80=E4=B8=AA Trie=EF=BC=8C=E7=94=A8=E6=
=9D=A5=E6=B1=82=E5=89=8D=E7=BC=80=E5=92=8C</p><p><a href=3D"https=
://leetcode.com/problems/map-sum-pairs/description/" target=3D"_b=
lank">Leetcode : 677. Map Sum Pairs (Medium)</a></p><div class=3D=
"highlight highlight-source-java"><pre><span class=3D"pl-k">class=
</span> <span class=3D"pl-en">MapSum</span> {=0A    <span class=3D=
"pl-k">private</span> <span class=3D"pl-k">class</span> <span cla=
ss=3D"pl-en">Trie</span> {=0A        <span class=3D"pl-k">int</sp=
an> val;=0A        <span class=3D"pl-k">Map&lt;<span class=3D"pl-=
smi">Character</span>, <span class=3D"pl-smi">Trie</span>&gt;</sp=
an> childs;=0A        <span class=3D"pl-k">boolean</span> isWord;=
=0A        =0A        <span class=3D"pl-en">Trie</span>() {=0A  =20=
         childs <span class=3D"pl-k">=3D</span> <span class=3D"pl=
-k">new</span> <span class=3D"pl-k">HashMap&lt;&gt;</span>();=0A=20=
       }=0A    }=0A    =0A    <span class=3D"pl-k">private</span>=
 <span class=3D"pl-smi">Trie</span> root;=0A=0A    <span class=3D=
"pl-k">public</span> <span class=3D"pl-en">MapSum</span>() {=0A =20=
      root <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">n=
ew</span> <span class=3D"pl-smi">Trie</span>();=0A    }=0A    =0A=
    <span class=3D"pl-k">public</span> <span class=3D"pl-k">void<=
/span> <span class=3D"pl-en">insert</span>(<span class=3D"pl-smi"=
>String</span> <span class=3D"pl-v">key</span>, <span class=3D"pl=
-k">int</span> <span class=3D"pl-v">val</span>) {=0A        <span=
 class=3D"pl-smi">Trie</span> cur <span class=3D"pl-k">=3D</span>=
 root;=0A        <span class=3D"pl-k">for</span>(<span class=3D"p=
l-k">char</span> c <span class=3D"pl-k">:</span> key<span class=3D=
"pl-k">.</span>toCharArray()) {=0A            <span class=3D"pl-k=
">if</span>(<span class=3D"pl-k">!</span>cur<span class=3D"pl-k">=
.</span>childs<span class=3D"pl-k">.</span>containsKey(c)) {=0A =20=
              <span class=3D"pl-smi">Trie</span> next <span class=
=3D"pl-k">=3D</span> <span class=3D"pl-k">new</span> <span class=3D=
"pl-smi">Trie</span>();=0A                cur<span class=3D"pl-k"=
>.</span>childs<span class=3D"pl-k">.</span>put(c, next);=0A    =20=
       }=0A            cur <span class=3D"pl-k">=3D</span> cur<sp=
an class=3D"pl-k">.</span>childs<span class=3D"pl-k">.</span>get(=
c);=0A        }=0A        cur<span class=3D"pl-k">.</span>val <sp=
an class=3D"pl-k">=3D</span> val;=0A        cur<span class=3D"pl-=
k">.</span>isWord <span class=3D"pl-k">=3D</span> <span class=3D"=
pl-c1">true</span>;=0A    }=0A    =0A    <span class=3D"pl-k">pub=
lic</span> <span class=3D"pl-k">int</span> <span class=3D"pl-en">=
sum</span>(<span class=3D"pl-smi">String</span> <span class=3D"pl=
-v">prefix</span>) {=0A        <span class=3D"pl-smi">Trie</span>=
 cur <span class=3D"pl-k">=3D</span> root;=0A        <span class=3D=
"pl-k">for</span>(<span class=3D"pl-k">char</span> c <span class=3D=
"pl-k">:</span> prefix<span class=3D"pl-k">.</span>toCharArray())=
 {=0A            <span class=3D"pl-k">if</span>(<span class=3D"pl=
-k">!</span>cur<span class=3D"pl-k">.</span>childs<span class=3D"=
pl-k">.</span>containsKey(c)) <span class=3D"pl-k">return</span>=20=
<span class=3D"pl-c1">0</span>;=0A            cur <span class=3D"=
pl-k">=3D</span> cur<span class=3D"pl-k">.</span>childs<span clas=
s=3D"pl-k">.</span>get(c);=0A        }=0A        <span class=3D"p=
l-k">return</span> dfs(cur);=0A    }=0A    =0A    <span class=3D"=
pl-k">private</span> <span class=3D"pl-k">int</span> <span class=3D=
"pl-en">dfs</span>(<span class=3D"pl-smi">Trie</span> <span class=
=3D"pl-v">cur</span>) {=0A        <span class=3D"pl-k">int</span>=
 sum <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</spa=
n>;=0A        <span class=3D"pl-k">if</span>(cur<span class=3D"pl=
-k">.</span>isWord) {=0A            sum <span class=3D"pl-k">+=3D=
</span> cur<span class=3D"pl-k">.</span>val;=0A        }=0A     =20=
  <span class=3D"pl-k">for</span>(<span class=3D"pl-smi">Trie</sp=
an> next <span class=3D"pl-k">:</span> cur<span class=3D"pl-k">.<=
/span>childs<span class=3D"pl-k">.</span>values()) {=0A         =20=
  sum <span class=3D"pl-k">+=3D</span> dfs(next);=0A        }=0A=20=
       <span class=3D"pl-k">return</span> sum;=0A    }=0A}</pre><=
/div><h2>=E5=9B=BE</h2><h2>=E4=BD=8D=E8=BF=90=E7=AE=97</h2><p>1.=20=
=E5=9F=BA=E6=9C=AC=E5=8E=9F=E7=90=86</p><p>0s =E8=A1=A8=E7=A4=BA=20=
=E4=B8=80=E4=B8=B2 0 =EF=BC=8C1s =E8=A1=A8=E7=A4=BA=E4=B8=80=E4=B8=
=B2 1=E3=80=82</p><pre><ol class=3D"hljs-ln wiz-list-level1" styl=
e=3D"background-image: initial; background-attachment: initial; b=
ackground-size: initial; background-origin: initial; background-c=
lip: initial; background-position: initial; background-repeat: in=
itial;"><li><div class=3D"hljs-ln-line hljs-ln-n" data-line-numbe=
r=3D"1" style=3D"text-align: right;"></div><div class=3D"hljs-ln-=
line">x ^ <span class=3D"hljs-number">0s</span> =3D x      x &amp=
; <span class=3D"hljs-number">0s</span> =3D <span class=3D"hljs-n=
umber">0</span>      x | <span class=3D"hljs-number">0s</span> =3D=
 x</div></li><li><div class=3D"hljs-ln-line hljs-ln-n" data-line-=
number=3D"2" style=3D"text-align: right;"></div><div class=3D"hlj=
s-ln-line">x ^ <span class=3D"hljs-number">1s</span> =3D \~x    =20=
x &amp; <span class=3D"hljs-number">1s</span> =3D x      x | <spa=
n class=3D"hljs-number">1s</span> =3D <span class=3D"hljs-number"=
>1s</span></div></li><li><div class=3D"hljs-ln-line hljs-ln-n" da=
ta-line-number=3D"3" style=3D"text-align: right;"></div><div clas=
s=3D"hljs-ln-line">x ^ x =3D <span class=3D"hljs-number">0</span>=
       x &amp; x =3D x       x | x =3D x</div></li></ol></pre><p>=
=E2=91=A0 =E5=88=A9=E7=94=A8 x ^ 1s =3D ~x =E7=9A=84=E7=89=B9=E7=82=
=B9=EF=BC=8C=E5=8F=AF=E4=BB=A5=E5=B0=86=E4=BD=8D=E7=BA=A7=E8=A1=A8=
=E7=A4=BA=E7=BF=BB=E8=BD=AC=EF=BC=9B=E5=88=A9=E7=94=A8 x ^ x =3D=20=
0 =E7=9A=84=E7=89=B9=E7=82=B9=EF=BC=8C=E5=8F=AF=E4=BB=A5=E5=B0=86=
=E4=B8=89=E4=B8=AA=E6=95=B0=E4=B8=AD=E9=87=8D=E5=A4=8D=E7=9A=84=E4=
=B8=A4=E4=B8=AA=E6=95=B0=E5=8E=BB=E9=99=A4=EF=BC=8C=E5=8F=AA=E7=95=
=99=E4=B8=8B=E5=8F=A6=E4=B8=80=E4=B8=AA=E6=95=B0=EF=BC=9B=E2=91=A1=
 =E5=88=A9=E7=94=A8 x &amp; 0s =3D 0 =E5=92=8C x &amp; 1s =3D x =E7=
=9A=84=E7=89=B9=E7=82=B9=EF=BC=8C=E5=8F=AF=E4=BB=A5=E5=AE=9E=E7=8E=
=B0=E6=8E=A9=E7=A0=81=E6=93=8D=E4=BD=9C=E3=80=82=E4=B8=80=E4=B8=AA=
=E6=95=B0 num =E4=B8=8E mask =EF=BC=9A00111100 =E8=BF=9B=E8=A1=8C=
=E4=BD=8D=E4=B8=8E=E6=93=8D=E4=BD=9C=EF=BC=8C=E5=8F=AA=E4=BF=9D=E7=
=95=99 num =E4=B8=AD=E4=B8=8E mask =E7=9A=84 1 =E9=83=A8=E5=88=86=
=E7=9B=B8=E5=AF=B9=E5=BA=94=E7=9A=84=E4=BD=8D=EF=BC=9B=E2=91=A2 =E5=
=88=A9=E7=94=A8 x | 0s =3D x =E5=92=8C x | 1s =3D 1s =E7=9A=84=E7=
=89=B9=E7=82=B9=EF=BC=8C=E5=8F=AF=E4=BB=A5=E5=AE=9E=E7=8E=B0=E8=AE=
=BE=E7=BD=AE=E6=93=8D=E4=BD=9C=E3=80=82=E4=B8=80=E4=B8=AA=E6=95=B0=
 num =E4=B8=8E mask=EF=BC=9A00111100 =E8=BF=9B=E8=A1=8C=E4=BD=8D=E6=
=88=96=E6=93=8D=E4=BD=9C=EF=BC=8C=E5=B0=86 num =E4=B8=AD=E4=B8=8E=
 mask =E7=9A=84 1 =E9=83=A8=E5=88=86=E7=9B=B8=E5=AF=B9=E5=BA=94=E7=
=9A=84=E4=BD=8D=E9=83=BD=E8=AE=BE=E7=BD=AE=E4=B8=BA 1 =E3=80=82</=
p><p>&gt;&gt; n =E4=B8=BA=E7=AE=97=E6=9C=AF=E5=8F=B3=E7=A7=BB=EF=BC=
=8C=E7=9B=B8=E5=BD=93=E4=BA=8E=E9=99=A4=E4=BB=A5 2n=EF=BC=9B&gt;&=
gt;&gt; n =E4=B8=BA=E6=97=A0=E7=AC=A6=E5=8F=B7=E5=8F=B3=E7=A7=BB=EF=
=BC=8C=E5=B7=A6=E8=BE=B9=E4=BC=9A=E8=A1=A5=E4=B8=8A 0=E3=80=82&lt=
;&lt; n =E4=B8=BA=E7=AE=97=E6=9C=AF=E5=B7=A6=E7=A7=BB=EF=BC=8C=E7=
=9B=B8=E5=BD=93=E4=BA=8E=E4=B9=98=E4=BB=A5 2n=E3=80=82</p><p>n&am=
p;(n-1) =E8=AF=A5=E4=BD=8D=E8=BF=90=E7=AE=97=E6=98=AF=E5=8E=BB=E9=
=99=A4 n =E7=9A=84=E4=BD=8D=E7=BA=A7=E8=A1=A8=E7=A4=BA=E4=B8=AD=E6=
=9C=80=E4=BD=8E=E7=9A=84=E9=82=A3=E4=B8=80=E4=BD=8D=E3=80=82=E4=BE=
=8B=E5=A6=82=E5=AF=B9=E4=BA=8E=E4=BA=8C=E8=BF=9B=E5=88=B6=E8=A1=A8=
=E7=A4=BA 10110100=EF=BC=8C=E5=87=8F=E5=8E=BB 1 =E5=BE=97=E5=88=B0=
 10110011=EF=BC=8C=E8=BF=99=E4=B8=A4=E4=B8=AA=E6=95=B0=E7=9B=B8=E4=
=B8=8E=E5=BE=97=E5=88=B0 10110000=E3=80=82</p><p>n-n&amp;(~n+1) =E6=
=A6=82=E8=BF=90=E7=AE=97=E6=98=AF=E5=8E=BB=E9=99=A4 n =E7=9A=84=E4=
=BD=8D=E7=BA=A7=E8=A1=A8=E7=A4=BA=E4=B8=AD=E6=9C=80=E9=AB=98=E7=9A=
=84=E9=82=A3=E4=B8=80=E4=BD=8D=E3=80=82</p><p>n&amp;(-n) =E8=AF=A5=
=E8=BF=90=E7=AE=97=E5=BE=97=E5=88=B0 n =E7=9A=84=E4=BD=8D=E7=BA=A7=
=E8=A1=A8=E7=A4=BA=E4=B8=AD=E6=9C=80=E4=BD=8E=E7=9A=84=E9=82=A3=E4=
=B8=80=E4=BD=8D=E3=80=82-n =E5=BE=97=E5=88=B0 n =E7=9A=84=E5=8F=8D=
=E7=A0=81=E5=8A=A0 1=EF=BC=8C=E5=AF=B9=E4=BA=8E=E4=BA=8C=E8=BF=9B=
=E5=88=B6=E8=A1=A8=E7=A4=BA 10110100=EF=BC=8C-n =E5=BE=97=E5=88=B0=
 01001100=EF=BC=8C=E7=9B=B8=E4=B8=8E=E5=BE=97=E5=88=B0 00000100</=
p><p>2. mask =E8=AE=A1=E7=AE=97</p><p>=E8=A6=81=E8=8E=B7=E5=8F=96=
 111111111=EF=BC=8C=E5=B0=86 0 =E5=8F=96=E5=8F=8D=E5=8D=B3=E5=8F=AF=
=EF=BC=8C~0=E3=80=82</p><p>=E8=A6=81=E5=BE=97=E5=88=B0=E5=8F=AA=E6=
=9C=89=E7=AC=AC i =E4=BD=8D=E4=B8=BA 1 =E7=9A=84 mask=EF=BC=8C=E5=
=B0=86 1 =E5=90=91=E5=B7=A6=E7=A7=BB=E5=8A=A8 i =E4=BD=8D=E5=8D=B3=
=E5=8F=AF=EF=BC=8C1&lt;&lt;i =E3=80=82=E4=BE=8B=E5=A6=82 1&lt;&lt=
;5 =E5=BE=97=E5=88=B0=E5=8F=AA=E6=9C=89=E7=AC=AC 5 =E4=BD=8D=E4=B8=
=BA 1 =E7=9A=84 mask =EF=BC=9A00010000=E3=80=82</p><p>=E8=A6=81=E5=
=BE=97=E5=88=B0 1 =E5=88=B0 i =E4=BD=8D=E4=B8=BA 1 =E7=9A=84 mask=
=EF=BC=8C1&lt;&lt;(i+1)-1 =E5=8D=B3=E5=8F=AF=EF=BC=8C=E4=BE=8B=E5=
=A6=82=E5=B0=86 1&lt;&lt;(4+1)-1 =3D 00010000-1 =3D 00001111=E3=80=
=82</p><p>=E8=A6=81=E5=BE=97=E5=88=B0 1 =E5=88=B0 i =E4=BD=8D=E4=B8=
=BA 0 =E7=9A=84 mask=EF=BC=8C=E5=8F=AA=E9=9C=80=E5=B0=86 1 =E5=88=
=B0 i =E4=BD=8D=E4=B8=BA 1 =E7=9A=84 mask =E5=8F=96=E5=8F=8D=EF=BC=
=8C=E5=8D=B3 ~(1&lt;&lt;(i+1)-1)=E3=80=82</p><p>3. =E4=BD=8D=E6=93=
=8D=E4=BD=9C=E4=B8=BE=E4=BE=8B</p><p>=E2=91=A0 =E8=8E=B7=E5=8F=96=
=E7=AC=AC i =E4=BD=8D</p><p>num &amp; 00010000 !=3D 0</p><div cla=
ss=3D"highlight highlight-source-java"><pre>(num <span class=3D"p=
l-k">&amp;</span> (<span class=3D"pl-c1">1</span> <span class=3D"=
pl-k">&lt;&lt;</span> i)) <span class=3D"pl-k">!=3D</span> <span=20=
class=3D"pl-c1">0</span>;</pre></div><p>=E2=91=A1 =E5=B0=86=E7=AC=
=AC i =E4=BD=8D=E8=AE=BE=E7=BD=AE=E4=B8=BA 1</p><p>num | 00010000=
</p><div class=3D"highlight highlight-source-java"><pre>num <span=
 class=3D"pl-k">|</span> (<span class=3D"pl-c1">1</span> <span cl=
ass=3D"pl-k">&lt;&lt;</span> i);</pre></div><p>=E2=91=A2 =E5=B0=86=
=E7=AC=AC i =E4=BD=8D=E6=B8=85=E9=99=A4=E4=B8=BA 0</p><p>num &amp=
; 11101111</p><div class=3D"highlight highlight-source-java"><pre=
>num <span class=3D"pl-k">&amp;</span> (\<span class=3D"pl-k">~</=
span>(<span class=3D"pl-c1">1</span> <span class=3D"pl-k">&lt;&lt=
;</span> i))</pre></div><p>=E2=91=A3 =E5=B0=86=E6=9C=80=E9=AB=98=E4=
=BD=8D=E5=88=B0=E7=AC=AC i =E4=BD=8D=E6=B8=85=E9=99=A4=E4=B8=BA 0=
</p><p>num &amp; 00001111</p><div class=3D"highlight highlight-so=
urce-java"><pre>num <span class=3D"pl-k">&amp;</span> ((<span cla=
ss=3D"pl-c1">1</span> <span class=3D"pl-k">&lt;&lt;</span> i) <sp=
an class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>);</pre>=
</div><p>=E2=91=A4 =E5=B0=86=E7=AC=AC 0 =E4=BD=8D=E5=88=B0=E7=AC=AC=
 i =E4=BD=8D=E6=B8=85=E9=99=A4=E4=B8=BA 0</p><p>num &amp; 1111000=
0</p><div class=3D"highlight highlight-source-java"><pre>num <spa=
n class=3D"pl-k">&amp;</span> (\<span class=3D"pl-k">~</span>((<s=
pan class=3D"pl-c1">1</span> <span class=3D"pl-k">&lt;&lt;</span>=
 (i<span class=3D"pl-k">+</span><span class=3D"pl-c1">1</span>))=20=
<span class=3D"pl-k">-</span> <span class=3D"pl-c1">1</span>));</=
pre></div><p>=E2=91=A5 =E5=B0=86=E7=AC=AC i =E4=BD=8D=E8=AE=BE=E7=
=BD=AE=E4=B8=BA 0 =E6=88=96=E8=80=85 1</p><p>=E5=85=88=E5=B0=86=E7=
=AC=AC i =E4=BD=8D=E6=B8=85=E9=9B=B6=EF=BC=8C=E7=84=B6=E5=90=8E=E5=
=B0=86 v =E5=B7=A6=E7=A7=BB i =E4=BD=8D=EF=BC=8C=E6=89=A7=E8=A1=8C=
=E2=80=9C=E4=BD=8D=E6=88=96=E2=80=9D=E8=BF=90=E7=AE=97=E3=80=82</=
p><div class=3D"highlight highlight-source-java"><pre>(num <span=20=
class=3D"pl-k">&amp;</span> (<span class=3D"pl-c1">1</span> <span=
 class=3D"pl-k">&lt;&lt;</span> i)) <span class=3D"pl-k">|</span>=
 (v <span class=3D"pl-k">&lt;&lt;</span> i);</pre></div><p>4. Jav=
a =E4=B8=AD=E7=9A=84=E4=BD=8D=E6=93=8D=E4=BD=9C</p><div class=3D"=
highlight highlight-text-html-basic"><pre>static int Integer.bitC=
ount()            // =E7=BB=9F=E8=AE=A1 1 =E7=9A=84=E6=95=B0=E9=87=
=8F=0Astatic int Integer.highestOneBit()       // =E8=8E=B7=E5=BE=
=97=E6=9C=80=E9=AB=98=E4=BD=8D=0Astatic String toBinaryString(int=
 i)      // =E8=BD=AC=E6=8D=A2=E4=BD=8D=E4=BA=8C=E8=BF=9B=E5=88=B6=
=E8=A1=A8=E7=A4=BA=E7=9A=84=E5=AD=97=E7=AC=A6=E4=B8=B2</pre></div=
><p>=E7=BB=9F=E8=AE=A1=E4=B8=A4=E4=B8=AA=E6=95=B0=E7=9A=84=E4=BA=8C=
=E8=BF=9B=E5=88=B6=E8=A1=A8=E7=A4=BA=E6=9C=89=E5=A4=9A=E5=B0=91=E4=
=BD=8D=E4=B8=8D=E5=90=8C</p><p><a href=3D"https://leetcode.com/pr=
oblems/hamming-distance/" target=3D"_blank">Leetcode : 461. Hammi=
ng Distance (Easy)</a></p><p>=E5=AF=B9=E4=B8=A4=E4=B8=AA=E6=95=B0=
=E8=BF=9B=E8=A1=8C=E5=BC=82=E6=88=96=E6=93=8D=E4=BD=9C=EF=BC=8C=E4=
=B8=8D=E5=90=8C=E7=9A=84=E9=82=A3=E4=B8=80=E4=BD=8D=E7=BB=93=E6=9E=
=9C=E4=B8=BA 1 =EF=BC=8C=E7=BB=9F=E8=AE=A1=E6=9C=89=E5=A4=9A=E5=B0=
=91=E4=B8=AA 1 =E5=8D=B3=E5=8F=AF=E3=80=82</p><div class=3D"highl=
ight highlight-source-java"><pre><span class=3D"pl-k">public</spa=
n> <span class=3D"pl-k">int</span> hammingDistance(<span class=3D=
"pl-k">int</span> x, <span class=3D"pl-k">int</span> y) {=0A    <=
span class=3D"pl-k">int</span> z <span class=3D"pl-k">=3D</span>=20=
x <span class=3D"pl-k">^</span> y;=0A    <span class=3D"pl-k">int=
</span> cnt <span class=3D"pl-k">=3D</span> <span class=3D"pl-c1"=
>0</span>;=0A    <span class=3D"pl-k">while</span>(z <span class=3D=
"pl-k">!=3D</span> <span class=3D"pl-c1">0</span>){=0A        <sp=
an class=3D"pl-k">if</span>((z <span class=3D"pl-k">&amp;</span>=20=
<span class=3D"pl-c1">1</span>) <span class=3D"pl-k">=3D=3D</span=
> <span class=3D"pl-c1">1</span>) cnt<span class=3D"pl-k">++</spa=
n>;=0A        z <span class=3D"pl-k">=3D</span> z <span class=3D"=
pl-k">&gt;&gt;</span> <span class=3D"pl-c1">1</span>;=0A    }=0A=20=
   <span class=3D"pl-k">return</span> cnt;=0A}</pre></div><p>=E5=8F=
=AF=E4=BB=A5=E4=BD=BF=E7=94=A8 Integer.bitcount() =E6=9D=A5=E7=BB=
=9F=E8=AE=A1 1 =E4=B8=AA=E7=9A=84=E4=B8=AA=E6=95=B0=E3=80=82</p><=
div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> hammingDista=
nce(<span class=3D"pl-k">int</span> x, <span class=3D"pl-k">int</=
span> y) {=0A    <span class=3D"pl-k">return</span> <span class=3D=
"pl-smi">Integer</span><span class=3D"pl-k">.</span>bitCount(x <s=
pan class=3D"pl-k">^</span> y);=0A}</pre></div><p>=E7=BF=BB=E8=BD=
=AC=E4=B8=80=E4=B8=AA=E6=95=B0=E7=9A=84<a href=3D"https://www.bai=
du.com/s?wd=3D%E6%AF%94%E7%89%B9%E4%BD%8D&amp;tn=3D24004469_oem_d=
g&amp;rsv_dl=3Dgh_pl_sl_csd" target=3D"_blank">=E6=AF=94=E7=89=B9=
=E4=BD=8D</a></p><p><a href=3D"https://leetcode.com/problems/reve=
rse-bits/description/" target=3D"_blank">Leetcode : 190. Reverse=20=
Bits (Easy)</a></p><div class=3D"highlight highlight-source-java"=
><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">int=
</span> reverseBits(<span class=3D"pl-k">int</span> n) {=0A    <s=
pan class=3D"pl-k">int</span> ret <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">for</=
span>(<span class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D<=
/span> <span class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt=
;</span> <span class=3D"pl-c1">32</span>; i<span class=3D"pl-k">+=
+</span>){=0A        ret <span class=3D"pl-k">&lt;&lt;</span><spa=
n class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span>;=0A  =20=
     ret <span class=3D"pl-k">|=3D</span> (n <span class=3D"pl-k"=
>&amp;</span> <span class=3D"pl-c1">1</span>);=0A        n <span=20=
class=3D"pl-k">&gt;&gt;&gt;</span><span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-c1">1</span>;=0A    }=0A    <span class=3D"pl-=
k">return</span> ret;=0A}</pre></div><p>=E4=B8=8D=E7=94=A8=E9=A2=9D=
=E5=A4=96=E5=8F=98=E9=87=8F=E4=BA=A4=E6=8D=A2=E4=B8=A4=E4=B8=AA=E6=
=95=B4=E6=95=B0</p><p><a href=3D"https://github.com/CyC2018/Inter=
viewNotes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3.md#" ta=
rget=3D"_blank">=E7=A8=8B=E5=BA=8F=E5=91=98=E4=BB=A3=E7=A0=81=E9=9D=
=A2=E8=AF=95=E6=8C=87=E5=8D=97 =EF=BC=9AP317</a></p><div class=3D=
"highlight highlight-source-java"><pre>a <span class=3D"pl-k">=3D=
</span> a <span class=3D"pl-k">^</span> b;=0Ab <span class=3D"pl-=
k">=3D</span> a <span class=3D"pl-k">^</span> b;=0Aa <span class=3D=
"pl-k">=3D</span> a <span class=3D"pl-k">^</span> b;</pre></div><=
p>=E5=B0=86 c =3D a ^ b=EF=BC=8C=E9=82=A3=E4=B9=88 b ^ c =3D b ^=20=
b ^ a =3D a=EF=BC=8Ca ^ c =3D a ^ a ^ b =3D b=E3=80=82</p><p>=E5=88=
=A4=E6=96=AD=E4=B8=80=E4=B8=AA=E6=95=B0=E6=98=AF=E4=B8=8D=E6=98=AF=
 4 =E7=9A=84 n =E6=AC=A1=E6=96=B9</p><p><a href=3D"https://leetco=
de.com/problems/power-of-four/" target=3D"_blank">Leetcode : 342.=
 Power of Four (Easy)</a></p><p>=E8=AF=A5=E6=95=B0=E4=BA=8C=E8=BF=
=9B=E5=88=B6=E8=A1=A8=E7=A4=BA=E6=9C=89=E4=B8=94=E5=8F=AA=E6=9C=89=
=E4=B8=80=E4=B8=AA=E5=A5=87=E6=95=B0=E4=BD=8D=E4=B8=BA 1 =EF=BC=8C=
=E5=85=B6=E4=BD=99=E7=9A=84=E9=83=BD=E4=B8=BA 0 =EF=BC=8C=E4=BE=8B=
=E5=A6=82 16 =EF=BC=9A 10000=E3=80=82=E5=8F=AF=E4=BB=A5=E6=AF=8F=E6=
=AC=A1=E6=8A=8A 1 =E5=90=91=E5=B7=A6=E7=A7=BB=E5=8A=A8 2 =E4=BD=8D=
=EF=BC=8C=E5=B0=B1=E8=83=BD=E6=9E=84=E9=80=A0=E5=87=BA=E8=BF=99=E7=
=A7=8D=E6=95=B0=E5=AD=97=EF=BC=8C=E7=84=B6=E5=90=8E=E6=AF=94=E8=BE=
=83=E6=9E=84=E9=80=A0=E5=87=BA=E6=9D=A5=E7=9A=84=E6=95=B0=E4=B8=8E=
=E8=A6=81=E5=88=A4=E6=96=AD=E7=9A=84=E6=95=B0=E6=98=AF=E5=90=A6=E7=
=9B=B8=E5=90=8C=E3=80=82</p><div class=3D"highlight highlight-sou=
rce-java"><pre><span class=3D"pl-k">public</span> <span class=3D"=
pl-k">boolean</span> isPowerOfFour(<span class=3D"pl-k">int</span=
> num) {=0A    <span class=3D"pl-k">int</span> i <span class=3D"p=
l-k">=3D</span> <span class=3D"pl-c1">1</span>;=0A    <span class=
=3D"pl-k">while</span>(i <span class=3D"pl-k">&gt;</span> <span c=
lass=3D"pl-c1">0</span>){=0A        <span class=3D"pl-k">if</span=
>(i <span class=3D"pl-k">=3D=3D</span> num) <span class=3D"pl-k">=
return</span> <span class=3D"pl-c1">true</span>;=0A        i <spa=
n class=3D"pl-k">=3D</span> i <span class=3D"pl-k">&lt;&lt;</span=
> <span class=3D"pl-c1">2</span>;=0A    }=0A    <span class=3D"pl=
-k">return</span> <span class=3D"pl-c1">false</span>;=0A}</pre></=
div><p>=E4=B9=9F=E5=8F=AF=E4=BB=A5=E7=94=A8 Java =E7=9A=84 Intege=
r.toString() =E6=96=B9=E6=B3=95=E5=B0=86=E8=AF=A5=E6=95=B0=E8=BD=AC=
=E6=8D=A2=E4=B8=BA 4 =E8=BF=9B=E5=88=B6=E5=BD=A2=E5=BC=8F=E7=9A=84=
=E5=AD=97=E7=AC=A6=E4=B8=B2=EF=BC=8C=E7=84=B6=E5=90=8E=E5=88=A4=E6=
=96=AD=E5=AD=97=E7=AC=A6=E4=B8=B2=E6=98=AF=E5=90=A6=E4=BB=A5 1 =E5=
=BC=80=E5=A4=B4=E3=80=82</p><div class=3D"highlight highlight-sou=
rce-java"><pre><span class=3D"pl-k">public</span> <span class=3D"=
pl-k">boolean</span> isPowerOfFour(<span class=3D"pl-k">int</span=
> num) {=0A    <span class=3D"pl-k">return</span> <span class=3D"=
pl-smi">Integer</span><span class=3D"pl-k">.</span>toString(num,=20=
<span class=3D"pl-c1">4</span>)<span class=3D"pl-k">.</span>match=
es(<span class=3D"pl-s"><span class=3D"pl-pds">"</span>10*<span c=
lass=3D"pl-pds">"</span></span>);=0A}</pre></div><p>=E5=88=A4=E6=96=
=AD=E4=B8=80=E4=B8=AA=E6=95=B0=E6=98=AF=E4=B8=8D=E6=98=AF 2 =E7=9A=
=84 n =E6=AC=A1=E6=96=B9</p><p><a href=3D"https://leetcode.com/pr=
oblems/power-of-two/description/" target=3D"_blank">Leetcode : 23=
1. Power of Two (Easy)</a></p><p>=E5=90=8C=E6=A0=B7=E5=8F=AF=E4=BB=
=A5=E7=94=A8 Power of Four =E7=9A=84=E6=96=B9=E6=B3=95=EF=BC=8C=E4=
=BD=86=E6=98=AF 2 =E7=9A=84 n =E6=AC=A1=E6=96=B9=E6=9B=B4=E7=89=B9=
=E6=AE=8A=EF=BC=8C=E5=AE=83=E7=9A=84=E4=BA=8C=E8=BF=9B=E5=88=B6=E8=
=A1=A8=E7=A4=BA=E5=8F=AA=E6=9C=89=E4=B8=80=E4=B8=AA 1 =E5=AD=98=E5=
=9C=A8=E3=80=82</p><div class=3D"highlight highlight-source-java"=
><pre><span class=3D"pl-k">public</span> <span class=3D"pl-k">boo=
lean</span> isPowerOfTwo(<span class=3D"pl-k">int</span> n) {=0A=20=
   <span class=3D"pl-k">return</span> n <span class=3D"pl-k">&gt;=
</span> <span class=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;=
&amp;</span> <span class=3D"pl-smi">Integer</span><span class=3D"=
pl-k">.</span>bitCount(n) <span class=3D"pl-k">=3D=3D</span> <spa=
n class=3D"pl-c1">1</span>;=0A}</pre></div><p>=E5=88=A9=E7=94=A8=20=
1000 &amp; 0111 =3D=3D 0 =E8=BF=99=E7=A7=8D=E6=80=A7=E8=B4=A8=EF=BC=
=8C=E5=BE=97=E5=88=B0=E4=BB=A5=E4=B8=8B=E8=A7=A3=E6=B3=95=EF=BC=9A=
</p><div class=3D"highlight highlight-source-java"><pre><span cla=
ss=3D"pl-k">public</span> <span class=3D"pl-k">boolean</span> isP=
owerOfTwo(<span class=3D"pl-k">int</span> n) {=0A    <span class=3D=
"pl-k">return</span> n <span class=3D"pl-k">&gt;</span> <span cla=
ss=3D"pl-c1">0</span> <span class=3D"pl-k">&amp;&amp;</span> (n <=
span class=3D"pl-k">&amp;</span> (n <span class=3D"pl-k">-</span>=
 <span class=3D"pl-c1">1</span>)) <span class=3D"pl-k">=3D=3D</sp=
an> <span class=3D"pl-c1">0</span>;=0A}</pre></div><p>=E6=95=B0=E7=
=BB=84=E4=B8=AD=E5=94=AF=E4=B8=80=E4=B8=80=E4=B8=AA=E4=B8=8D=E9=87=
=8D=E5=A4=8D=E7=9A=84=E5=85=83=E7=B4=A0</p><p><a href=3D"https://=
leetcode.com/problems/single-number/description/" target=3D"_blan=
k">Leetcode : 136. Single Number (Easy)</a></p><p>=E4=B8=A4=E4=B8=
=AA=E7=9B=B8=E5=90=8C=E7=9A=84=E6=95=B0=E5=BC=82=E6=88=96=E7=9A=84=
=E7=BB=93=E6=9E=9C=E4=B8=BA 0=EF=BC=8C=E5=AF=B9=E6=89=80=E6=9C=89=
=E6=95=B0=E8=BF=9B=E8=A1=8C=E5=BC=82=E6=88=96=E6=93=8D=E4=BD=9C=EF=
=BC=8C=E6=9C=80=E5=90=8E=E7=9A=84=E7=BB=93=E6=9E=9C=E5=B0=B1=E6=98=
=AF=E5=8D=95=E7=8B=AC=E5=87=BA=E7=8E=B0=E7=9A=84=E9=82=A3=E4=B8=AA=
=E6=95=B0=E3=80=82</p><p>=E7=B1=BB=E4=BC=BC=E7=9A=84=E6=9C=89=EF=BC=
=9A<a href=3D"https://leetcode.com/problems/find-the-difference/d=
escription/" target=3D"_blank">Leetcode : 389. Find the Differenc=
e (Easy)</a>=EF=BC=8C=E4=B8=A4=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=
=E4=BB=85=E6=9C=89=E4=B8=80=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=8D=E7=
=9B=B8=E5=90=8C=EF=BC=8C=E4=BD=BF=E7=94=A8=E5=BC=82=E6=88=96=E6=93=
=8D=E4=BD=9C=E5=8F=AF=E4=BB=A5=E4=BB=A5 O(1) =E7=9A=84=E7=A9=BA=E9=
=97=B4=E5=A4=8D=E6=9D=82=E5=BA=A6=E6=9D=A5=E6=B1=82=E8=A7=A3=EF=BC=
=8C=E8=80=8C=E4=B8=8D=E9=9C=80=E8=A6=81=E4=BD=BF=E7=94=A8 HashSet=
=E3=80=82</p><div class=3D"highlight highlight-source-java"><pre>=
<span class=3D"pl-k">public</span> <span class=3D"pl-k">int</span=
> singleNumber(<span class=3D"pl-k">int</span>[] nums) {=0A    <s=
pan class=3D"pl-k">int</span> ret <span class=3D"pl-k">=3D</span>=
 <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">for</=
span>(<span class=3D"pl-k">int</span> n <span class=3D"pl-k">:</s=
pan> nums) ret <span class=3D"pl-k">=3D</span> ret <span class=3D=
"pl-k">^</span> n;=0A    <span class=3D"pl-k">return</span> ret;=0A=
}</pre></div><p>=E6=95=B0=E7=BB=84=E4=B8=AD=E4=B8=8D=E9=87=8D=E5=A4=
=8D=E7=9A=84=E4=B8=A4=E4=B8=AA=E5=85=83=E7=B4=A0</p><p><a href=3D=
"https://leetcode.com/problems/single-number-iii/description/" ta=
rget=3D"_blank">Leetcode : 260. Single Number III (Medium)</a></p=
><p>=E4=B8=A4=E4=B8=AA=E4=B8=8D=E7=9B=B8=E7=AD=89=E7=9A=84=E5=85=83=
=E7=B4=A0=E5=9C=A8=E4=BD=8D=E7=BA=A7=E8=A1=A8=E7=A4=BA=E4=B8=8A=E5=
=BF=85=E5=AE=9A=E4=BC=9A=E6=9C=89=E4=B8=80=E4=BD=8D=E5=AD=98=E5=9C=
=A8=E4=B8=8D=E5=90=8C=E3=80=82</p><p>=E5=B0=86=E6=95=B0=E7=BB=84=E7=
=9A=84=E6=89=80=E6=9C=89=E5=85=83=E7=B4=A0=E5=BC=82=E6=88=96=E5=BE=
=97=E5=88=B0=E7=9A=84=E7=BB=93=E6=9E=9C=E4=B8=BA=E4=B8=8D=E5=AD=98=
=E5=9C=A8=E9=87=8D=E5=A4=8D=E7=9A=84=E4=B8=A4=E4=B8=AA=E5=85=83=E7=
=B4=A0=E5=BC=82=E6=88=96=E7=9A=84=E7=BB=93=E6=9E=9C=E3=80=82</p><=
p>diff &amp;=3D -diff =E5=BE=97=E5=88=B0=E5=87=BA diff<span class=
=3D"Apple-converted-space">&nbsp;</span><a href=3D"https://www.ba=
idu.com/s?wd=3D%E6%9C%80%E5%8F%B3&amp;tn=3D24004469_oem_dg&amp;rs=
v_dl=3Dgh_pl_sl_csd" target=3D"_blank">=E6=9C=80=E5=8F=B3</a>=E4=BE=
=A7=E4=B8=8D=E4=B8=BA 0 =E7=9A=84=E4=BD=8D=EF=BC=8C=E4=B9=9F=E5=B0=
=B1=E6=98=AF=E4=B8=8D=E5=AD=98=E5=9C=A8=E9=87=8D=E5=A4=8D=E7=9A=84=
=E4=B8=A4=E4=B8=AA=E5=85=83=E7=B4=A0=E5=9C=A8=E4=BD=8D=E7=BA=A7=E8=
=A1=A8=E7=A4=BA=E4=B8=8A=E6=9C=80=E5=8F=B3=E4=BE=A7=E4=B8=8D=E5=90=
=8C=E7=9A=84=E9=82=A3=E4=B8=80=E4=BD=8D=EF=BC=8C=E5=88=A9=E7=94=A8=
=E8=BF=99=E4=B8=80=E4=BD=8D=E5=B0=B1=E5=8F=AF=E4=BB=A5=E5=B0=86=E4=
=B8=A4=E4=B8=AA=E5=85=83=E7=B4=A0=E5=8C=BA=E5=88=86=E5=BC=80=E6=9D=
=A5=E3=80=82</p><div class=3D"highlight highlight-source-java"><p=
re><span class=3D"pl-k">public</span> <span class=3D"pl-k">int</s=
pan>[] singleNumber(<span class=3D"pl-k">int</span>[] nums) {=0A=20=
   <span class=3D"pl-k">int</span> diff <span class=3D"pl-k">=3D<=
/span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k"=
>for</span>(<span class=3D"pl-k">int</span> num <span class=3D"pl=
-k">:</span> nums) diff <span class=3D"pl-k">^</span><span class=3D=
"pl-k">=3D</span> num;=0A    <span class=3D"pl-c"><span class=3D"=
pl-c">//</span> =E5=BE=97=E5=88=B0=E6=9C=80=E5=8F=B3=E4=B8=80=E4=BD=
=8D</span>=0A    diff <span class=3D"pl-k">&amp;=3D</span> <span=20=
class=3D"pl-k">-</span>diff;=0A    <span class=3D"pl-k">int</span=
>[] ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-k">new<=
/span> <span class=3D"pl-smi">int</span>[<span class=3D"pl-c1">2<=
/span>];=0A    <span class=3D"pl-k">for</span>(<span class=3D"pl-=
k">int</span> num <span class=3D"pl-k">:</span> nums) {=0A      =20=
 <span class=3D"pl-k">if</span>((num <span class=3D"pl-k">&amp;</=
span> diff) <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-=
c1">0</span>) ret[<span class=3D"pl-c1">0</span>] <span class=3D"=
pl-k">^</span><span class=3D"pl-k">=3D</span> num;=0A        <spa=
n class=3D"pl-k">else</span> ret[<span class=3D"pl-c1">1</span>]=20=
<span class=3D"pl-k">^</span><span class=3D"pl-k">=3D</span> num;=
=0A    }=0A    <span class=3D"pl-k">return</span> ret;=0A}</pre><=
/div><p>=E5=88=A4=E6=96=AD=E4=B8=80=E4=B8=AA=E6=95=B0=E7=9A=84=E4=
=BD=8D=E7=BA=A7=E8=A1=A8=E7=A4=BA=E6=98=AF=E5=90=A6=E4=B8=8D=E4=BC=
=9A=E5=87=BA=E7=8E=B0=E8=BF=9E=E7=BB=AD=E7=9A=84 0 =E5=92=8C 1</p=
><p><a href=3D"https://leetcode.com/problems/binary-number-with-a=
lternating-bits/description/" target=3D"_blank">Leetcode : 693. B=
inary Number with Alternating Bits (Easy)</a></p><p>=E5=AF=B9=E4=BA=
=8E 10101 =E8=BF=99=E7=A7=8D=E4=BD=8D=E7=BA=A7=E8=A1=A8=E7=A4=BA=E7=
=9A=84=E6=95=B0=EF=BC=8C=E6=8A=8A=E5=AE=83=E5=90=91=E5=8F=B3=E7=A7=
=BB=E5=8A=A8 1 =E4=BD=8D=E5=BE=97=E5=88=B0 1010 =EF=BC=8C=E8=BF=99=
=E4=B8=A4=E4=B8=AA=E6=95=B0=E6=AF=8F=E4=B8=AA=E4=BD=8D=E9=83=BD=E4=
=B8=8D=E5=90=8C=EF=BC=8C=E5=9B=A0=E6=AD=A4=E5=BC=82=E6=88=96=E5=BE=
=97=E5=88=B0=E7=9A=84=E7=BB=93=E6=9E=9C=E4=B8=BA 11111=E3=80=82</=
p><div class=3D"highlight highlight-source-java"><pre><span class=
=3D"pl-k">public</span> <span class=3D"pl-k">boolean</span> hasAl=
ternatingBits(<span class=3D"pl-k">int</span> n) {=0A    <span cl=
ass=3D"pl-k">int</span> a <span class=3D"pl-k">=3D</span> (n <spa=
n class=3D"pl-k">^</span> (n <span class=3D"pl-k">&gt;&gt;</span>=
 <span class=3D"pl-c1">1</span>));=0A    <span class=3D"pl-k">ret=
urn</span> (a <span class=3D"pl-k">&amp;</span> (a <span class=3D=
"pl-k">+</span> <span class=3D"pl-c1">1</span>)) <span class=3D"p=
l-k">=3D=3D</span> <span class=3D"pl-c1">0</span>;=0A}</pre></div=
><p>=E6=B1=82=E4=B8=80=E4=B8=AA=E6=95=B0=E7=9A=84=E8=A1=A5=E7=A0=81=
</p><p><a href=3D"https://leetcode.com/problems/number-complement=
/description/" target=3D"_blank">Leetcode : 476. Number Complemen=
t (Easy)</a></p><p>=E4=B8=8D=E8=80=83=E8=99=91=E4=BA=8C=E8=BF=9B=E5=
=88=B6=E8=A1=A8=E7=A4=BA=E4=B8=AD=E7=9A=84=E9=A6=96 0 =E9=83=A8=E5=
=88=86</p><p>=E5=AF=B9=E4=BA=8E 00000101=EF=BC=8C=E8=A6=81=E6=B1=82=
=E8=A1=A5=E7=A0=81=E5=8F=AF=E4=BB=A5=E5=B0=86=E5=AE=83=E4=B8=8E 0=
0000111 =E8=BF=9B=E8=A1=8C=E5=BC=82=E6=88=96=E6=93=8D=E4=BD=9C=E3=
=80=82=E9=82=A3=E4=B9=88=E9=97=AE=E9=A2=98=E5=B0=B1=E8=BD=AC=E6=8D=
=A2=E4=B8=BA=E6=B1=82=E6=8E=A9=E7=A0=81 00000111=E3=80=82</p><div=
 class=3D"highlight highlight-source-java"><pre><span class=3D"pl=
-k">public</span> <span class=3D"pl-k">int</span> findComplement(=
<span class=3D"pl-k">int</span> num) {=0A    <span class=3D"pl-k"=
>if</span>(num <span class=3D"pl-k">=3D=3D</span> <span class=3D"=
pl-c1">0</span>) <span class=3D"pl-k">return</span> <span class=3D=
"pl-c1">1</span>;=0A    <span class=3D"pl-k">int</span> mask <spa=
n class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span> <span=20=
class=3D"pl-k">&lt;&lt;</span> <span class=3D"pl-c1">30</span>;=0A=
    <span class=3D"pl-k">while</span>((num <span class=3D"pl-k">&=
amp;</span> mask) <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">0</span>) mask <span class=3D"pl-k">&gt;&gt;</span><span=20=
class=3D"pl-k">=3D</span> <span class=3D"pl-c1">1</span>;=0A    m=
ask <span class=3D"pl-k">=3D</span> (mask <span class=3D"pl-k">&l=
t;&lt;</span> <span class=3D"pl-c1">1</span>) <span class=3D"pl-k=
">-</span> <span class=3D"pl-c1">1</span>;=0A    <span class=3D"p=
l-k">return</span> num <span class=3D"pl-k">^</span> mask;=0A}</p=
re></div><p>=E5=8F=AF=E4=BB=A5=E5=88=A9=E7=94=A8 Java =E7=9A=84 I=
nteger.highestOneBit() =E6=96=B9=E6=B3=95=E6=9D=A5=E8=8E=B7=E5=BE=
=97=E5=90=AB=E6=9C=89=E9=A6=96 1 =E7=9A=84=E6=95=B0=E3=80=82</p><=
div class=3D"highlight highlight-source-java"><pre><span class=3D=
"pl-k">public</span> <span class=3D"pl-k">int</span> findCompleme=
nt(<span class=3D"pl-k">int</span> num) {=0A    <span class=3D"pl=
-k">if</span>(num <span class=3D"pl-k">=3D=3D</span> <span class=3D=
"pl-c1">0</span>) <span class=3D"pl-k">return</span> <span class=3D=
"pl-c1">1</span>;=0A    <span class=3D"pl-k">int</span> mask <spa=
n class=3D"pl-k">=3D</span> <span class=3D"pl-smi">Integer</span>=
<span class=3D"pl-k">.</span>highestOneBit(num);=0A    mask <span=
 class=3D"pl-k">=3D</span> (mask <span class=3D"pl-k">&lt;&lt;</s=
pan> <span class=3D"pl-c1">1</span>) <span class=3D"pl-k">-</span=
> <span class=3D"pl-c1">1</span>;=0A    <span class=3D"pl-k">retu=
rn</span> num <span class=3D"pl-k">^</span> mask;=0A}</pre></div>=
<p>=E5=AF=B9=E4=BA=8E 10000000 =E8=BF=99=E6=A0=B7=E7=9A=84=E6=95=B0=
=E8=A6=81=E6=89=A9=E5=B1=95=E6=88=90 11111111=EF=BC=8C=E5=8F=AF=E4=
=BB=A5=E5=88=A9=E7=94=A8=E4=BB=A5=E4=B8=8B=E6=96=B9=E6=B3=95=EF=BC=
=9A</p><div class=3D"highlight highlight-text-html-basic"><pre>ma=
sk |=3D mask &gt;&gt; 1    11000000=0Amask |=3D mask &gt;&gt; 2 =20=
  11110000=0Amask |=3D mask &gt;&gt; 4    11111111</pre></div><di=
v class=3D"highlight highlight-source-java"><pre><span class=3D"p=
l-k">public</span> <span class=3D"pl-k">int</span> findComplement=
(<span class=3D"pl-k">int</span> num) {=0A    <span class=3D"pl-k=
">int</span> mask <span class=3D"pl-k">=3D</span> num;=0A    mask=
 <span class=3D"pl-k">|=3D</span> mask <span class=3D"pl-k">&gt;&=
gt;</span> <span class=3D"pl-c1">1</span>;=0A    mask <span class=
=3D"pl-k">|=3D</span> mask <span class=3D"pl-k">&gt;&gt;</span> <=
span class=3D"pl-c1">2</span>;=0A    mask <span class=3D"pl-k">|=3D=
</span> mask <span class=3D"pl-k">&gt;&gt;</span> <span class=3D"=
pl-c1">4</span>;=0A    mask <span class=3D"pl-k">|=3D</span> mask=
 <span class=3D"pl-k">&gt;&gt;</span> <span class=3D"pl-c1">8</sp=
an>;=0A    mask <span class=3D"pl-k">|=3D</span> mask <span class=
=3D"pl-k">&gt;&gt;</span> <span class=3D"pl-c1">16</span>;=0A   =20=
<span class=3D"pl-k">return</span> (mask <span class=3D"pl-k">^</=
span> num);=0A}</pre></div><p>=E5=AE=9E=E7=8E=B0=E6=95=B4=E6=95=B0=
=E7=9A=84=E5=8A=A0=E6=B3=95</p><p><a href=3D"https://leetcode.com=
/problems/sum-of-two-integers/description/" target=3D"_blank">Lee=
tcode : 371. Sum of Two Integers (Easy)</a></p><p>a ^ b =E8=A1=A8=
=E7=A4=BA=E6=B2=A1=E6=9C=89=E8=80=83=E8=99=91=E8=BF=9B=E4=BD=8D=E7=
=9A=84=E6=83=85=E5=86=B5=E4=B8=8B=E4=B8=A4=E6=95=B0=E7=9A=84=E5=92=
=8C=EF=BC=8C(a &amp; b) &lt;&lt; 1 =E5=B0=B1=E6=98=AF=E8=BF=9B=E4=
=BD=8D=E3=80=82=E9=80=92=E5=BD=92=E4=BC=9A=E7=BB=88=E6=AD=A2=E7=9A=
=84=E5=8E=9F=E5=9B=A0=E6=98=AF (a &amp; b) &lt;&lt; 1 =E6=9C=80=E5=
=8F=B3=E8=BE=B9=E4=BC=9A=E5=A4=9A=E4=B8=80=E4=B8=AA 0=EF=BC=8C=E9=
=82=A3=E4=B9=88=E7=BB=A7=E7=BB=AD=E9=80=92=E5=BD=92=EF=BC=8C=E8=BF=
=9B=E4=BD=8D=E6=9C=80=E5=8F=B3=E8=BE=B9=E7=9A=84 0 =E4=BC=9A=E6=85=
=A2=E6=85=A2=E5=A2=9E=E5=A4=9A=EF=BC=8C=E6=9C=80=E5=90=8E=E8=BF=9B=
=E4=BD=8D=E4=BC=9A=E5=8F=98=E4=B8=BA 0=EF=BC=8C=E9=80=92=E5=BD=92=
=E7=BB=88=E6=AD=A2=E3=80=82</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">public</span> <span class=3D=
"pl-k">int</span> getSum(<span class=3D"pl-k">int</span> a, <span=
 class=3D"pl-k">int</span> b) {=0A    <span class=3D"pl-k">return=
</span> b <span class=3D"pl-k">=3D=3D</span> <span class=3D"pl-c1=
">0</span> <span class=3D"pl-k">?</span> a <span class=3D"pl-k">:=
</span> getSum((a <span class=3D"pl-k">^</span> b), (a <span clas=
s=3D"pl-k">&amp;</span> b) <span class=3D"pl-k">&lt;&lt;</span> <=
span class=3D"pl-c1">1</span>);=0A}</pre></div><p>=E5=AD=97=E7=AC=
=A6=E4=B8=B2=E6=95=B0=E7=BB=84=E6=9C=80=E5=A4=A7=E4=B9=98=E7=A7=AF=
</p><p><a href=3D"https://leetcode.com/problems/maximum-product-o=
f-word-lengths/description/" target=3D"_blank">Leetcode : 318. Ma=
ximum Product of Word Lengths (Medium)</a></p><p>=E9=A2=98=E7=9B=AE=
=E6=8F=8F=E8=BF=B0=EF=BC=9A=E5=AD=97=E7=AC=A6=E4=B8=B2=E6=95=B0=E7=
=BB=84=E7=9A=84=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=8F=AA=E5=90=AB=E6=9C=
=89=E5=B0=8F=E5=86=99=E5=AD=97=E7=AC=A6=E3=80=82=E6=B1=82=E8=A7=A3=
=E5=AD=97=E7=AC=A6=E4=B8=B2=E6=95=B0=E7=BB=84=E4=B8=AD=E4=B8=A4=E4=
=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E9=95=BF=E5=BA=A6=E7=9A=84=E6=9C=
=80=E5=A4=A7=E4=B9=98=E7=A7=AF=EF=BC=8C=E8=A6=81=E6=B1=82=E8=BF=99=
=E4=B8=A4=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E4=B8=8D=E8=83=BD=E5=
=90=AB=E6=9C=89=E7=9B=B8=E5=90=8C=E5=AD=97=E7=AC=A6=E3=80=82</p><=
p>=E8=A7=A3=E9=A2=98=E6=80=9D=E8=B7=AF=EF=BC=9A=E6=9C=AC=E9=A2=98=
=E4=B8=BB=E8=A6=81=E9=97=AE=E9=A2=98=E6=98=AF=E5=88=A4=E6=96=AD=E4=
=B8=A4=E4=B8=AA=E5=AD=97=E7=AC=A6=E4=B8=B2=E6=98=AF=E5=90=A6=E5=90=
=AB=E7=9B=B8=E5=90=8C=E5=AD=97=E7=AC=A6=EF=BC=8C=E7=94=B1=E4=BA=8E=
=E5=AD=97=E7=AC=A6=E4=B8=B2=E5=8F=AA=E5=90=AB=E6=9C=89=E5=B0=8F=E5=
=86=99=E5=AD=97=E7=AC=A6=EF=BC=8C=E6=80=BB=E5=85=B1 26 =E4=BD=8D=EF=
=BC=8C=E5=9B=A0=E6=AD=A4=E5=8F=AF=E4=BB=A5=E7=94=A8=E4=B8=80=E4=B8=
=AA 32 =E4=BD=8D=E7=9A=84=E6=95=B4=E6=95=B0=E6=9D=A5=E5=AD=98=E5=82=
=A8=E6=AF=8F=E4=B8=AA=E5=AD=97=E7=AC=A6=E6=98=AF=E5=90=A6=E5=87=BA=
=E7=8E=B0=E8=BF=87=E3=80=82</p><div class=3D"highlight highlight-=
source-java"><pre><span class=3D"pl-k">public</span> <span class=3D=
"pl-k">int</span> maxProduct(<span class=3D"pl-k">String</span>[]=
 words) {=0A    <span class=3D"pl-k">int</span> n <span class=3D"=
pl-k">=3D</span> words<span class=3D"pl-k">.</span>length;=0A   =20=
<span class=3D"pl-k">if</span> (n <span class=3D"pl-k">=3D=3D</sp=
an> <span class=3D"pl-c1">0</span>) <span class=3D"pl-k">return</=
span> <span class=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">=
int</span>[] val <span class=3D"pl-k">=3D</span> <span class=3D"p=
l-k">new</span> <span class=3D"pl-smi">int</span>[n];=0A    <span=
 class=3D"pl-k">for</span> (<span class=3D"pl-k">int</span> i <sp=
an class=3D"pl-k">=3D</span> <span class=3D"pl-c1">0</span>; i <s=
pan class=3D"pl-k">&lt;</span> n; i<span class=3D"pl-k">++</span>=
) {=0A        <span class=3D"pl-k">for</span> (<span class=3D"pl-=
k">char</span> c <span class=3D"pl-k">:</span> words[i]<span clas=
s=3D"pl-k">.</span>toCharArray()) {=0A            val[i] <span cl=
ass=3D"pl-k">|=3D</span> <span class=3D"pl-c1">1</span> <span cla=
ss=3D"pl-k">&lt;&lt;</span> (c <span class=3D"pl-k">-</span> <spa=
n class=3D"pl-s"><span class=3D"pl-pds">'</span>a<span class=3D"p=
l-pds">'</span></span>);=0A        }=0A    }=0A    <span class=3D=
"pl-k">int</span> ret <span class=3D"pl-k">=3D</span> <span class=
=3D"pl-c1">0</span>;=0A    <span class=3D"pl-k">for</span> (<span=
 class=3D"pl-k">int</span> i <span class=3D"pl-k">=3D</span> <spa=
n class=3D"pl-c1">0</span>; i <span class=3D"pl-k">&lt;</span> n;=
 i<span class=3D"pl-k">++</span>) {=0A        <span class=3D"pl-k=
">for</span> (<span class=3D"pl-k">int</span> j <span class=3D"pl=
-k">=3D</span> i <span class=3D"pl-k">+</span> <span class=3D"pl-=
c1">1</span>; j <span class=3D"pl-k">&lt;</span> n; j<span class=3D=
"pl-k">++</span>) {=0A            <span class=3D"pl-k">if</span>=20=
((val[i] <span class=3D"pl-k">&amp;</span> val[j]) <span class=3D=
"pl-k">=3D=3D</span> <span class=3D"pl-c1">0</span>) {=0A       =20=
        ret <span class=3D"pl-k">=3D</span> <span class=3D"pl-smi=
">Math</span><span class=3D"pl-k">.</span>max(ret, words[i]<span=20=
class=3D"pl-k">.</span>length() <span class=3D"pl-k">*</span> wor=
ds[j]<span class=3D"pl-k">.</span>length());=0A            }=0A =20=
      }=0A    }=0A    <span class=3D"pl-k">return</span> ret;=0A}=
 </pre></div><h1>=E5=8F=82=E8=80=83=E8=B5=84=E6=96=99</h1><ul><li=
>=E6=95=B0=E6=8D=AE=E7=BB=93=E6=9E=84=E4=B8=8E=E7=AE=97=E6=B3=95=E5=
=88=86=E6=9E=90</li><li>=E7=AE=97=E6=B3=95</li><li>=E5=89=91=E6=8C=
=87 Offer</li><li>=E7=BC=96=E7=A8=8B=E4=B9=8B=E7=BE=8E</li><li>=E7=
=A8=8B=E5=BA=8F=E5=91=98=E4=BB=A3=E7=A0=81=E9=9D=A2=E8=AF=95=E6=8C=
=87=E5=8D=97</li></ul></div><div><article class=3D"baidu_pl"><br>=
</article><div>=E6=9D=A5=E6=BA=90=EF=BC=9A&nbsp;<a href=3D"https:=
//blog.csdn.net/fancefu/article/details/79357120">https://blog.cs=
dn.net/fancefu/article/details/79357120</a></div><br></div></body=
></html>=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A=0A

------=_Next_Part_0000482937.676--

------=_Next_Part_0001448811.402
Content-Type: image/png;
	name="0.4896489623149012.png"
Content-Transfer-Encoding: base64
Content-ID: <0.4896489623149012.png>
Content-Location: 0.4896489623149012.png

iVBORw0KGgoAAAANSUhEUgAAANIAAAASCAYAAAAucYD2AAAESklEQVRoQ+Wb4Y3qMAyAywaIERATIEaomAAxAmICxAioEyBGQEyAGAExAWIExAY9fRWu0r60JE1LSl6l+3E9J9iOv9hxuEFU89zv93S73Ua73S6aTCaDOln5WxzH6XA4jJbLJT/aMfv9Pr1cLtmQ0+lkNK/JZ7vIdGWri06uY/vi5xB9y9qo/q0M4uv1mkF0vV6j1+tlHOyLxSLVwXE8HtPValWYq0rWNYBsx3/DVludbOSfz2fKxrXZbKL5fP7PWvn086/7Flher1f0eDyyH52P8W8tIAT/8Xi0yhpVi8ZiP5/PQmbzucDlQO3aVhswTGXZ6Q+HQzQej6P1eh2dz+fegYQtv+hbyThsUKPRKOMEf08mE+wpVFsfQVqtVul0OmWRnDOSLjj6BFLXtprC4SCXtgkSOzGA6jKcrY6/6tvxeJwlktlslsc/MXu73chOhXe1gDARi2N6PsLBNnDYyNounq1817ba6tNAvrcg/apvh8NhSn9ATSSbzSZNkoTlqQZpt9ulSLAT8ahnGtIzNeIblkiaBdB5OBwKk6pnpPP5nI0ry9lC1yCwaod829a29dfM1xuQAvRt7u6PGYlu22KxyOljAKMFCkCK45h6kW5FLkfaBrztdpvBpGYZzkWkRoiGbuArp0kfXTsftv4vIAXq22z5iGfiv/KMRD3MofV2uxUyC+AAAZ0XYCGz8E7t4pHqeC9AqCCRjaix5ZCmpkObjASsNCpMHvRMkqSyZPVlq4nujjLeM1LAvs2Whk2C+JekIeuVNxt0tSDvaH2r5yNSNu/ULMLkBK+Ud7pzD7DRQlRLQBuQHAOsMNyXraoS0hI2sUu3cBXjGoOk26ikjJcyXz6zbqPqg2/Rswv/SrlahkjiOM8W9/s9hwZFyplHiFTLv7dzU7XU04GkK+t8gCSZ0YetJtA4yjQGSfe5tl27kH0r/QEdRDlIQDObzfg9L4egj/PM5XIZSHkm0FBiSV+dD+DSttwKVDOWKlOay7jD11Zp59NWR0hMhnsFKVTfSrNM7dzBhwpVobQjlQMIOwuXUGQkzhrsTHJOAjh1N59Op9nZqq6BQFlHFDCXToFvNxvIjj5sNSHBUcYrSOgemm/ZHIhvqjB5OKKQZMqd6iwLQd27o5bJcwlLpgEcWuAAJt8rAjAegpG/le+YyqWdKMOc6i2xj9LOp62OkGiH00XinoOrBdYPH7M++Nm1O2pb2oXmW9kYAKf8AJaaAD5+s0GdAGHp4tUFhc0lq41sF4FYNWcXtn5Tf83Ca7//WKdTE5BMbAzNt/kZycR4obN8D6QbawOHjaypnm3IVTVH2gjQNvSznaOJn993JsZfDTPVKTTfWoFUdQ8UIkhd2WoaaF3INQGpCz1C9K0xSJyfOC9Rh3MmoiaXrl1oIHVpaxeBaTpnH0AK1bfGIJkulsj96j/22dqJvImtTeZta0xf/rGviT199y02qf79Ay2gRxP9Oy6rAAAAAElFTkSuQmCC

------=_Next_Part_0001448811.402
Content-Type: image/png;
	name="0.5665683119959621.png"
Content-Transfer-Encoding: base64
Content-ID: <0.5665683119959621.png>
Content-Location: 0.5665683119959621.png

iVBORw0KGgoAAAANSUhEUgAAANIAAAASCAYAAAAucYD2AAAEb0lEQVRoQ92bjYnCMBSAexuII4gTiCOIE8iNIDeBOII4weEI4gTiCOIE4gjiBj2+0FfSXlpfGmtqhYPDe0nzfr68l5feV1LzuV6v6Xq9TjabTTIej7/qZOVvs9ksHQwGyff3Nz/OMb+/v+npdDJDDoeDal7Ns0Nk2tI1ZE2hY7ti5z7aFt/Y9q0M4vP5bCA6n8/J4/FQB/tisUhdcOz3+3S5XBbmqpINDSDf8e/Q1XdNPvL3+z1l41qtVsl8Pv/nq5h2/nTbAgu+eDwehoXZbJb8/PwUbIx9awEh+Pf7vVfWqHIazr7f74XMFtPB5UBtW1cfMLSy7PS73S4ZjUY4Nzkej50DCV0+0base7VapZltDSfE8HA4JBMVYHoK0nK5TCeTyT8C6xztA4ePrDa4msq1rWvTdXmMS18JEjsxQeTKcB5rMqKfalvWfbvdktPplCecwWCQkpXsquspSKPRyDhHez7CaD5w+Mj6Os9Xvm1dfdfTQL6zIPXAtsYd6oy02WxMPchOlO0k+ZmG9AydGSxQan6/XC7JbrfLiS3DcTwezbiynC90DQKrdsi7dX31+h3zdQakHtrWmJtSjzi2M5TEcQ4A3bbFYpGXcQCBkKQwQCKllWtE0h/grddrM5cNEgRzxuJwRkoEvul0WgndG4LNPCKGrm/QrRMg9dG2xD6xyxmfM+lwOHQ3G6iHEbhcLoUglw4FnRdgIbPwnd3Fg1K+F+BskMhG1NgcisfjMbH0bwGa9jewooTmwzq3221lEyWWrpq1B8pEB6nHtjWugQPi35UQTMCRLbgrstt6fEe7zz4fkbL5zg5+diCCV8o717kH2Ggf2iVgrNIulq42JNIS1oCD4yTbP5FvDJJro5IyXsp8eXbdRtUF20rAc3Wj+XjY10xHfAOSnUxMs0GyxfV6zaER8sr3R+W0nS00tduBLpBcZV0MkGLqqnFqoExjkFzP9e3a9dG2xDJA2scRksJ2u01sXgxIQDOdTgtlF5kH6jhUSXkm0FBiSY1I7ciDbrdb5bnHlinNpe7wvaq0i6lrICSa4VFB6pttZWPgjG+/oZMligIvefubjEEqBxAm4JaclMdZg52Jkk8MZZM4mUzM2aqugQDBPJW5ANQuU2K0v2PpqiEhUCYqSHJEiBFHgXarHE7skigkcdA8yxprhXI7B4lMkR2gzKRcwmYpjcs0M5G8VwRgfDAYfyvfMZXhAEBgY04AtTseMUCKpWsbzsaxnG2zlqyxMf7BzqHdUd/SDv36ZFvxF5t/VoWZV4Rc75A+vZC1nY+w6z2jcoD4wOEj20YgVs3Zhq7vXH+IT2RsE5A0OvbNtnLWV7+MWtUwCHFaV0FqQ1dNkLUl08TO2S2+Oj60a++bbb1AqroHchnPx2k+slpHhcq1pWvoukLGd8XOfbStGiTqXs5L1OGciajJyze75RJQc8kqC9DKhgSSdmybumrX0IZcF0Dqq23VIPk69lP/sc9XT+Q1ujaZ91VjuvKPfU306bpt0cm27x+TDVETHf3drgAAAABJRU5ErkJggg==

------=_Next_Part_0001448811.402
Content-Type: image/png;
	name="0.8593750573836176.png"
Content-Transfer-Encoding: base64
Content-ID: <0.8593750573836176.png>
Content-Location: 0.8593750573836176.png

iVBORw0KGgoAAAANSUhEUgAAAUgAAAATCAYAAADyKpSzAAAHmUlEQVR4Xu2cj43qMAzGexsgRkBMgBgBMQFiBPQmODECYgLECIgJECOgmwAxAmIDnn49jHy5NLWh5d9R6Un3Spo4n+0vtpP2I3tfD4HAfr8/LhaL7N+/fx8PIdBbiKdBYDabHYfDYdZsNt+2U7HWkoBut9vjeDzOJpNJ1m63TeD3er1jo9HIUNhwOIw+g0LX63U+leVyaeq34nk/XHej0eg4n89LsahLJ/cGpEqb+GsYsbjipxb7ubee7z2+l58KHXKz2eSgbzab7HA4lDquTHwwGBxjpLdYLI6j0ehHX0Vt7w3ircefTCbHXq+XdbvdJM630Emdc4cED4dDttvt8n+fn59Zv9//MedrbeIVMEIH4ITvYRdhVhHDaLVaHb++vrLxeGz21Tp1/ah9e/kpCSakRtrnifKKBGCV2+/3PyLRa53hUZXglavT6WDcJsOuWyde2a3twzSQKK/dbmfYl840qrCJZ8Xo8/Pz2Gq1zoSIzzSbzWw2m/0gySKMPHZk1durtfPyU9IpSfs6nY6rLuYxcE/bV1OUzAfi4G9r7bFundSFc6vVyhdbHSWjf6Ke3W53tsMqbOJZMUJuIuv1en3Go9Fo5NmFDlKKMCITgWCLSltFusUGeS6M5uuyhXv267Ev2iYJEqNerVbm+iMT9wrgiU7vCWxdY1MTIUKw1njr1kld88TRqWXrhYCIaTqdMmSlBPmsGIXYeyNIygtg7PWpN0HGrf4XQbIC0ZTVhEvXDElbWN1OJMgql/9NBKCLwyFBUhvhubCdl0yrclypg8n8iGq4mA/z7Xa7edon96jDxmqDIVYYpk6TwYuSAnMnAqCmxP8ZR296QRypGu+tdVIVzpZ+qoogXxUjFhD8RkeUZX5TZk8xvVxCkJoP8JvQj3Q0WsQBYSmkKt8U35O54n8SgHj56bxyE8kMBoPzCk9HDCCrEYMyUFgTIS2AUKU4rAXQR1dQHOQQplje1c7ieEVtkIfCN/JS/9K1HeYHGbJxIFEOClsul78MtAwrDOI0xge1Nkh3Pp/nqU+IQ8qgy8apQyfX4Ot5VqKja2uQr4gResVXWFCxm/D4TkmWht+a6tmiLy9BlvmRDhZSHMA88A24o6xPq2/ie2A3nU5zDFhk4KxL+SnvBIBQhI6AEF520AjdcXgVDZ0VgADcF6LTykNYVhIpyIeKs6bjkDDGYrmQU8AJ24s8Qoa69gUGpHv6Xjg3C1a0oX+pAzEmR55iUSK49Pv9H2Nqo72HTiwYV9EGYsO+wl1Xq01YdFGX3VYxf0sfyA9GnsCC8gJBgOdMpJcgU35ENI+8EvWmOEAHC1X4phAi2ZpktaeFOFrCsfBT/mCsPsQ9gNa1MSbPPR31YeiQkggUM3CIRgstxuFxBotBWdtAuJzV1ESKLCG5htGJByuRJUay8luKIO+lE42hHJmx4Boju6LnJCWOHUnx2MQjYMQc68KJvsEDwtELbAqjMoKMBRtSOpPSmugtFWzQpsiPJCrU+g/9oChousY3RReMz4VNEs2WZa0pfjpHd9vt9kyGsnKFUU+MMLIsyzcZJC2NKS+WXovyb5lii8KQh9RO10nCe5ICalxEqRasZCyOXlCjie1SMwZGGOLsGadqnVjI8Jo2UrsqOq9nJchXxIi5hzVv2cjSNpfC6FY1SAkWQj+CD7SsimzzDSTJrIrKV5f6ZmiTUt+0LC4pfvqADE+Mew5DdZgsYehJgDzVlfA9lqqGytNtgr7MO95VpdjMIbZyxe7psoPI7cSKGlJe/9AGE2IQM2jnOJXq5BryK3tWivV6scDWNFlaCfLVMCo5Fwq0pp3+WxFkzGdSvg5xau7QGVsq1bX65ilizIMRfcwpxMPLT+cUmzAb4kMgamaEp6SgEAUGLQapnZ3oiDpZKoRlBUR4+rrUGcocz/N7rN4aW8305pOWG8BTWJ3OoeVR4Qm7s3GDIam9LlsUHfMpG6cunXiw9LRl7tgKG4FyUXZhhU+dgpDXBmObFa+GEb5CBCkBiGQY3LMsIrc85hPzI50eh76uCVJvXHLOGn8im7vWN/ElIlrBT2wuZV9l/JQTpOz8SO6O0KdQPz/6woDyrizEycWk+C08vxcytAhJn+EL9dZoweOIZW3DtxVoH7uH3CewzxhYsAIXnBmcZGOLui3YQo7hYdyig+L30kkZfpf+flrJfz0OYaYOQUu5JzxDadFFXXZ7KQaW5yCWU6SVv2oY+6bBIxwU9/gM85YjPPgAWRUXi6N+EaUK35R6qmBd9ppmGT+ZjwPoXe2Uoj2k52lrMa5nbEOUgBOEZ90sc6lDJ5Zx62xTZBP6ZIBn/L+E0aWvGnp3sT34P1pbD+fQ1kyQRYXMEACvAPfYpHk0pbFyQpJlH6sI5a5DJ/fGpmqC/CsYxeq7Vl2GR2Gszz1jOy8/mQiyaEs+BpBXgDdBfqNo/dyZYF6XTu5t9DH7Ie2UUo9Hvr+C0ftzZ3ar8PJTKUGyMlGP5JUnjJRaUOoQqleAN0F+K9fzwdw6dWI3tXpaxuznkvT6L2H0/mCu3Ra9/FRKkPahv1t6P0j5Jkgvwv72Fp34e632iSo/mHuJZG+MLkHt+Z6x6Fnb4n8zCyJf2eATRgAAAABJRU5ErkJggg==

------=_Next_Part_0001448811.402
Content-Type: image/png;
	name="0.8065396812545818.png"
Content-Transfer-Encoding: base64
Content-ID: <0.8065396812545818.png>
Content-Location: 0.8065396812545818.png

iVBORw0KGgoAAAANSUhEUgAAAVsAAAATCAYAAAA+s65YAAAGQklEQVR4Xu2c/W3yMBDG/W6AGAExAWIExASIEVAnQIyAmAAxAmIC1BFQJ0CMgNggr34Rbk3qb5wEUiP1H3q2z3fPPbk7O/wTf/hzvV6L/X4vPj4+/r2qGbbbbTGfz0W/339ZHV/Vdq+mV8bbq3mkWX2sAXw+n4vVaiXW67UYDodewT6ZTIperycgiPl8rh0DgXx+fpY7PRwOXvPWYZbFYlHsdrvW1vfZEwGKD5rWsy7f++y5Tpk2sZfxZvbsX8CbkWhOp1MZ5KfTSdxuN29Cms1mhY5A9/t9sVgsHuYyydYZbHLu9XpdTCYTMR6Pf+1Np2udOkGoPJyWy6WYTqe/9Dkej8XX15dYrVbefnhG3yZ8/4x+rrEQ6u12E5fLpfzT2bVp7GW8mb327nhjZ64YBm/W4IV0KLNDsk8TiFHmer0+ZMhNA15192g0gsC0+9fp6grwmP/zNN/tdmIwGNDKEMfjUUu2zG3TN2Zt15i6fe9aP/b/1bYLNh4OhwIcq5VW09jLeLN79F3x5hvDTrKl7BmNRkE9zRAQh8jGBp9uHAHJ9y/Wqy1sZEtmBCmbWjMp7cNcdfs+tb5yvsFgUCYIasUCzqgMLpfL98M1BnvgBh/oqg/bfjLe3N5+V7xVdmaMYSfZAlwIwLdfy8IhIA6RdbvLX4K+8na7DdqX/+zRklaypdSid+5bZSyXy2Kz2US3Her2fbSVHAN7vV5pJ/VBercFI1sh24w3t7ffFW/RZEv2xGCe3vfs5rvHSppP/+tOqEIecJExqIc3VQKl38i4qlwoMbvd5S9BQOr60DZd/WePlrSSLbOa9NatCHjVTM6lVdO+d+mT8v9tZ7YZb7+92VG8+WW2PH1ns9l3RgBAMZHMpCBbDpT6/b4gK5SZA+k/5CwPb1SyVa+6ADgIulre+WZqKYNPB36XrinXN8zlJFshBD4xZqvYHl+Q0Uo/UMIeDgcejsZxbfi+AXuWS+BXMJuiZxvbRsh4e/R2h/HmJltAxEGNemBEsEKukColLEFMhsp3alZIicb3kjRVsiVTpL8lDymqROHbRoDQOVzz+UiyMcmiy3Q6fejfIevS1WftJ2WcZEu2yu0Q251bMgZk5Gc8HtN/NY5py/dP2sp7OIENZqs3OXyxpy4UQ7YZb4+u6jje3GSr63PxHUGr9mtlIKvZKGCG4GQrQQdiCJmrONW7ojGA944yg6AJ/FLcpKs6nbyq4qOLLtBjM1sfsmVu/MTDk0qF63s2cm7L91Ub1GFTWarqrsy5sKd7wMs2mmyzyT3YHvAZb4+e7jLeqDxNh9zlAZnMOs/n8zexAvxqBovJqun/3YzlYZNsK+hArGshMNYFeB8yC5WhrCQ4THeHTbqGrhMh78xsXT1bsobNZlOWzJAtGS1/+FJ3WNam7yPsEzREnjGY7ibHYC8ms814+3Fbl/EmudBKthArpaZa4pMR0F+lzyfLazkZ5bzMlAA0mZPtSo0qU5nLm2xTthHYh4m0bLoGRXqc8NNkq9pXvddZtbtUr03fx5nIb5Q86FRvJIBplXibItuMtx+fdRVvCir92giUSJAoTx/eZpLZEE9z2beFlNUMmIAmg7IdelGWowyZVQrA+4WbXcp0Fcema4p1HXMkvfrlyoKlLsi14fu67ElAyxaKXIMWFsmD7daMjz4xma2sCHVXDTPemuMaH/8mkHGTLZnA/aZAuR4vMpCxqocr8p1ySJgPAUqJWr2DW80YJPiZs/qDKjHZRQKDcJtC+1KDTdcU61bnoMTkTijX4rA/NsK+2Kn6GnHoSw33U3jnPdu2fF+HPZUs8tf09K/Vs4YY7MWSbcbbjzu6hjffGHa+1KAiVr2dYAuUEBCHyKYMTvkes+06VMr1UszV9Ou6dfs+hU2emSMGe7Fkm/EW5qk6uCZMg/TSQWTre3AUAuIQ2dTbp4TTZZCp10kxn64HmWJe3znq8L3v2nXJxWDPt1rQ6Zzx5u/JruLNWWZiItM9WZ35QkAcIuvvKn/J/JN3blvV5Xv3yvVKtIG9jDe3T7uMNyfZklXRv6WvSI+WHqPt3mYIiENk3W4Kl8g/5my3WZ2+D/dW2hFtYC/j7W/jzUm2oRB/px8PD91blrdbwMf3bduwzR8Pb3vvXVv/3fD2H129Z0EBRX4oAAAAAElFTkSuQmCC

------=_Next_Part_0001448811.402
Content-Type: image/png;
	name="0.437174573907366.png"
Content-Transfer-Encoding: base64
Content-ID: <0.437174573907366.png>
Content-Location: 0.437174573907366.png

iVBORw0KGgoAAAANSUhEUgAAAR8AAAATCAYAAACp4gmCAAAG/klEQVR4Xu2c7Y3iMBCGsx0gSkBUgCgBbQVoS0BbAdoSEBUgSkBUgCgBUQGiBEQHOT0RwxmfY4/tBLInkO7HkTiZmXfmnQ+b/Sjen7cF/lML7Ha78vPz8+M/Ve/Xq+UF5nQ6lT8/P8VisSiGw6EKxMlkUvZ6veLr64t/qjVYcbValfv9vjLodrtVr/v1CDxJgbaw7DJu+OJ+v3/70pN8LPY1tcAcDoeKeA6HQ3G9XtUATqfTMoc8ctfHGqCL918ulxLyns/nRROZu2ksN5tNOZvNHvziFbiF7BQiH/TAv/v9fuUGkjQ3m03x/f2t9vm2fKgp+Vx4tSVzzHO9BkZogIghk1wnzF0fo3zX7qU6Wa/XxWAwwPmL3W7XCPmgZ5NYEvSXy+WhGn4mblo7+chnNpuV0+n0wb6Q9GQyKajAx+PxS8mnSflceHXB970GxgCj0SgqC+Q6Ye76Lhi1IRnKJsmnbSxTcaNtg2wzKrxaO9WRj1QUy+XyH/8fjUbl8XhslHiYPZFUtOOLZ8un9ddYPULP9Rp5MBhUwGrnPbws1QlF0Nz1IYV/0fVGyadtLFNxewX5ICsVjqu1WiwWjBsaIR902263xER0An+GfNpYSNUj9PwHI2N4FpCJ+Jh9PWx8Pp+r7zGmDIePx2OxXq/vz7Gd0FzH82jj+LCe/9sZL9WJQ4rWXcew1+v1rq8t33g8fpCZOZirJLdtR5YzMyh2oFXBhjgW7+T/2KEmI2aRTxtYkvmQ38Y8J+m8gnyoArE7WDfdXtHiUOWIf8dsuoiPNiWfD69QvOTooY35O2lQopoMDQkgoMx7eCBBw3ButVrdmRxDQVaSLUzyQAEGelwfDocP63ieHaA5Thwyput6SD6IhqGvZEjJAPYOSsh2OMHNBh/MKyA0HBTH7PV6VSA4giCZfELypGIpg1iXzKlJ4xXkI4Nq7M6QGb92JUJf+2P7E7gul8sqobieFeOfWvl8z+QZPrzq1ubqEYopM+Yr8sEBCAYzU5ulKYM4gsfI2nfSms/nVTYUkjKdUM5ZACKBfD6f7+vIzIBvB7LGiSE8QNZ8kNvV27PWJx82wZlMmW1dNbbjHvSXDMg72clS7CAmkU/bWOKcJJKiKB6qZg1uLrxeQT4iB7rcfBD/fUiO3EMg9ft91XEUkjKJKmZEEfLfkHy+9eLbdXi5yJMYzdUjJuYrw5LJYCSzB+Y7qhbTmBAG35m7X2RZAlxaL5cTQhZkGJMEuI8KwO6vU504BKTvep18NnHZFUWM7eT9LgKrkS2JfNrGEvlpGc1WW1uxupKGtPLS6ostfEnDslf0wNllb3ybSiF22Cznp3KDNuS/qfLV4dUW+chzNTFftQFkstPpdCca2XK0s7Mr+IqiKM02zEUeBATAWvOd0nynCP0K8nHJZ393y4IPdoqxnejHbgplueIcSTT5xMiTg6WrTUzF7ZmVD/aB7Fw7a2RsKl2pxF2J1kcQZrtSNxcMEYxWPpnHUP3TMsoczlV5edp6pzhN6CFJORTzHxANFYhZRpstkXVEvWp3pBR1tVO2E7rKPnOdfQRe48RNtV0o7ZLP9Z3ZzojMkbaTMv6BwDw/AYgmn0h5orHMxe3VbRcYUqG4hsBUCMQB17iP5MAO4e0Qonr3C2K4zTWq2U/MwFkrn9HGV/IxL0T+2/mwu6w+vEJEmKOHNubvbRfsCamwkJkEjEqbJECIY5vVClmcWZE5LLXJwzWDMEsye2tTQz4hw8Vcd8nnGiybg3VTZjKLz3Y4hMx4bra8Ez02pR2tmRM4yUfKfOzumkeE5CGoUrHEwREev2gKt2dWPlR7yG/PGQlSqjmzlZQ4iG3DTN+L3aKOkU9OrYsuxI1dcfnwio2RmCMD2pivyIfseyulK5k4WHhTpGJvnFx+wwMp8SHguGYHjk0eLkbGcJRkZCF5/qvaLpd8MTKHbIedIArsJkP7W7aqdlrMFsDMNuABDqyDvITgpSW2Z3Riv5A8OVjybnRBLmQyyS81aaSQj8ZO2MM+ZAiu8ltFfE82LaTiMQPS5QMxAWveC7lhN8YTvoF0jHxylEJmpiQde0ziwytFlxg97CrMFfPqctJ3MMtUJNUJX0U+KSB0YY25gxYrTxtYpuKeQj5afUO/7fI9R1qurvzOy5YV3UhAJCXz5HHdTEtrs2fepyYf7eAq1Qnf5BMHew75tIFlKu6a7ew4y/y9O4d8qEKojjj71uT2eaouLvKRlgsb0kHUnYpu6p1NP0dFPtqzAgiX6oRv8tFDS8ltt6va1W1hmYu7Vv6Y+3LIJ+Y973vTLBAkH0o6+mSO1OPwlHq+g1e5Tpi7Ps0Mv2tVatXTJpZdxO1NPt326yD5xIr//mNisRbr7v0aLLv8x8S6SIjdRfv5kv0BrSj5jHoJwGsAAAAASUVORK5CYII=

------=_Next_Part_0001448811.402
Content-Type: image/png;
	name="0.11985372782417136.png"
Content-Transfer-Encoding: base64
Content-ID: <0.11985372782417136.png>
Content-Location: 0.11985372782417136.png

iVBORw0KGgoAAAANSUhEUgAAAXAAAAATCAYAAACJDlZ/AAAH/klEQVR4Xu2d8W0yPQzGrxsgRkBMgDoCYgLECOidoOoIiAkQIyAmQB0BdQLECIgN+PS798yXM0kuCTmgb6//leYS+7H9xHF89K3ofv4pBE6n02Wz2RR//vx5+6cU65TpEPjlCKxWq8tsNiv6/f41tr1BfjgcLp+fn8VisSiGw2EQIYzH40uv1ytYaDabWZ9BkK+vr9Ic2+22NibkedOOvrl+o73n8/llvV432qot2z4b81y+lduvOrztXPBsf3Gtn9v+OfQkOYOPzfh2Bvp+vy8H7/f74nw+NxKCCDidTi+alPnbZrO5zOfz2ly2sa7nmwBIfa5p3p/098VicRmPx8X7+7vXXo+wbdu44cwkCR8fH8VkMrnRN5dv5fCrDu+2vaG9+XPYP6d0u93u8v39XXx+fpY+7w10SJfjuI2QXUK5FCbgTqdTLZNPCTKC4f39/Ub2VwM6p9FC5xqNRhg3aLNt27ahMseOI5Ndr9fFYDCgTFTsdrtsBG7zrVx+1eF9a2lXLMf6RJvjc9k/p4xmnHuDneP4aDSKqqfGKJxC4ABRGb4me8y6OcF8lbk48iFLaO27bds+CJdLTgK3+VYuv+rwtnuELZYf5DtBy6TYn1gkwbCdDIMWbRjESZv5KVF7CXwwGJQBElr/Zt0YhVMJ3KZfzLo5QHy1Obg7WK1WwbZq27YPwic7gWu5c/lVh/eDPCLzMin2b5vA2fS4l6QyUiNwmB39YXd+zJo1R8Dj8Vh+Pp1OC7mEpB5jFtW1wtRseE6Pc5G9CzBzHoQ3b2JjN44cNsZI5/P5ihOlJn7ABdwo85ifcZ9gq01rzNHNLIOAO6UnMKS+zZr8zjrm5XKv10Me54b8aNvmwDhgjiwE7vOtlABG7g5vdzLXFMsBdo8a4uIg81REiRfeI85MbkmxfwqB22QUmbiH1Em0xPs14MngIGY5giM4KEn9GyKBQPr9fkGmJ+MAAcWlqG4qbLa0sSCkY5JYaAaOcqzLszyDHLpUkAJ0lBcYg9ELUNF7OBzW8AAnyJrLNZERg263W0j3puPGhzl6V2u8UftlU6D+y9FJ4+kj8GfYNhXbyOfuJvAm30rxqw7vv1a0YdeEd6T9G4f7OEjHELVlkiKz9JFi/1gC98lok6lSGn7+m4GzIMRgZn4mUZKyy+5UZYFXIvr4+CgzbCF6U2GMBRiQD0SnL01DCRxSlJZEjqKArFsUQ4BmsyF7DflB3+Vyac1oRS8h6+PxeB0Hlsvlkp3ciVEI5owx9WZNui5sWTb4TiaT2pqi47NsG4JxhjF3E3iTb4X4lalHh/f/aNiwa8I7g0/UpnBxkI2TODVxen50Bu7jSWQiydMZODxIElmSDDsRpGhmtXymU3cm4zOzK4VsA7KTMorNaJA8R3/dnxxK4GIRdioycUj42SUUZGJDoOfdJHp00uSvM7IYzEV3vVGaXuoj8GfZVgeitNKFBChJgpzoGsbfTeBNvhVL4B3efgJvwtu0d06f0fFjOxUzRidtTfa3JYVSapZStOjkSwoZY4tx5LQ1JlwJXHaiw+FwZXmA05k2C9iIqCiK8vLMLL3otkNb+YT5YgmcnYrWMTO7FXCagA4hjtgx6EWd2zxy6c9k0zHxjcFcZOIoRXZgM6bUynR2HrNObtvGYpk4PhuBu3wrxq86vOsv5fmw88Vyoi94H9Mnd2SjJGkmCiSoOnGIsb956k3pQrFVF1wEfq2B23oxUYR6NTVbSe8r4coShGS/thKCVtgco+aKJnBXJu/aDLRFc5VQmNd2BLN9Zh6pRf9IzDlxlCcPcxPQWNpq4JHrZLVtG0FomTMbgcecEl26dXiHE7gvllvynZp/a7LEdqyrGw0eSeAkwya/IhMnfFsXYO0Sk1/k9hUSotZKBs5xQnYAcU6TRMgKqZ37LiYxFMAwl97hYjNw1uOC0PaKfgrQ9ziKrdZpO5aZl7ym/k2YV32eZc27sgHiliUvm2FdbYRN65DRt2Hbe7CNeDYbgbt8S/uVvBKP3+syHnJ3eIeVUHyxHGH/4KFmSVhOrNIQwCSuTDeFV2IvMQ0lagTukummjZBsruoQKefi5Z2q7a1sicNR5bsBIHZ+IHz+pncHrTCLARRz6i9iiSVwvUOZ1ksBOtj6loFsTNXbgLXLSv0Z+lNmIYM2L0iaMAdfcANvuUDm/oFjH7uyfknA9SJP0zpt2fYebH3PEnxVq2XZSolfgRG+ldLh5Aoe+dzmz6yn74xkfId3GIH7YrkN38EudILhL1WmXcYXv3M/py8vXfYPkS2VwKlWiE+zjuulvOAXeTRB2tr3tEIxRBpD4E01s5h1Q4zw08bId4PoVsUQPcyOI9/4n4RxLt9y6Wx2U4Rg3HYsxcqQe3wuvHPLde98KT6fSuChsga/Sm9O6LqIfBSB2zo+npmBh4L9yHGcCnQmGrJ+G7YNWbfNMTGE4vOtNgi8w/u2e6tNX7hn7hQCr+6sgr6TKFY2eeFHsvOgRVx93LbFYxT2BZnUqThSUDKgdKDfkuoI/NYCoV8nK0+2ZdtYx8w9Ppdv2eax9QuHyt/h3RzLoVg+YlwMn7UtT9TXyYowMD71cF6Fp05ke409lUibgoxskiZ21ubNRt93srwS0G0b0jd/zD90aNO2z8SAtXP5lm2e1PJJh3dYLD/bd1L5rG25o/+hQ4pAIf+QIdeX7iPfK37xegpuP+GZENs+W49cvvUKfvWb8H623+j1X8H+IZj8By32FVqgpt/DAAAAAElFTkSuQmCC

------=_Next_Part_0001448811.402
Content-Type: image/png;
	name="0.5454202325938964.png"
Content-Transfer-Encoding: base64
Content-ID: <0.5454202325938964.png>
Content-Location: 0.5454202325938964.png

iVBORw0KGgoAAAANSUhEUgAAAQEAAAATCAYAAACQhbjZAAAGTUlEQVR4Xu2c7Y3yOhCFsx0gSkBUgCgBUQGiBEQFiBIQFSBKQFSAtgS0FSBKQHTA1ZObiSZeJ7ENSZzVyz/AjufLZ86MDV/Jv1dUFng8Hq/T6ZSs1+uvqAT7J8yfsMDhcHgtl8tkOBzm8VUZaLfb7bXdbpPdbpeMx2OnoJzNZq/BYJCw0HK5rJ2DUN/f36mBz+dz7fg/4YkKJVar1et4PNbaoY++aUPmmOIjxtgmybCndYyVBtv1ek0HX6/X5Pl81galGH+xWLxCNnPovJic/q4su93uNZvNkul0WmnvPvqmbZnf9cUn58cW25fL5fXz85Nst9s0ziqD7XQ6pdTUZ1PXKUwwTKfTX2vXzfukU2J91mQywTlOgNtH37Qpc0w+jjG2daxVBhzUdDKZeNWnLgpnQFBY22VeTI79tCxQR57p2gvoo2/alPnT/nnneSGxTTyMRqNkPp87JQVf+WCdPJ+SvXKB0Wj0ulwuzv0ABAlR+J15vsrHOp5eyuFwcLZ1H33Tpswx+TlkTzQNAiRien2w/AIIgA4YD4TgtVqt8n4AVO5+v6efLxaLRJp51Ba6yVCmMHUI8xnP4ro72QUIYOTn85nrSdnDC73Qm5JFf0Z/xFarmzZDN03psdvj8UjQnXqfNXnPOrrhOhgMkKcUlPvomy5lbgIEdAzrmNcMh8Yb+wd/S4y3BQI2+UQeentmc19iLg86MhGbW+gogmNI6QcQzATxcDhMyFgyDgOgtDQZbAojHPPYRHzPc0zaG2KoUEdjGIyC3OPxuKAPerLhN5tNLiOAcT6f2biFTVpnM/TO1viiMw6wHI/HlILhAIBAgKUKBOrWidE3XcscGhtl8/TRrc132pfU2wC8UPmQ2PZlAlXymfIoHdnj/zMBFiQ4dQbTmxXqIOiWZbN8M2w2mzTDC1jYFCZI5bgQSoiBzONDF0MBOGRRlxfy7vd7a2Zlc+Ig2fD3+z0fhy32+z1IXqqji80Yo/VmTY5NbdkegJjP54U1Rce++Eb7JAaZXWLEZ4zEDL4icUhT3XzPFzAg2GSbTKBMPpGHBG8yAfYiyTANdJCNjamzM5+ZFALl+EyfFoD4bDihR1WbGbSCEbCRuy4HsnInvdOgwQL5TQAxs5qPzSTQTLDUAVgFAn30TQwya/vK8aTLpifJCau1jTf9aGOJjDFjquqEzZbcpPSW0lxkqUpujLHFGTLaGs45CAiS3W63HCkwmpnxWcC2GZIkSRtauowoUxi0Wq/X1oznwgRcnOgzhmCl7tcdWPMzAS5tHx+biTxQMrKDzRlSt5kswWedWHwTi8w+ceAz1mSyxC1lngYOkqV+HxLbvuWAAolfTLsMBPKegO3cHiWocaiBhWZki6R0XLK4jU5XKQxK0Riz3YhzMdSnygF0sdE422ea2ootPG0G80kZkAYSw64pGzNBwHOdTn0jQRiLzD4b23Nswc4mKKA/z9NNZJfYNmUIBQGSst6jyAPbtd34LTQGeSPdTDYCtStMAEojKCLO1YFMdqOX4Kow42m62a4ThxjK03mF4ba61UbtdONTI3ydzbIz2LQHkNkwryNtjik7IqxbB2bRtm/k+i++N8s6KZW6jqd3YqNqri6ThcFJs5d5tqwbEtufAoEyFvDriJCslHU3U/25IJQdiaXHZTha7kEDDrxwMt+ZCFOjcAGltLFDDPWOo2ElbFRNz22fYSxKBjK5bvbU2Qz7EBzYS5qq9FOgjiCzeQmk7LJQ3Tpd+EbKRbOPJP6IQeZ3YqNqLrpxUsQeyTJ+6mfew3J1jMhzQmI7FARg5+xlka/s8pnzZSFzk9qO9kyDVd0TKOsH8IwQQzXl6C6eS1aBgZnHkC6ylB27Nu0bffrhImeb8eQrT5PjQ2I7FARc9XC+NqwfaJ6Nli1WpjC02uzEd8kEXI3V5jiYCEBQ9wMiU6aufPMOCDQtc5t+q1srBASyPlIjV4blUpGwBKdFbA2zOhCQeglqwuaHButbVK5Zqs7Af+17158Si95d+cY8C/fxQxsy+8jT9NgQEGhKJq+fEosQoAb9Aa77Uu/YrvzaMrrQWy4pMJcbeFX/SRCToZpygMtzff5UpEvfhLKAtmR2sXVbY2KKbe8/FQkx0r8/FQmxWjtz+ugbX5nbsaTbKjH+qYhN8v8A7ErRHgLlcC0AAAAASUVORK5CYII=

------=_Next_Part_0001448811.402--

